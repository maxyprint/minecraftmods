<?php
/**
 * Theme functions and definitions
 *
 * @package HelloElementor
 */

if ( ! defined( 'ABSPATH' ) ) {
    exit; // Exit if accessed directly.
}

define( 'HELLO_ELEMENTOR_VERSION', '3.1.1' );

if ( ! isset( $content_width ) ) {
    $content_width = 800; // Pixels.
}

if ( ! function_exists( 'hello_elementor_setup' ) ) {
    /**
     * Set up theme support.
     *
     * @return void
     */
    function hello_elementor_setup() {
        if ( is_admin() ) {
            hello_maybe_update_theme_version_in_db();
        }

        if ( apply_filters( 'hello_elementor_register_menus', true ) ) {
            register_nav_menus( [ 'menu-1' => esc_html__( 'Header', 'hello-elementor' ) ] );
            register_nav_menus( [ 'menu-2' => esc_html__( 'Footer', 'hello-elementor' ) ] );
        }

        if ( apply_filters( 'hello_elementor_post_type_support', true ) ) {
            add_post_type_support( 'page', 'excerpt' );
        }

        if ( apply_filters( 'hello_elementor_add_theme_support', true ) ) {
            add_theme_support( 'post-thumbnails' );
            add_theme_support( 'automatic-feed-links' );
            add_theme_support( 'title-tag' );
            add_theme_support(
                'html5',
                [
                    'search-form',
                    'comment-form',
                    'comment-list',
                    'gallery',
                    'caption',
                    'script',
                    'style',
                ]
            );
            add_theme_support(
                'custom-logo',
                [
                    'height'      => 100,
                    'width'       => 350,
                    'flex-height' => true,
                    'flex-width'  => true,
                ]
            );

            /*
             * Editor Style.
             */
            add_editor_style( 'classic-editor.css' );

            /*
             * Gutenberg wide images.
             */
            add_theme_support( 'align-wide' );

            /*
             * WooCommerce.
             */
            if ( apply_filters( 'hello_elementor_add_woocommerce_support', true ) ) {
                // WooCommerce in general.
                add_theme_support( 'woocommerce' );
                // Enabling WooCommerce product gallery features (are off by default since WC 3.0.0).
                // zoom.
                add_theme_support( 'wc-product-gallery-zoom' );
                // lightbox.
                add_theme_support( 'wc-product-gallery-lightbox' );
                // swipe.
                add_theme_support( 'wc-product-gallery-slider' );
            }
        }
    }
}
add_action( 'after_setup_theme', 'hello_elementor_setup' );

function hello_maybe_update_theme_version_in_db() {
    $theme_version_option_name = 'hello_theme_version';
    // The theme version saved in the database.
    $hello_theme_db_version = get_option( $theme_version_option_name );

    // If the 'hello_theme_version' option does not exist in the DB or the version needs to be updated do the update.
    if ( ! $hello_theme_db_version || version_compare( $hello_theme_db_version, HELLO_ELEMENTOR_VERSION, '<' ) ) {
        update_option( $theme_version_option_name, HELLO_ELEMENTOR_VERSION );
    }
}

if ( ! function_exists( 'hello_elementor_display_header_footer' ) ) {
    /**
     * Check whether to display header footer.
     *
     * @return bool
     */
    function hello_elementor_display_header_footer() {
        $hello_elementor_header_footer = true;

        return apply_filters( 'hello_elementor_header_footer', $hello_elementor_header_footer );
    }
}

if ( ! function_exists( 'hello_elementor_scripts_styles' ) ) {
    /**
     * Theme Scripts & Styles.
     *
     * @return void
     */
    function hello_elementor_scripts_styles() {
        $min_suffix = defined( 'SCRIPT_DEBUG' ) && SCRIPT_DEBUG ? '' : '.min';

        if ( apply_filters( 'hello_elementor_enqueue_style', true ) ) {
            wp_enqueue_style(
                'hello-elementor',
                get_template_directory_uri() . '/style' . $min_suffix . '.css',
                [],
                HELLO_ELEMENTOR_VERSION
            );
        }

        if ( apply_filters( 'hello_elementor_enqueue_theme_style', true ) ) {
            wp_enqueue_style(
                'hello-elementor-theme-style',
                get_template_directory_uri() . '/theme' . $min_suffix . '.css',
                [],
                HELLO_ELEMENTOR_VERSION
            );
        }

        if ( hello_elementor_display_header_footer() ) {
            wp_enqueue_style(
                'hello-elementor-header-footer',
                get_template_directory_uri() . '/header-footer' . $min_suffix . '.css',
                [],
                HELLO_ELEMENTOR_VERSION
            );
        }
    }
}
add_action( 'wp_enqueue_scripts', 'hello_elementor_scripts_styles' );

if ( ! function_exists( 'hello_elementor_register_elementor_locations' ) ) {
    /**
     * Register Elementor Locations.
     *
     * @param ElementorPro\Modules\ThemeBuilder\Classes\Locations_Manager $elementor_theme_manager theme manager.
     *
     * @return void
     */
    function hello_elementor_register_elementor_locations( $elementor_theme_manager ) {
        if ( apply_filters( 'hello_elementor_register_elementor_locations', true ) ) {
            $elementor_theme_manager->register_all_core_location();
        }
    }
}
add_action( 'elementor/theme/register_locations', 'hello_elementor_register_elementor_locations' );

if ( ! function_exists( 'hello_elementor_content_width' ) ) {
    /**
     * Set default content width.
     *
     * @return void
     */
    function hello_elementor_content_width() {
        $GLOBALS['content_width'] = apply_filters( 'hello_elementor_content_width', 800 );
    }
}
add_action( 'after_setup_theme', 'hello_elementor_content_width', 0 );

if ( ! function_exists( 'hello_elementor_add_description_meta_tag' ) ) {
    /**
     * Add description meta tag with excerpt text.
     *
     * @return void
     */
    function hello_elementor_add_description_meta_tag() {
        if ( ! apply_filters( 'hello_elementor_description_meta_tag', true ) ) {
            return;
        }

        if ( ! is_singular() ) {
            return;
        }

        $post = get_queried_object();
        if ( empty( $post->post_excerpt ) ) {
            return;
        }

        echo '<meta name="description" content="' . esc_attr( wp_strip_all_tags( $post->post_excerpt ) ) . '">' . "\n";
    }
}
add_action( 'wp_head', 'hello_elementor_add_description_meta_tag' );

// Admin notice
if ( is_admin() ) {
    require get_template_directory() . '/includes/admin-functions.php';
}

// Settings page
require get_template_directory() . '/includes/settings-functions.php';

// Header & footer styling option inside Elementor
require get_template_directory() . '/includes/elementor-functions.php';

if ( ! function_exists( 'hello_elementor_customizer' ) ) {
    // Customizer controls
    function hello_elementor_customizer() {
        if ( ! is_customize_preview() ) {
            return;
        }

        if ( ! hello_elementor_display_header_footer() ) {
            return;
        }

        require get_template_directory() . '/includes/customizer-functions.php';
    }
}
add_action( 'init', 'hello_elementor_customizer' );

if ( ! function_exists( 'hello_elementor_check_hide_title' ) ) {
    /**
     * Check whether to display the page title.
     *
     * @param bool $val default value.
     *
     * @return bool
     */
    function hello_elementor_check_hide_title( $val ) {
        if ( defined( 'ELEMENTOR_VERSION' ) ) {
            $current_doc = Elementor\Plugin::instance()->documents->get( get_the_ID() );
            if ( $current_doc && 'yes' === $current_doc->get_settings( 'hide_title' ) ) {
                $val = false;
            }
        }
        return $val;
    }
}
add_filter( 'hello_elementor_page_title', 'hello_elementor_check_hide_title' );

/**
 * BC:
 * In v2.7.0 the theme removed the `hello_elementor_body_open()` from `header.php` replacing it with `wp_body_open()`.
 * The following code prevents fatal errors in child themes that still use this function.
 */
if ( ! function_exists( 'hello_elementor_body_open' ) ) {
    function hello_elementor_body_open() {
        wp_body_open();
    }
}

// CUSTOM CODE STARTING HERE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

// --------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------
function hello_user_loggedin_shortcode() {
    // Überprüfen ob ein Benutzer eingeloggt ist
    if (is_user_logged_in()) {
        // Holen des aktuellen Benutzerobjekts
        $current_user = wp_get_current_user();
        
        // Stildefinitionen
        $spacer_style = 'height: 20px;'; // Abstandshöhe
        $username_style = 'font-family: Roboto, sans-serif; font-size: 20px; color: rgba(0, 0, 0, 0.6); margin-bottom: 10px;';
        $button_style = 'font-family: Roboto, sans-serif; font-size: 16px; color: #007aff; text-decoration: none;';

        // HTML-Ausgabe
        $output = '<div style="text-align: center;">';
        $output .= '<div style="' . $spacer_style . '"></div>'; // Abstand über der Anzeige
        $output .= '<span style="' . $username_style . '">' . esc_html($current_user->user_login) . '</span>';
        $output .= '<br>';
        $output .= '<a href="' . wp_logout_url(home_url()) . '" style="' . $button_style . '">Logout</a>';
        $output .= '<div style="' . $spacer_style . '"></div>'; // Abstand unterhalb der Anzeige
        $output .= '</div>';

        return $output;
    } else {
        // Wenn kein Benutzer eingeloggt ist, wird eine allgemeine Nachricht angezeigt
        return '<span style="font-family: Roboto, sans-serif; font-size: 20px; font-weight: normal;">Hello Guest!</span>';
    }
}
add_shortcode('hello_user_loggedin', 'hello_user_loggedin_shortcode');

// --------------------------------------------------------------------------------------------------------------------------------------------------------------
function yprint_custom_recover_account_form() {
    ob_start();
    ?>

    <style>
        
        /* Mobile Ansicht - Verkleinern des Formulars */
        @media (max-width: 600px) {
            .yprint-recover-container {
                width: 90%; /* Verkleinert das Formular auf 90% der Bildschirmbreite */
                padding: 20px; /* Weniger Polsterung für kleinere Bildschirme */
            }

            .yprint-logo div {
                width: 100%; /* Skaliert das Logo auf die volle Breite des Containers */
                height: 150px; /* Reduziert die Höhe des Logos auf mobilen Geräten */
            }

            .yprint-form-group {
                margin: 10px 0; /* Weniger Abstand zwischen den Formularfeldern */
            }

            .yprint-form-group input {
                font-size: 16px; /* Größere Schrift für bessere Lesbarkeit auf kleineren Bildschirmen */
                padding: 10px; /* Vergrößert die Eingabefelder etwas */
            }

            .button.button-primary {
                font-size: 16px; /* Größere Schrift auf dem Button */
                padding: 12px; /* Erhöht die Größe des Buttons */
            }

            .yprint-links a {
                font-size: 14px; /* Kleinere Schrift für die Links */
            }

            #loading .spinner {
                width: 40px; /* Größere Ladeanimation für mobile Geräte */
                height: 40px;
            }
        }
		body {
    overflow: hidden;
}
		
    </style>

    <div class="yprint-recover-container">
        <div class="yprint-logo">
            <div></div>
        </div>
		
        <form method="post" id="recover-form" style="text-align: center;">
            <div class="yprint-form-group" style="position: relative; margin-bottom: 20px;">
                <span class="dashicons dashicons-email" style="position: absolute; left: 10px; top: 40%; transform: translateY(-50%); color: #999;"></span>
                <input type="email" name="user_email" id="user_email" class="input" placeholder="Email" required style="width: 100%; padding: 10px 10px 10px 35px; border: 1px solid #ddd; border-radius: 30px; background-color: #F6F7FA; text-align: center;">
            </div>
            <div class="yprint-form-group" style="text-align: center; margin-bottom: 20px;">
                <input type="submit" name="wp-submit" value="Recover Account" class="button button-primary" style="width: 100%; padding: 10px; background-color: #007aff; border: none; color: #fff; border-radius: 5px;">
            </div>
            <div class="yprint-links" style="text-align: center;">
                <a href="https://yprint.de/login" style="color: #007aff;">Back to Login</a>
            </div>
        </form>

        <!-- Ladeanimation -->
        <div id="loading" style="display: none; text-align: center;">
            <div class="spinner" style="border: 4px solid #f3f3f3; border-top: 4px solid #007aff; border-radius: 50%; width: 30px; height: 30px; animation: spin 1s linear infinite; margin: 20px auto;"></div>
            <p style="color: #007aff;">Processing...</p>
        </div>

        <!-- Popup Info -->
        <div id="success-message" style="display: none; text-align: center; color: #007aff; margin-top: 20px;">
            <p>If an account exists with that email, you will receive recovery instructions.</p>
            <button id="back-to-login" class="button button-primary" style="background-color: #007aff; color: #fff; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;">Back to Login</button>
        </div>
    </div>

    <script type="text/javascript">
        document.getElementById('recover-form').addEventListener('submit', function(event) {
            event.preventDefault(); // Verhindert das sofortige Absenden des Formulars

            // Ladeanimation anzeigen
            document.getElementById('recover-form').style.display = 'none';
            document.getElementById('loading').style.display = 'block';

            var email = document.getElementById('user_email').value;

            // AJAX-Anfrage an den Server senden
            jQuery.post('<?php echo admin_url('admin-ajax.php'); ?>', {
                action: 'yprint_recover_account',
                user_email: email
            }, function(response) {
                document.getElementById('loading').style.display = 'none';
                if (response.success) {
                    document.getElementById('success-message').style.display = 'block';
                } else {
                    alert(response.data.message);
                    document.getElementById('recover-form').style.display = 'block';
                }
            });
        });

        // Button zum Zurück zur Login-Seite
        document.getElementById('back-to-login').addEventListener('click', function() {
            window.location.href = 'https://yprint.de/login'; // Leitet zur Login-Seite weiter
        });

        // CSS für die Ladeanimation
        const style = document.createElement('style');
        style.innerHTML = `
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        `;
        document.head.appendChild(style);
    </script>

    <?php
    return ob_get_clean();
}
add_shortcode('yprint_recover_account_form', 'yprint_custom_recover_account_form');


// --------------------------------------------------------------------------------------------------------------------------------------------------------------
function yprint_recover_account_callback() {
    $user_email = sanitize_email($_POST['user_email']);

    if (empty($user_email)) {
        wp_send_json_error(array('message' => 'Please enter a valid email address.'));
    }

    // Benutzer mit der angegebenen E-Mail-Adresse abrufen
    $user_data = get_user_by('email', $user_email);

    if (!$user_data) {
        wp_send_json_error(array('message' => 'If an account exists with that email, you will receive recovery instructions.'));
    }

    // Generiere den Wiederherstellungslink
    $reset_key = get_password_reset_key($user_data);
    if (is_wp_error($reset_key)) {
        wp_send_json_error(array('message' => 'Could not generate reset link.'));
    }

    $reset_url = site_url('/reset-password') . '?key=' . $reset_key . '&login=' . rawurlencode($user_data->user_login);

    // Vorname des Benutzers extrahieren (falls vorhanden)
    $first_name = get_user_meta($user_data->ID, 'first_name', true);
    if (!$first_name) {
        $first_name = $user_data->user_login; // Fallback auf Benutzername, falls kein Vorname vorhanden ist
    }

    // E-Mail-Details festlegen und den Benutzernamen und Passwort-Zurücksetzungs-Link in der Nachricht hinzufügen
    $subject = 'Account-Information';
    $message = "
    <!DOCTYPE html>
    <html lang='en'>
    <head>
        <meta charset='UTF-8'>
        <meta name='viewport' content='width=device-width, initial-scale=1.0'>
        <style>
            body {
                margin: 0;
                padding: 0;
                font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif;
                background-color: #f5f5f5;
            }
            .email-container {
                max-width: 600px;
                margin: 0 auto;
                background-color: #ffffff;
                border-radius: 10px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                padding: 40px;
            }
            .email-header {
                text-align: center;
                padding-bottom: 20px;
            }
            .email-header img {
                width: 100px;
            }
            .email-content h2 {
                color: #333;
                text-align: center;
            }
            .email-content p {
                color: #555;
                text-align: center;
            }
            .email-button {
                text-align: center;
                margin-top: 20px;
            }
            .email-button a {
                display: inline-block;
                background-color: #007aff;
                padding: 15px 30px;
                color: #ffffff;
                text-decoration: none;
                font-size: 16px;
                border-radius: 5px;
            }
            .email-footer {
                text-align: center;
                color: #999;
                font-size: 12px;
                margin-top: 20px;
            }
        </style>
    </head>
    <body>
        <div style='background-color: #f5f5f5; padding: 20px;'>
            <div class='email-container'>
                <div class='email-header'>
                    <img src='https://yprint.de/wp-content/uploads/2024/08/yprint-icon.png' alt='YPrint Logo'>
                </div>
                <div class='email-content'>
                    <h2>Account Information</h2>
                    <p>Hello " . esc_html($first_name) . ",</p>
                    <p>Your username is <strong>" . esc_html($user_data->user_login) . "</strong></p>
                    <p>If that’s all you needed, you can log in with this information now.</p>
                    <p>If you wish to reset your password, click the button below:</p>
                </div>
                <div class='email-button'>
                    <a href='" . esc_url($reset_url) . "'>Reset Password</a>
                </div>
                <p class='email-footer'>If you did not request this, please ignore this email.</p>
            </div>
        </div>
    </body>
    </html>";



    $headers = array('Content-Type: text/html; charset=UTF-8', 'From: YPrint <do-not-reply@yprint.de>');

    // E-Mail senden und den Erfolg überprüfen
    if (wp_mail($user_email, $subject, $message, $headers)) {
        wp_send_json_success();
    } else {
        wp_send_json_error(array('message' => 'Failed to send recovery email.'));
    }
}
add_action('wp_ajax_nopriv_yprint_recover_account', 'yprint_recover_account_callback');
add_action('wp_ajax_yprint_recover_account', 'yprint_recover_account_callback');

// --------------------------------------------------------------------------------------------------------------------------------------------------------------
// Passwort zurücksetzen Formular für /reset-password Seite
function yprint_reset_password_form() {
    ob_start();
    ?>

    <div class="yprint-reset-container" style="max-width: 600px; margin: 0 auto; padding: 40px; background-color: transparent;">
        <form method="post" id="reset-form" style="text-align: center;">
            <input type="hidden" name="login" value="<?php echo isset($_GET['login']) ? esc_attr($_GET['login']) : ''; ?>">
            <input type="hidden" name="key" value="<?php echo isset($_GET['key']) ? esc_attr($_GET['key']) : ''; ?>">

            <div class="yprint-form-group" style="position: relative; margin-bottom: 30px;">
                <input type="password" name="password" id="password" class="input" placeholder="New Password" required style="width: 100%; padding: 12px; border: 1px solid #ddd; border-radius: 30px; background-color: #F6F7FA; text-align: center;">
                <div id="password-hint" style="text-align: left; margin-top: 10px; color: red; font-size: 13px;">
                    ! Password must be at least 8 characters long, include a capital letter, and a special character.
                </div>
            </div>

            <div class="yprint-form-group" style="position: relative; margin-bottom: 30px;">
                <input type="password" name="confirm_password" id="confirm_password" class="input" placeholder="Confirm New Password" required style="width: 100%; padding: 12px; border: 1px solid #ddd; border-radius: 30px; background-color: #F6F7FA; text-align: center;">
                <div id="confirm-password-hint" style="text-align: left; margin-top: 10px; color: red; font-size: 13px;">
                    ! Passwords must match.
                </div>
            </div>

            <div class="yprint-form-group" style="text-align: center; margin-bottom: 20px;">
                <input type="submit" name="wp-submit" value="Reset Password" class="button button-primary" style="width: 100%; padding: 12px; background-color: #007aff; border: none; color: #fff; border-radius: 5px;">
            </div>
        </form>

        <!-- Ladeanimation -->
        <div id="loading" style="display: none; text-align: center;">
            <div class="spinner" style="border: 4px solid #f3f3f3; border-top: 4px solid #007aff; border-radius: 50%; width: 30px; height: 30px; animation: spin 1s linear infinite; margin: 20px auto;"></div>
            <p style="color: #007aff;">Processing...</p>
        </div>

        <!-- Popup Info -->
        <div id="success-message" style="display: none; text-align: center; color: #007aff; margin-top: 20px;">
            <p>Your password has been reset. You will be redirected to the login page.</p>
        </div>
    </div>

    <script type="text/javascript">
        document.getElementById('reset-form').addEventListener('submit', function(event) {
            event.preventDefault(); // Verhindert das sofortige Absenden des Formulars

            var password = document.getElementById('password').value;
            var confirmPassword = document.getElementById('confirm_password').value;
            var login = document.querySelector('input[name="login"]').value;
            var key = document.querySelector('input[name="key"]').value;

            if (!login || !key) {
                alert('Missing required parameters.');
                return;
            }

            // Überprüfen der Passwortanforderungen und der Übereinstimmung
            if (password.length < 8 || !/[A-Z]/.test(password) || !/[\W_]/.test(password)) {
                document.getElementById('password-hint').style.color = 'red';
                alert('Your password does not meet the required criteria.');
                return false;
            } else {
                document.getElementById('password-hint').style.color = 'green';
            }

            if (password !== confirmPassword) {
                document.getElementById('confirm-password-hint').style.color = 'red';
                alert('Passwords do not match.');
                return false;
            } else {
                document.getElementById('confirm-password-hint').style.color = 'green';
            }

            // Ladeanimation anzeigen
            document.getElementById('reset-form').style.display = 'none';
            document.getElementById('loading').style.display = 'block';

            // AJAX-Anfrage zur Passwortzurücksetzung
            jQuery.post('<?php echo admin_url('admin-ajax.php'); ?>', {
                action: 'yprint_reset_password',
                login: login,
                key: key,
                password: password
            }, function(response) {
                document.getElementById('loading').style.display = 'none';
                if (response.success) {
                    document.getElementById('success-message').style.display = 'block';
                    setTimeout(function() {
                        window.location.href = 'https://yprint.de/login'; // Leitet zur Login-Seite weiter
                    }, 2000);
                } else {
                    alert('An error occurred: ' + response.data.message);
                    document.getElementById('reset-form').style.display = 'block';
                }
            }).fail(function(xhr, status, error) {
                document.getElementById('loading').style.display = 'none';
                alert('An error occurred: ' + xhr.responseText);
                document.getElementById('reset-form').style.display = 'block';
            });
        });

        // Überprüfen der Passwortanforderungen beim Tippen
        document.getElementById('password').addEventListener('input', function() {
            var password = this.value;
            var requirementsMet = 0;

            // Überprüfen der Länge
            if (password.length >= 8) requirementsMet++;
            // Überprüfen auf Großbuchstaben
            if (/[A-Z]/.test(password)) requirementsMet++;
            // Überprüfen auf Sonderzeichen
            if (/[\W_]/.test(password)) requirementsMet++;

            var passwordHint = document.getElementById('password-hint');
            if (requirementsMet === 3) {
                passwordHint.style.color = 'green';
                passwordHint.textContent = '✔️ Strong password!';
            } else {
                passwordHint.style.color = 'red';
                passwordHint.textContent = '! Password must be at least 8 characters long, include a capital letter, and a special character.';
            }
        });

        // Passwortbestätigung beim Tippen überprüfen
        document.getElementById('confirm_password').addEventListener('input', function() {
            var confirmPassword = this.value;
            var password = document.getElementById('password').value;
            var confirmPasswordHint = document.getElementById('confirm-password-hint');

            if (confirmPassword === password && confirmPassword !== '') {
                confirmPasswordHint.style.color = 'green';
                confirmPasswordHint.textContent = '✔️ Passwords match.';
            } else {
                confirmPasswordHint.style.color = 'red';
                confirmPasswordHint.textContent = '! Passwords must match.';
            }
        });
    </script>

    <style>
       @media (max-width: 768px) {
    .yprint-checkout-columns {
        flex-direction: column;
    }
    
    .yprint-checkout-container {
        padding: 15px;
        min-height: auto;
    }
    
    .yprint-checkout-section {
        margin-bottom: 20px;
        padding-bottom: 15px;
    }
    
    .yprint-section-title {
        font-size: 20px;
        margin-bottom: 15px;
    }
    
    .yprint-payment-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 10px;
}
    
    .yprint-form-row {
        flex-direction: column;
        gap: 10px;
    }
    
    .yprint-form-row input,
    .yprint-form-row select {
        width: 100%;
    }
    
    .yprint-back-button-container {
        margin-bottom: 15px;
    }
}

@media (max-width: 480px) {
    .yprint-address-slot {
        min-width: 100%;
    }
    
    .yprint-payment-grid {
        grid-template-columns: 1fr;
    }
    
    .yprint-order-item {
        flex-wrap: wrap;
    }
    
    .yprint-item-image {
        width: 50px;
        height: 50px;
    }
    
    .yprint-item-details {
        flex: 0 0 calc(100% - 60px);
    }
    
    .yprint-item-total {
        margin-top: 8px;
        margin-left: auto;
    }
}
    </style>

    <?php
    return ob_get_clean();
}
add_shortcode('yprint_reset_password_form', 'yprint_reset_password_form');


// AJAX Aktion zur Verarbeitung des Passwort-Zurücksetzens
function yprint_reset_password_callback() {
    if (!isset($_POST['login']) || !isset($_POST['key']) || !isset($_POST['password'])) {
        wp_send_json_error(array('message' => 'Missing required fields.'));
    }

    $login = sanitize_text_field($_POST['login']);
    $key = sanitize_text_field($_POST['key']);
    $password = $_POST['password'];

    // Überprüfe den Zurücksetzungsschlüssel
    $user = check_password_reset_key($key, $login);

    // Hier prüfen wir, ob der Schlüssel ungültig ist, geben aber keinen Fehler zurück, wenn das Passwort bereits erfolgreich zurückgesetzt wurde.
    if (is_wp_error($user)) {
        // Überprüfe, ob der Fehler aufgrund eines ungültigen oder abgelaufenen Schlüssels auftritt
        if ($user->get_error_code() !== 'expired_key' && $user->get_error_code() !== 'invalid_key') {
            wp_send_json_error(array('message' => 'Invalid reset link.'));
        }
        // Ansonsten fortfahren, als ob es erfolgreich war
    }

    // Wenn wir einen gültigen Benutzer haben oder den Fehler ignorieren, aktualisieren wir das Passwort
    if (!is_wp_error($user)) {
        reset_password($user, $password);
    }

    // Erfolgsnachricht senden und Weiterleitung
    wp_send_json_success(array('message' => 'Your password has been reset. You will be redirected to the login page.'));
}
add_action('wp_ajax_nopriv_yprint_reset_password', 'yprint_reset_password_callback');
add_action('wp_ajax_yprint_reset_password', 'yprint_reset_password_callback');

// Füge das JavaScript zur Verarbeitung der Passwortzurücksetzung hinzu
function yprint_reset_password_script() {
    ?>
    <script type="text/javascript">
        document.getElementById('reset-form').addEventListener('submit', function(event) {
            event.preventDefault(); // Verhindert das sofortige Absenden des Formulars

            var password = document.getElementById('password').value;
            var confirmPassword = document.getElementById('confirm_password').value;
            var login = document.querySelector('input[name="login"]').value;
            var key = document.querySelector('input[name="key"]').value;

            // Überprüfen der Passwortanforderungen und der Übereinstimmung
            if (password.length < 8 || !/[A-Z]/.test(password) || !/[\W_]/.test(password)) {
                alert('Your password does not meet the required criteria.');
                return false;
            }

            if (password !== confirmPassword) {
                alert('Passwords do not match.');
                return false;
            }

            // Ladeanimation anzeigen
            document.getElementById('reset-form').style.display = 'none';
            document.getElementById('loading').style.display = 'block';

            // AJAX-Anfrage zur Passwortzurücksetzung
            jQuery.post('<?php echo admin_url('admin-ajax.php'); ?>', {
                action: 'yprint_reset_password',
                login: login,
                key: key,
                password: password
            }, function(response) {
                document.getElementById('loading').style.display = 'none';
                if (response.success) {
                    document.getElementById('success-message').style.display = 'block';
                    setTimeout(function() {
                        window.location.href = 'https://yprint.de/login'; // Leitet zur Login-Seite weiter
                    }, 2000);
                } else {
                    alert(response.data.message);
                    document.getElementById('reset-form').style.display = 'block';
                }
            }).fail(function(xhr, status, error) {
                document.getElementById('loading').style.display = 'none';
                console.log('An error occurred:', xhr.responseText);
                alert('An error occurred: ' + xhr.responseText);
                document.getElementById('reset-form').style.display = 'block';
            });
        });
    </script>
    <?php
}
add_action('wp_footer', 'yprint_reset_password_script');

// --------------------------------------------------------------------------------------------------------------------------------------------------------------

function yprint_custom_registration_form() {
    ob_start();
    ?>

    <div class="yprint-register-container" style="width: 100%; max-width: 420px; margin: 0 auto; padding: 40px; background-color: #ffffff;">
        <div class="yprint-logo" style="display: flex; justify-content: center; align-items: center; margin-bottom: 40px;">
            <div style="width: 100%; max-width: 400px; height: 200px; background-image: url('https://yprint.de/wp-content/uploads/2024/08/yprint-icon.png'); background-size: contain; background-repeat: no-repeat; background-position: center;"></div>
        </div>
        <form method="post" id="register-form" style="text-align: center;">
            <div class="yprint-form-group" style="position: relative; margin-bottom: 20px;">
                <input type="text" name="user_login" id="user_login" class="input" placeholder="Username" required style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 30px; background-color: #F6F7FA; text-align: center;">
            </div>
            <div class="yprint-form-group" style="position: relative; margin-bottom: 20px;">
                <input type="email" name="user_email" id="user_email" class="input" placeholder="Email" required style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 30px; background-color: #F6F7FA; text-align: center;">
                <div id="email-validity" style="text-align: left; margin-top: 5px; color: gray; font-size: 12px;">
                    Email must be from a leading provider (e.g., gmail.com, yahoo.com).
                </div>
            </div>
            <div class="yprint-form-group" style="position: relative; margin-bottom: 20px;">
                <input type="password" name="user_password" id="user_password" class="input" placeholder="Password" required style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 30px; background-color: #F6F7FA; text-align: center;">
                <div id="password-hint" style="text-align: left; margin-top: 5px; color: gray; font-size: 12px;">
                    Password must be at least 8 characters long, include a capital letter, and a special character.
                </div>
            </div>
            <div class="yprint-form-group" style="position: relative; margin-bottom: 20px;">
                <input type="password" name="user_password_confirm" id="user_password_confirm" class="input" placeholder="Repeat Password" required style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 30px; background-color: #F6F7FA; text-align: center;">
                <div id="confirm-password-hint" style="text-align: left; margin-top: 5px; color: gray; font-size: 12px;">
                    Passwords must match.
                </div>
            </div>
            <div class="yprint-form-group" style="text-align: center; margin-bottom: 20px;">
                <input type="submit" name="wp-submit" value="Register" class="button button-primary" style="width: 100%; padding: 10px; background-color: #007aff; border: none; color: #fff; border-radius: 5px;">
            </div>
        </form>
    </div>

    <style>
        .yprint-register-container {
            width: 100%;
            max-width: 420px;
            margin: 0 auto;
            padding: 40px;
            background-color: #ffffff;
        }
    </style>

    <?php
    return ob_get_clean();
}
add_shortcode('yprint_registration_form', 'yprint_custom_registration_form');

// --------------------------------------------------------------------------------------------------------------------------------------------------------------
// Registrierungsbenutzer durch AJAX registrieren
function yprint_register_user_callback() {
    $username = sanitize_text_field($_POST['username']);
    $email = sanitize_email($_POST['email']);
    $password = $_POST['password'];

    // E-Mail-Validierung
    if (!is_email($email)) {
        wp_send_json_error(array('message' => 'Invalid email address.'));
    }

    // Überprüfen, ob der Benutzername oder die E-Mail schon existieren
    if (username_exists($username) || email_exists($email)) {
        wp_send_json_error(array('message' => 'Username or email already registered.'));
    }

    // Benutzer erstellen
    $user_id = wp_create_user($username, $password, $email);

    // Fehler bei der Benutzererstellung
    if (is_wp_error($user_id)) {
        wp_send_json_error(array('message' => $user_id->get_error_message()));
    } else {
        // Benutzer erfolgreich erstellt, Bestätigungsmail senden

        // Erzeuge einen Verifizierungscode
        $verification_code = md5(time() . $email);
        
        // Benutzer-Metadaten setzen
        update_user_meta($user_id, 'email_verification_code', $verification_code);
        update_user_meta($user_id, 'email_verified', false); // Standardmäßig ist die E-Mail noch nicht verifiziert

        // Bestätigungslink
        $verification_link = site_url("/verify-email?code=$verification_code");

        // E-Mail-Inhalt
        $subject = 'Please verify your email address';
        $message = "
        <!DOCTYPE html>
        <html lang='en'>
        <head>
            <meta charset='UTF-8'>
            <meta name='viewport' content='width=device-width, initial-scale=1.0'>
            <style>
                body { margin: 0; padding: 0; font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif; background-color: #f5f5f5; }
                .email-container { max-width: 600px; margin: 0 auto; background-color: #ffffff; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 40px; }
                .email-header { text-align: center; padding-bottom: 20px; }
                .email-header img { width: 100px; }
                .email-content h2 { color: #333; text-align: center; }
                .email-content p { color: #555; text-align: center; }
                .email-button { text-align: center; margin-top: 20px; }
                .email-button a { display: inline-block; background-color: #007aff; padding: 15px 30px; color: #ffffff; text-decoration: none; font-size: 16px; border-radius: 5px; }
                .email-footer { text-align: center; color: #999; font-size: 12px; margin-top: 20px; }
            </style>
        </head>
        <body>
            <div style='background-color: #f5f5f5; padding: 20px;'>
                <div class='email-container'>
                    <div class='email-header'>
                        <img src='https://yprint.de/wp-content/uploads/2024/08/yprint-icon.png' alt='YPrint Logo'>
                    </div>
                    <div class='email-content'>
                        <h2>Please verify your email address</h2>
                        <p>Hello " . esc_html($username) . ",</p>
                        <p>Thank you for registering with YPrint. To complete your registration, please verify your email address by clicking the button below.</p>
                    </div>
                    <div class='email-button'>
                        <a href='" . esc_url($verification_link) . "'>Verify Email</a>
                    </div>
                    <p class='email-footer'>If you did not create this account, please ignore this email.</p>
                </div>
            </div>
        </body>
        </html>";

        // E-Mail-Header
        $headers = array(
            'Content-Type: text/html; charset=UTF-8',
            'From: YPrint <no-reply@yprint.de>', // Achte darauf, dass dies eine gültige Absenderadresse ist
            'Reply-To: no-reply@yprint.de'
        );

        // Versenden der E-Mail
        if (wp_mail($email, $subject, $message, $headers)) {
            wp_send_json_success();
        } else {
            wp_send_json_error(array('message' => 'Failed to send the verification email.'));
        }
    }
}
add_action('wp_ajax_nopriv_yprint_register_user', 'yprint_register_user_callback');
add_action('wp_ajax_yprint_register_user', 'yprint_register_user_callback');


// --------------------------------------------------------------------------------------------------------------------------------------------------------------

function add_custom_shadow_styles() {
    ?>
    <style type="text/css">
        .content, .sidebar {
            /* Shadowing */
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            border-radius: 10px; /* Optional: fügt abgerundete Ecken hinzu */
            background-color: #ffffff; /* Optional: stellt sicher, dass der Hintergrund weiß ist */
            padding: 20px; /* Optional: fügt Innenabstand hinzu, um den Inhalt vom Rand abzusetzen */
        }
    </style>
    <?php
}
add_action('wp_head', 'add_custom_shadow_styles');

// --------------------------------------------------------------------------------------------------------------------------------------------------------------

function add_custom_only_theme_content_styles() {
    ?>
    <style type="text/css">
        .only_theme_content {
            /* Shadowing */
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            border-radius: 10px; /* Fügt abgerundete Ecken hinzu */
            background-color: #ffffff; /* Stellt sicher, dass der Hintergrund weiß ist */
            padding: 10px; /* Reduzierter Innenabstand, um den Inhalt vom Rand abzusetzen */
            margin-top: 10px; /* Geringerer Abstand von oben */
        }
    </style>
    <?php
}
add_action('wp_head', 'add_custom_only_theme_content_styles');

// --------------------------------------------------------------------------------------------------------------------------------------------------------------

function yprint_current_page_shortcode() {
    // Holen des Pfads nach der Domain
    $current_path = trim(parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH), '/');
    
    // Ausgabe des Pfads mit Stildefinitionen
    return '<div style="text-align: left; font-family: Roboto, sans-serif; font-size: 40px; font-weight: 600;">' . esc_html($current_path) . '</div>';
}
add_shortcode('current_page', 'yprint_current_page_shortcode');

// --------------------------------------------------------------------------------------------------------------------------------------------------------------

function add_safe_area_script() {
    ?>
    <script>
    document.addEventListener("DOMContentLoaded", function () {
        // Ziel-Element mit der Klasse "mobile_navigation"
        const mobileNav = document.querySelector(".mobile_navigation");
        if (mobileNav) {
            // Safe Area Inset berechnen
            const safeAreaInsetBottom = parseFloat(getComputedStyle(document.documentElement).getPropertyValue("--env(safe-area-inset-bottom)")) || 0;

            // Dynamische Anpassung der Navigation
            mobileNav.style.bottom = `${safeAreaInsetBottom}px`;
        }
    });
    </script>
    <?php
}
add_action('wp_footer', 'add_safe_area_script');

// --------------------------------------------------------------------------------------------------------------------------------------------------------------

function styled_page_title_shortcode() {
    $title = get_the_title(); // Holt den aktuellen Seitentitel
    return '<div style="font-family: \'Roboto\', sans-serif; font-size: 25pt; font-weight: 600;">' . esc_html($title) . '</div>';
}
add_shortcode('styled_page_title', 'styled_page_title_shortcode');

// --------------------------------------------------------------------------------------------------------------------------------------------------------------
function toggle_button_with_popup_shortcode() {
    ob_start();
    ?>
    <!-- Font Awesome Stylesheet -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    
    <a href="#footer_popup" class="footer-button" data-popup-trigger="#footer_popup">
        <i class="fas fa-angle-up"></i>
    </a>
    
    <style>
        /* Stile für den Button */
        .footer-button {
            position: relative;
            background-color: transparent !important; 
            border: none !important; 
            padding: 10px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            outline: none; 
            text-decoration: none; /* Entfernt Unterstreichung für den Link */
        }
        .footer-button:focus {
            outline: none; 
        }
        .footer-button i {
            font-size: 24px;
            color: #0079FF !important; 
            transition: transform 0.3s ease, color 0.3s ease;
        }
        .footer-button.active i {
            color: #0079FF !important;
        }
        .footer-button.active {
            transform: translateY(-80px); 
        }
    </style>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const button = document.querySelector('.footer-button');
            if (button) {
                button.addEventListener('click', function(e) {
                    const icon = this.querySelector('i');

                    // Toggle position and icon
                    this.classList.toggle('active');
                    if (icon.classList.contains('fa-angle-up')) {
                        icon.classList.remove('fa-angle-up');
                        icon.classList.add('fa-angle-down');
                    } else {
                        icon.classList.remove('fa-angle-down');
                        icon.classList.add('fa-angle-up');
                    }

                    // Verhindere den Standard-Click auf den Link, da der Popup-Trigger bereits durch das 'href' getriggert wird
                    e.preventDefault();
                });
            }
        });
    </script>
    <?php
    return ob_get_clean();
}
add_shortcode('toggle_button_popup', 'toggle_button_with_popup_shortcode');

// ---------------------------------WOOOOOOOOOOOOOOOOOOOOOOOOOORKED--------------------------------------------------
// Funktion für das Formular und die Bearbeitung der Benutzerdaten
function secret_data_settings() {
    ob_start();
    global $wpdb;
    $user_id = get_current_user_id(); // Aktuelle Benutzer-ID abrufen

    if ( $user_id === 0 ) {
        echo '<p>Bitte melden Sie sich an, um Ihre Kontoinformationen zu bearbeiten.</p>';
        return ob_get_clean();
    }

    // Benutzerinformationen abrufen
    $user_data = $wpdb->get_row(
        $wpdb->prepare(
            "SELECT user_login, user_email FROM deo6_users WHERE ID = %d",
            $user_id
        ),
        ARRAY_A
    );

    $user_login = isset( $user_data['user_login'] ) ? esc_attr( $user_data['user_login'] ) : '';
    $user_email = isset( $user_data['user_email'] ) ? esc_attr( $user_data['user_email'] ) : '';

    // Verarbeite das Formular, wenn es gesendet wird
    if ( $_SERVER['REQUEST_METHOD'] == 'POST' ) {
        // Holen der neuen Eingabedaten
        $new_user_login = sanitize_text_field( $_POST['user_login'] );
        $new_user_email = sanitize_email( $_POST['user_email'] );

        // Überprüfen, ob der Benutzername oder die E-Mail bereits existiert
        $login_exists = $wpdb->get_var( $wpdb->prepare( "SELECT COUNT(*) FROM deo6_users WHERE user_login = %s AND ID != %d", $new_user_login, $user_id ) );
        $email_exists = $wpdb->get_var( $wpdb->prepare( "SELECT COUNT(*) FROM deo6_users WHERE user_email = %s AND ID != %d", $new_user_email, $user_id ) );

        if ( $login_exists > 0 ) {
            echo '<p style="color: red;">Der Benutzername ist bereits vergeben. Bitte wählen Sie einen anderen.</p>';
        } elseif ( $email_exists > 0 ) {
            echo '<p style="color: red;">Die E-Mail-Adresse wird bereits von einem anderen Benutzer verwendet. Bitte wählen Sie eine andere E-Mail-Adresse.</p>';
        } else {
            // Wenn die E-Mail geändert wurde, Verifizierung-E-Mail versenden
            if ( $new_user_email !== $user_email ) {
                // Hier rufst du die vorhandene Funktion auf, um die Verifizierungs-E-Mail zu versenden
                yprint_handle_resend_verification_email();
                echo '<p>Die E-Mail-Adresse wurde erfolgreich geändert. Eine Bestätigung wurde an die neue Adresse gesendet.</p>';
            }

            // Benutzerinformationen aktualisieren
            $wpdb->update(
                'deo6_users',
                array(
                    'user_login' => $new_user_login,
                    'user_email' => $new_user_email
                ),
                array( 'ID' => $user_id ),
                array( '%s', '%s' ),
                array( '%d' )
            );
            echo '<p>Ihre Daten wurden erfolgreich gespeichert.</p>';
        }
    }

    ?>
    <style>
        /* Formular Styling */
        #custom-account-form {
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 500px;
            margin: 20px auto;
        }

        #custom-account-form input {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #D2D2D7;
            border-radius: 5px;
            font-size: 1rem;
            background-color: #FFF;
        }

        #custom-account-form button {
            background-color: transparent;
            color: #2997FF;
            padding: 10px 20px;
            border: 1px solid #2997FF;
            border-radius: 5px;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        #custom-account-form button:hover {
            background-color: #2997FF;
            color: #FFF;
        }

        #custom-account-form a {
            margin-top: 15px;
            text-decoration: none;
            color: #2997FF;
        }
    </style>
    <form id="custom-account-form" method="POST">
        <input type="text" name="user_login" placeholder="Benutzername" value="<?php echo $user_login; ?>" required />
        <input type="email" name="user_email" placeholder="E-Mail-Adresse" value="<?php echo $user_email; ?>" required />
        <button type="submit">Speichern</button>
        <a href="https://yprint.de/recover-account/" target="_blank">Passwort ändern</a>
    </form>
    <?php
    return ob_get_clean();
}

// Shortcode registrieren
function register_secret_data_settings_shortcode() {
    add_shortcode( 'secret_data_settings', 'secret_data_settings' );
}
add_action( 'init', 'register_secret_data_settings_shortcode' );

// -----------------------------------------------------------------------------------------------------------------
// SVG-Dateien für den Upload zulassen
add_filter('upload_mimes', function($mimes) {
    $mimes['svg'] = 'image/svg+xml'; // Erlaubt SVG-Dateien
    return $mimes;
}); 

// SVG-Größe begrenzen: maximal 50x100px
function custom_svg_max_size() {
    echo '';
} 
add_action('wp_head', 'custom_svg_max_size');

// Erweiterte SVG-Validierung und Bereinigung
function custom_svg_sanitization($file) {
    // Nur für SVG-Dateien
    if ($file['type'] === 'image/svg+xml') {
        $svg_content = file_get_contents($file['tmp_name']);
        
        // Potenzielle Sicherheitsrisiken entfernen
        $sanitized_svg = preg_replace('/<script[\s\S]*?<\/script>/i', '', $svg_content);
        $sanitized_svg = preg_replace('/<\?xml-stylesheet[\s\S]*?\?>/i', '', $sanitized_svg);
        
        // Gefährliche Attribute und Skript-Aufrufe entfernen
        $sanitized_svg = preg_replace('/(onload|onerror|onclick)="[^"]*"/i', '', $sanitized_svg);
        $sanitized_svg = preg_replace('/<(script|iframe|object|embed)[\s\S]*?<\/(script|iframe|object|embed)>/i', '', $sanitized_svg);
        
        // Externe Ressourcen blockieren
        $sanitized_svg = preg_replace('/xlink:href=["\'](http|https):\/\//i', 'xlink:href="data:image/svg+xml;base64,', $sanitized_svg);
        
        // Bereinigtes SVG zurückschreiben
        file_put_contents($file['tmp_name'], $sanitized_svg);
    }
    
    return $file;
}
add_filter('wp_handle_upload_prefilter', 'custom_svg_sanitization');

// SVG-Größe begrenzen und weitere Sicherheitsüberprüfungen
function custom_svg_size_and_security() {
    // Maximale Größenbeschränkung mit CSS
    echo '<style>
        svg {
            max-width: 50px;
            max-height: 100px;
            width: auto;
            height: auto;
        }
    </style>';
}
add_action('wp_head', 'custom_svg_size_and_security');

// Zusätzliche Sicherheitsüberprüfung beim Rendering
function custom_svg_renderer($svg_path) {
    // SVG-Inhalt vor dem Rendern nochmals überprüfen
    $svg_content = file_get_contents($svg_path);
    
    // Strikte Validierung
    $allowed_tags = ['svg', 'path', 'rect', 'circle', 'ellipse', 'line', 'polyline', 'polygon', 'g'];
    $allowed_attributes = ['width', 'height', 'viewBox', 'fill', 'stroke', 'stroke-width', 'transform', 'clip-path'];
    
    // Komplexere Bereinigungsfunktion
    $sanitized_svg = preg_replace_callback('/<(\w+)[^>]*>/', function($matches) use ($allowed_tags, $allowed_attributes) {
        $tag = $matches[1];
        if (!in_array(strtolower($tag), $allowed_tags)) {
            return ''; // Unerlaubte Tags entfernen
        }
        
        // Attribute filtern
        preg_match_all('/(\w+)=("[^"]*"|\'[^\']*\')/', $matches[0], $attr_matches);
        $filtered_attrs = [];
        
        foreach ($attr_matches[1] as $index => $attr) {
            if (in_array(strtolower($attr), $allowed_attributes)) {
                $filtered_attrs[] = $attr_matches[0][$index];
            }
        }
        
        return '<' . $tag . ' ' . implode(' ', $filtered_attrs) . '>';
    }, $svg_content);
    
    return $sanitized_svg;
}

// -----------------------------------------------------------------------------------------------------------------

// Shortcode für den Produkt-Slider erstellen
function product_slider_shortcode() {
    ob_start();

    // Abfrage der WooCommerce-Produkte
    $args = array(
        'post_type' => 'product',
        'posts_per_page' => -1, // Alle Produkte abrufen
        'post_status' => 'publish'
    );

    $query = new WP_Query($args);

    if ($query->have_posts()) : ?>
        <div class="product-slider">
            <?php while ($query->have_posts()) : $query->the_post(); ?>
                <div class="product-item">
                    <a href="<?php the_permalink(); ?>">
                        <?php
                        // Produktbild
                        if (has_post_thumbnail()) {
                            the_post_thumbnail('medium', ['class' => 'product-image']);
                        } else {
                            echo '<img src="https://via.placeholder.com/200" alt="Produktbild">';
                        }
                        ?>
                        <h3><?php the_title(); ?></h3>
                        <p class="price">
                            <?php
                            global $product;
                            echo $product->get_price_html(); // Preis anzeigen
                            ?>
                        </p>
                        <button class="add-to-cart" data-product-id="<?php echo get_the_ID(); ?>">In den Warenkorb</button>
                    </a>
                </div>
            <?php endwhile; ?>
        </div>
    <?php else : ?>
        <p>Keine Produkte gefunden.</p>
    <?php endif;
    wp_reset_postdata();

    return ob_get_clean();
}
add_shortcode('product_slider', 'product_slider_shortcode');

// AJAX für das Hinzufügen von Produkten zum Warenkorb
function add_product_to_cart() {
    if (!isset($_POST['product_id'])) {
        wp_send_json_error();
    }

    $product_id = intval($_POST['product_id']);
    $product = wc_get_product($product_id);

    if ($product && $product->is_in_stock()) {
        WC()->cart->add_to_cart($product_id);
        wp_send_json_success();
    } else {
        wp_send_json_error();
    }

    wp_die();
}
add_action('wp_ajax_add_to_cart', 'add_product_to_cart');
add_action('wp_ajax_nopriv_add_to_cart', 'add_product_to_cart');

// CSS für den Produkt-Slider (wird in das Theme geladen)
function product_slider_styles() {
    ?>
    <style>
        /* Slider Container */
        .product-slider {
            display: flex;
            overflow-x: auto;
            gap: 20px;
            padding: 20px 0;
            margin: 0 auto;
            max-width: 1200px;
            scroll-snap-type: x mandatory;
            -webkit-overflow-scrolling: touch;
        }

        .product-item {
            flex-shrink: 0;
            width: 200px;
            background-color: #fff;
            border-radius: 15px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 15px;
            text-align: center;
            transition: transform 0.3s ease;
        }

        .product-item:hover {
            transform: scale(1.05);
        }

        .product-item img.product-image {
            width: 100%;
            border-radius: 10px;
            margin-bottom: 10px;
        }

        .product-item h3 {
            font-size: 18px;
            color: #333;
            margin: 10px 0;
        }

        .product-item .price {
            font-size: 16px;
            color: #0079FF;
            margin-bottom: 15px;
        }

        .add-to-cart {
            background-color: #0079FF;
            color: white;
            padding: 10px;
            border: none;
            border-radius: 10px;
            font-size: 14px;
            cursor: pointer;
            width: 100%;
        }

        .add-to-cart:hover {
            background-color: #0056b3;
        }

        .add-to-cart:focus {
            outline: none;
        }

        /* Scrollbar für den Slider */
        .product-slider::-webkit-scrollbar {
            height: 8px;
        }

        .product-slider::-webkit-scrollbar-thumb {
            background: #0079FF;
            border-radius: 10px;
        }

        .product-slider::-webkit-scrollbar-track {
            background: #e0e0e0;
        }
    </style>
    <?php
}
add_action('wp_head', 'product_slider_styles');

// JavaScript für das Hinzufügen von Produkten zum Warenkorb
function product_slider_scripts() {
    ?>
    <script>
        document.querySelectorAll('.add-to-cart').forEach(button => {
            button.addEventListener('click', function(e) {
                e.preventDefault();
                const productId = this.getAttribute('data-product-id');
                
                // AJAX-Anfrage zum Hinzufügen des Produkts zum Warenkorb
                const data = {
                    action: 'add_to_cart',
                    product_id: productId
                };

                jQuery.post('/wp-admin/admin-ajax.php', data, function(response) {
                    if(response.success) {
                        alert('Produkt wurde zum Warenkorb hinzugefügt!');
                    } else {
                        alert('Fehler beim Hinzufügen zum Warenkorb.');
                    }
                });
            });
        });
    </script>
    <?php
}
add_action('wp_footer', 'product_slider_scripts');

// -----------------------------------------------------------------------------------------------------------------

function restrict_checkout_for_non_admins() {
    // Überprüfen, ob die Seite die Checkout-Seite ist
    if (is_checkout() && !current_user_can('administrator')) {
        // Umleitung für Nicht-Admins auf eine andere Seite (z.B. die Startseite)
        wp_redirect(home_url()); // Oder eine benutzerdefinierte URL, z.B. /maintenance
        exit;
    }
}
add_action('template_redirect', 'restrict_checkout_for_non_admins');

function prevent_direct_access_to_checkout() {
    if (is_checkout() && !is_user_logged_in()) {
        wp_redirect(home_url()); // Oder eine benutzerdefinierte Seite für Gäste
        exit;
    }
}
add_action('template_redirect', 'prevent_direct_access_to_checkout');

function restrict_access_for_guests() {
    // Überprüft, ob der Benutzer eingeloggt ist und ob es sich um eine der freigegebenen Seiten handelt
    if (!is_user_logged_in() && !is_front_page() && 
        !is_page(array('login', 'register', 'verify-email', 'recover-account', 'reset-password'))) {
        // Umleitung auf die Homepage, falls der Benutzer nicht eingeloggt ist und nicht auf einer der freigegebenen Seiten ist
        wp_redirect(home_url()); 
        exit;
    }
}
add_action('template_redirect', 'restrict_access_for_guests');

// -----------------------------------------------------------------------------------------------------------------

function woo_order_history($atts) {
    extract(shortcode_atts(array(
        'order_count' => -1
    ), $atts));

    ob_start();
    $customer_id = get_current_user_id();
    
    $all_statuses = array_keys(wc_get_order_statuses());
    
    $customer_orders = wc_get_orders(array(
        'customer' => $customer_id,
        'limit'    => $order_count,
        'type'     => 'shop_order',
        'status'   => $all_statuses,
    ));
    
    ?>
    <style>
        .yprint-order-history {
            font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
        }

        .yprint-order-content {
            width: 100%;
        }

        .yprint-order-search {
            width: 100%;
            padding: 12px 35px 12px 15px;
            background-color: #FFFFFF;
            border: 1px solid #EEEEEE;
            border-radius: 30px;
            margin-bottom: 25px;
            font-size: 16px;
            transition: all 0.2s ease;
            color: #333;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 24 24' fill='none' stroke='%23999' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Ccircle cx='11' cy='11' r='8'%3E%3C/circle%3E%3Cline x1='21' y1='21' x2='16.65' y2='16.65'%3E%3C/line%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right 12px center;
        }

        .yprint-order-search:focus {
            outline: none;
            border-color: #0079FF;
            box-shadow: none;
        }

        .yprint-order-list {
            display: grid;
            gap: 15px;
        }

        .yprint-order-card {
            padding: 15px 0;
            display: grid;
            grid-template-columns: auto 1fr auto;
            gap: 20px;
            align-items: center;
            border-bottom: 1px solid #f0f0f0;
        }

        .yprint-order-number {
            font-weight: 600;
            color: #333;
        }

        .yprint-order-meta {
            color: #888;
            font-size: 14px;
        }

        .yprint-order-details {
            display: grid;
            gap: 8px;
        }

        .yprint-order-price {
            font-weight: 600;
            color: #333;
        }

        .yprint-order-status {
            display: inline-block;
            font-weight: 500;
            font-size: 13px;
            padding: 4px 10px;
            border-radius: 20px;
            background-color: #e8f5fd;
            color: #0079FF;
        }

        .yprint-order-actions {
            display: flex;
            gap: 10px;
        }

        .yprint-order-btn {
            padding: 8px 15px;
            border-radius: 20px;
            text-decoration: none;
            text-align: center;
            font-weight: 500;
            font-size: 14px;
            border: none;
            cursor: pointer;
            transition: all 0.2s;
        }

        .yprint-btn-support {
            background-color: #f5f5f7;
            color: #333;
        }

        .yprint-btn-support:hover {
            background-color: #e5e5e7;
        }

        .yprint-btn-cancel {
            background-color: #ffeaee;
            color: #ff3b50;
        }

        .yprint-btn-cancel:hover {
            background-color: #ffe0e5;
        }

        .yprint-no-orders {
            text-align: center;
            padding: 40px 0;
            color: #888;
            font-size: 16px;
        }

        @media (max-width: 768px) {
            .yprint-checkout-columns {
                flex-direction: column;
            }
            
            .yprint-checkout-container {
                padding: 15px;
                min-height: auto;
            }
            
            .yprint-checkout-section {
                margin-bottom: 20px;
                padding-bottom: 15px;
            }
            
            .yprint-section-title {
                font-size: 20px;
                margin-bottom: 15px;
            }
            
            .yprint-payment-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 10px;
        }
            
            .yprint-form-row {
                flex-direction: column;
                gap: 10px;
            }
            
            .yprint-form-row input,
            .yprint-form-row select {
                width: 100%;
            }
            
            .yprint-back-button-container {
                margin-bottom: 15px;
            }
        }

        @media (max-width: 480px) {
            .yprint-address-slot {
                min-width: 100%;
            }
            
            .yprint-payment-grid {
                grid-template-columns: 1fr;
            }
            
            .yprint-order-item {
                flex-wrap: wrap;
            }
            
            .yprint-item-image {
                width: 50px;
                height: 50px;
            }
            
            .yprint-item-details {
                flex: 0 0 calc(100% - 60px);
            }
            
            .yprint-item-total {
                margin-top: 8px;
                margin-left: auto;
            }
        }
    </style>

    <div class="yprint-order-history">
        <div class="yprint-order-content">
            <input 
                type="text" 
                id="orderSearch" 
                class="yprint-order-search" 
                placeholder="Bestellung suchen..."
            >

            <?php if (!empty($customer_orders)) : ?>
                <div class="yprint-order-list" id="orderList">
                    <?php foreach ($customer_orders as $order): 
                        $order_data = $order->get_data();
                        $order_date = date_i18n('d.m.Y', strtotime($order_data['date_created']));
                        $order_time = date_i18n('H:i', strtotime($order_data['date_created']));
                        $price = wc_price($order_data['total']);
                        $status = $order->get_status();
                    ?>
                    <div class="yprint-order-card" data-order-id="<?php echo $order->get_id(); ?>">
                        <div>
                            <div class="yprint-order-number">
                                Bestellung #<?php echo $order->get_order_number(); ?>
                            </div>
                            <div class="yprint-order-meta">
                                <?php echo $order_date; ?> | <?php echo $order_time; ?>
                            </div>
                        </div>

                        <div class="yprint-order-details">
                            <div class="yprint-order-price"><?php echo $price; ?></div>
                            <div class="yprint-order-status">
                                <?php echo wc_get_order_status_name($status); ?>
                            </div>
                        </div>

                        <div class="yprint-order-actions">
                            <a href="mailto:info@yprint.de?subject=Support-Anfrage für Bestellung <?php echo $order->get_order_number(); ?>" 
                               class="yprint-order-btn yprint-btn-support">
                                Support
                            </a>

                            <?php if (in_array($status, array('pending', 'processing', 'on-hold'))): ?>
                                <button 
                                    class="yprint-order-btn yprint-btn-cancel" 
                                    onclick="cancelOrder(<?php echo $order->get_id(); ?>)">
                                    Stornieren
                                </button>
                            <?php endif; ?>
                        </div>
                    </div>
                    <?php endforeach; ?>
                </div>
            <?php else : ?>
                <div class="yprint-no-orders">
                    Du hast noch keine Bestellungen.
                </div>
            <?php endif; ?>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('orderSearch');
        const orderList = document.getElementById('orderList');

        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            const orderCards = orderList.querySelectorAll('.yprint-order-card');

            orderCards.forEach(card => {
                const orderText = card.textContent.toLowerCase();
                card.style.display = orderText.includes(searchTerm) ? 'grid' : 'none';
            });
        });
    });

    function cancelOrder(orderId) {
        if (confirm('Möchtest du diese Bestellung wirklich stornieren?')) {
            jQuery.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'yprint_cancel_order',
                    order_id: orderId,
                    security: '<?php echo wp_create_nonce('yprint-order-cancel'); ?>'
                },
                success: function(response) {
                    if (response.success) {
                        alert('Bestellung wurde erfolgreich storniert.');
                        location.reload();
                    } else {
                        alert('Fehler beim Stornieren der Bestellung: ' + response.data);
                    }
                },
                error: function() {
                    alert('Es ist ein Fehler aufgetreten. Bitte versuche es später erneut.');
                }
            });
        }
    }
    </script>
    <?php
    return ob_get_clean();
}
add_shortcode('woocommerce_history', 'woo_order_history');

function yprint_cancel_order() {
    check_ajax_referer('yprint-order-cancel', 'security');
    
    $order_id = isset($_POST['order_id']) ? intval($_POST['order_id']) : 0;
    $user_id = get_current_user_id();
    
    if (!$order_id) {
        wp_send_json_error('Keine Bestellnummer angegeben');
        return;
    }
    
    $order = wc_get_order($order_id);
    
    // Prüfen, ob die Bestellung dem aktuellen Benutzer gehört
    if ($order->get_customer_id() !== $user_id) {
        wp_send_json_error('Du bist nicht berechtigt, diese Bestellung zu stornieren');
        return;
    }
    
    // Nur bestimmte Status erlauben (pending, processing, on-hold)
    $cancellable_statuses = array('pending', 'processing', 'on-hold');
    if (!in_array($order->get_status(), $cancellable_statuses)) {
        wp_send_json_error('Diese Bestellung kann nicht mehr storniert werden');
        return;
    }
    
    // Bestellung auf 'cancelled' setzen
    $order->update_status('cancelled', 'Bestellung vom Kunden storniert');
    
    // Optional: Produktbestand zurückbuchen
    foreach ($order->get_items() as $item_id => $item) {
        $product = $item->get_product();
        if ($product && $product->managing_stock()) {
            $item_quantity = $item->get_quantity();
            $product->increase_stock($item_quantity);
        }
    }
    
    wp_send_json_success('Bestellung erfolgreich storniert');
}
add_action('wp_ajax_yprint_cancel_order', 'yprint_cancel_order');
add_action('wp_ajax_nopriv_yprint_cancel_order', 'yprint_cancel_order');

// -----------------------------------------------------------------------------------------------------------------

function billing_settings() {
    ob_start();
    
    // Aktuelle Benutzerdaten abrufen
    $user_id = get_current_user_id();
    $message = '';
    $message_type = '';
    
    // WooCommerce Billing Felder abrufen
    $billing_first_name = get_user_meta($user_id, 'billing_first_name', true);
    $billing_last_name = get_user_meta($user_id, 'billing_last_name', true);
    $billing_company = get_user_meta($user_id, 'billing_company', true);
    $billing_vat = get_user_meta($user_id, 'billing_vat', true);
    $billing_address_1 = get_user_meta($user_id, 'billing_address_1', true);
    $billing_address_2 = get_user_meta($user_id, 'billing_address_2', true);
    $billing_postcode = get_user_meta($user_id, 'billing_postcode', true);
    $billing_city = get_user_meta($user_id, 'billing_city', true);
    $billing_country = get_user_meta($user_id, 'billing_country', true);
    $alt_billing_email = get_user_meta($user_id, 'alt_billing_email', true);
    $is_company = get_user_meta($user_id, 'is_company', true);

    // Formular-Verarbeitung
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        $updated = false;
        $email_changed = false;
        
        // Standardfelder aktualisieren
        $fields_to_update = [
            'billing_first_name' => isset($_POST['billing_first_name']) ? sanitize_text_field($_POST['billing_first_name']) : '',
            'billing_last_name' => isset($_POST['billing_last_name']) ? sanitize_text_field($_POST['billing_last_name']) : '',
            'billing_address_1' => isset($_POST['billing_address_1']) ? sanitize_text_field($_POST['billing_address_1']) : '',
            'billing_address_2' => isset($_POST['billing_address_2']) ? sanitize_text_field($_POST['billing_address_2']) : '',
            'billing_postcode' => isset($_POST['billing_postcode']) ? sanitize_text_field($_POST['billing_postcode']) : '',
            'billing_city' => isset($_POST['billing_city']) ? sanitize_text_field($_POST['billing_city']) : '',
            'billing_country' => isset($_POST['billing_country']) ? sanitize_text_field($_POST['billing_country']) : '',
        ];

        // Unternehmensdaten aktualisieren
        $is_company = isset($_POST['is_company']);
        update_user_meta($user_id, 'is_company', $is_company);
        
        if ($is_company) {
            $fields_to_update['billing_company'] = isset($_POST['billing_company']) ? sanitize_text_field($_POST['billing_company']) : '';
            $fields_to_update['billing_vat'] = isset($_POST['billing_vat']) ? sanitize_text_field($_POST['billing_vat']) : '';
        }

        // Alternative Rechnungs-E-Mail
        if (isset($_POST['alt_billing_email']) && !empty($_POST['alt_billing_email'])) {
            $new_billing_email = sanitize_email($_POST['alt_billing_email']);
            $old_billing_email = get_user_meta($user_id, 'alt_billing_email', true);
            
            if ($new_billing_email !== $old_billing_email) {
                // Verifizierungs-Token generieren
                $verification_token = wp_generate_password(32, false);
                update_user_meta($user_id, 'billing_email_verification_token', $verification_token);
                
                // E-Mail an neue Rechnungs-E-Mail senden
                $verification_link = add_query_arg(
                    array(
                        'action' => 'reject_billing_email',
                        'token' => $verification_token,
                        'user_id' => $user_id
                    ),
                    home_url()
                );
                
                $user = get_userdata($user_id);
                $message_content = sprintf(
                    'Hallo,<br><br>
                    Die E-Mail-Adresse %s wurde als Empfänger für Rechnungen von %s bei YPrint eingetragen.<br><br>
                    Falls Sie diese Änderung nicht veranlasst haben oder nicht möchten, klicken Sie bitte hier:<br>
                    <a href="%s" style="display: inline-block; padding: 10px 20px; background-color: #2997FF; color: white; text-decoration: none; border-radius: 5px;">Diese Einstellung ablehnen</a><br><br>
                    Mit freundlichen Grüßen<br>
                    Ihr YPrint Team',
                    $new_billing_email,
                    $user->display_name,
                    esc_url($verification_link)
                );

                $headers = array('Content-Type: text/html; charset=UTF-8');
                wp_mail($new_billing_email, 'Bestätigung: Rechnungsempfänger bei YPrint', $message_content, $headers);
                
                update_user_meta($user_id, 'alt_billing_email', $new_billing_email);
                update_user_meta($user_id, 'billing_email', $new_billing_email);
                $email_changed = true;
            }
        } elseif (!isset($_POST['different_billing_email'])) {
            // Wenn die Checkbox nicht ausgewählt ist, alternative E-Mail entfernen
            delete_user_meta($user_id, 'alt_billing_email');
            $user = get_userdata($user_id);
            update_user_meta($user_id, 'billing_email', $user->user_email);
        }

        // WooCommerce Metadaten aktualisieren
        foreach ($fields_to_update as $key => $value) {
            update_user_meta($user_id, $key, $value);
        }
        
        $updated = true;
        $message = 'Ihre Daten wurden erfolgreich gespeichert.';
        $message_type = 'success';
    }
	
	?>
    <style>
        #billing-form {
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 500px;
            margin: 20px auto;
        }

        #billing-form .form-group {
            width: 100%;
            margin-bottom: 20px;
        }

        #billing-form input:not([type="checkbox"]), 
        #billing-form select {
            width: 100%;
            padding: 10px;
            border: 1px solid #D2D2D7;
            border-radius: 5px;
            font-size: 1rem;
            background-color: #FFF;
        }

        #billing-form button {
            background-color: transparent;
            color: #2997FF;
            padding: 10px 20px;
            border: 1px solid #2997FF;
            border-radius: 5px;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.3s;
            margin-top: 10px;
        }

        #billing-form button:hover {
            background-color: #2997FF;
            color: #FFF;
        }

        .checkbox-group {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            color: #2997FF;
        }

        .checkbox-group input[type="checkbox"] {
            margin-right: 10px;
        }

        .conditional-fields {
            display: none;
            margin-top: 15px;
        }

        .message {
            padding: 15px;
            margin-bottom: 15px;
            border-radius: 5px;
            width: 100%;
            text-align: center;
        }

        .message.success {
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }

        .message.error {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }

        /* Overlay Styles */
        .email-change-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            z-index: 9999;
            justify-content: center;
            align-items: center;
        }

        .overlay-content {
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            text-align: center;
            max-width: 400px;
            width: 90%;
        }
    </style>

    <!-- Feedback Message -->
    <?php if ($message): ?>
    <div class="message <?php echo $message_type; ?>">
        <?php echo $message; ?>
    </div>
    <?php endif; ?>

    <!-- Email Change Overlay -->
    <div id="emailChangeOverlay" class="email-change-overlay">
        <div class="overlay-content">
            <h3 style="margin-bottom: 15px;">Rechnungs-E-Mail wurde geändert</h3>
            <p style="margin-top: 15px;">Eine Bestätigungs-E-Mail wurde an die neue Adresse gesendet.</p>
        </div>
    </div>

    <form id="billing-form" method="POST">
        <!-- Standardfelder -->
        <div class="form-group">
            <input type="text" name="billing_first_name" placeholder="Vorname" 
                   value="<?php echo esc_attr($billing_first_name); ?>" required />
        </div>
        
        <div class="form-group">
            <input type="text" name="billing_last_name" placeholder="Nachname" 
                   value="<?php echo esc_attr($billing_last_name); ?>" required />
        </div>

        <div class="form-group">
            <input type="text" name="billing_address_1" placeholder="Straße und Hausnummer" 
                   value="<?php echo esc_attr($billing_address_1); ?>" required />
        </div>

        <div class="form-group">
            <input type="text" name="billing_address_2" placeholder="Zusätzliche Adressinfo (optional)" 
                   value="<?php echo esc_attr($billing_address_2); ?>" />
        </div>

        <div class="form-group">
            <input type="text" name="billing_postcode" placeholder="PLZ" 
                   value="<?php echo esc_attr($billing_postcode); ?>" required />
        </div>

        <div class="form-group">
            <input type="text" name="billing_city" placeholder="Stadt" 
                   value="<?php echo esc_attr($billing_city); ?>" required />
        </div>

        <div class="form-group">
            <select name="billing_country" required>
                <?php
                $countries_obj = new WC_Countries();
                $countries = $countries_obj->get_countries();
                foreach ($countries as $code => $name) {
                    $selected = ($billing_country === $code) ? 'selected' : '';
                    echo '<option value="' . esc_attr($code) . '" ' . $selected . '>' . esc_html($name) . '</option>';
                }
                ?>
            </select>
        </div>

        <!-- Unternehmensdetails -->
        <div class="checkbox-group">
            <input type="checkbox" id="is_company" name="is_company" <?php checked($is_company, true); ?> />
            <label for="is_company">Ich bin Unternehmer</label>
        </div>

        <div id="company_fields" class="conditional-fields" <?php echo $is_company ? 'style="display: block;"' : ''; ?>>
            <div class="form-group">
                <input type="text" name="billing_company" placeholder="Unternehmensname" 
                       value="<?php echo esc_attr($billing_company); ?>" />
            </div>
            <div class="form-group">
                <input type="text" name="billing_vat" placeholder="USt.-ID" 
                       value="<?php echo esc_attr($billing_vat); ?>" />
            </div>
        </div>

        <!-- Alternative Rechnungs-E-Mail -->
        <div class="checkbox-group">
            <input type="checkbox" id="different_billing_email" name="different_billing_email" 
                   <?php checked(!empty($alt_billing_email), true); ?> />
            <label for="different_billing_email">Abweichende E-Mail für Rechnungen</label>
        </div>

        <div id="different_billing_email_field" class="conditional-fields" 
             <?php echo !empty($alt_billing_email) ? 'style="display: block;"' : ''; ?>>
            <div class="form-group">
                <input type="email" name="alt_billing_email" placeholder="E-Mail für Rechnungen" 
                       value="<?php echo esc_attr($alt_billing_email); ?>" />
            </div>
        </div>

        <button type="submit">Speichern</button>
    </form>

    <script>
    jQuery(document).ready(function($) {
        // Unternehmerfeld Toggle
        $('#is_company').change(function() {
            $('#company_fields').toggle(this.checked);
        });

        // Alternative Rechnungs-E-Mail Toggle
        $('#different_billing_email').change(function() {
            $('#different_billing_email_field').toggle(this.checked);
            if (!this.checked) {
                $('input[name="alt_billing_email"]').val('');
            }
        });

        <?php if ($email_changed): ?>
        // Overlay anzeigen
        $('#emailChangeOverlay').css('display', 'flex');
        
        // Nach 3 Sekunden ausblenden
        setTimeout(function() {
            $('#emailChangeOverlay').fadeOut();
        }, 3000);
        <?php endif; ?>

        // Erfolgsbenachrichtigung nach 3 Sekunden ausblenden
        setTimeout(function() {
            $('.message').fadeOut();
        }, 3000);
    });
    </script>

    <?php
    return ob_get_clean();
}

add_shortcode('billing_settings', 'billing_settings');

// Funktion zum Verarbeiten der E-Mail-Ablehnung
function handle_billing_email_rejection() {
    if (isset($_GET['action']) && $_GET['action'] === 'reject_billing_email' && 
        isset($_GET['token']) && isset($_GET['user_id'])) {
        
        $user_id = intval($_GET['user_id']);
        $token = sanitize_text_field($_GET['token']);
        $stored_token = get_user_meta($user_id, 'billing_email_verification_token', true);
        
        if ($token === $stored_token) {
            // Token löschen
            delete_user_meta($user_id, 'billing_email_verification_token');
            
            // Betroffener Benutzer
            $user = get_userdata($user_id);
            $rejected_email = get_user_meta($user_id, 'alt_billing_email', true);
            
            // Ursprüngliche Benutzer-E-Mail wiederherstellen
            update_user_meta($user_id, 'billing_email', $user->user_email);
            delete_user_meta($user_id, 'alt_billing_email');
            
            // Benachrichtigung an max@yprint.de senden
            $admin_message = sprintf(
                'Hallo,<br><br>
                Eine Rechnungs-E-Mail-Änderung wurde abgelehnt:<br><br>
                Benutzer: %s (ID: %d)<br>
                Abgelehnte E-Mail: %s<br>
                Ursprüngliche E-Mail: %s<br><br>
                Bitte prüfen Sie den Fall.',
                $user->display_name,
                $user_id,
                $rejected_email,
                $user->user_email
            );
            
            $headers = array('Content-Type: text/html; charset=UTF-8');
            wp_mail('max@yprint.de', 'Rechnungs-E-Mail-Änderung abgelehnt', $admin_message, $headers);
            
            // Benutzer auf eine Bestätigungsseite weiterleiten
            wp_safe_redirect(home_url('/email-ablehnung-bestaetigt/'));
            exit;
        }
    }
}

// Hook für E-Mail-Ablehnung registrieren
add_action('init', 'handle_billing_email_rejection');

// Hook für E-Mail-Ablehnung in WooCommerce Bestellungen
function update_order_billing_email($order_id) {
    $order = wc_get_order($order_id);
    if (!$order) return;
    
    $user_id = $order->get_user_id();
    if (!$user_id) return;
    
    $alt_billing_email = get_user_meta($user_id, 'alt_billing_email', true);
    if (!empty($alt_billing_email)) {
        $order->set_billing_email($alt_billing_email);
        $order->save();
    }
}
add_action('woocommerce_checkout_update_order_meta', 'update_order_billing_email');

// -----------------------------------------------------------------------------------------------------------------

function shipping_settings() {
    ob_start();
    
    // Aktuelle Benutzerdaten abrufen
    $user_id = get_current_user_id();
    $message = '';
    $message_type = '';
    
    // WooCommerce Shipping Felder abrufen
    $shipping_company = get_user_meta($user_id, 'shipping_company', true);
    $shipping_address_1 = get_user_meta($user_id, 'shipping_address_1', true);
    $shipping_postcode = get_user_meta($user_id, 'shipping_postcode', true);
    $shipping_city = get_user_meta($user_id, 'shipping_city', true);
    $shipping_country = get_user_meta($user_id, 'shipping_country', true);
    $is_company_shipping = get_user_meta($user_id, 'is_company_shipping', true);

    // Formular-Verarbeitung
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        // Standardfelder aktualisieren
        $fields_to_update = [
            'shipping_address_1' => isset($_POST['shipping_address_1']) ? sanitize_text_field($_POST['shipping_address_1']) : '',
            'shipping_postcode' => isset($_POST['shipping_postcode']) ? sanitize_text_field($_POST['shipping_postcode']) : '',
            'shipping_city' => isset($_POST['shipping_city']) ? sanitize_text_field($_POST['shipping_city']) : '',
            'shipping_country' => isset($_POST['shipping_country']) ? sanitize_text_field($_POST['shipping_country']) : '',
        ];

        // Unternehmensdaten aktualisieren
        $is_company_shipping = isset($_POST['is_company_shipping']);
        update_user_meta($user_id, 'is_company_shipping', $is_company_shipping);
        
        if ($is_company_shipping) {
            $fields_to_update['shipping_company'] = isset($_POST['shipping_company']) ? sanitize_text_field($_POST['shipping_company']) : '';
        }

        // WooCommerce Metadaten aktualisieren
        foreach ($fields_to_update as $key => $value) {
            update_user_meta($user_id, $key, $value);
        }
        
        $message = 'Ihre Lieferadresse wurde erfolgreich gespeichert.';
        $message_type = 'success';
    }
    ?>

    <style>
        #shipping-form {
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 500px;
            margin: 20px auto;
        }

        #shipping-form .form-group {
            width: 100%;
            margin-bottom: 20px;
            position: relative;
        }

        #shipping-form input:not([type="checkbox"]), 
        #shipping-form select {
            width: 100%;
            padding: 10px;
            border: 1px solid #D2D2D7;
            border-radius: 5px;
            font-size: 1rem;
            background-color: #FFF;
        }

        #shipping-form button {
            background-color: transparent;
            color: #2997FF;
            padding: 10px 20px;
            border: 1px solid #2997FF;
            border-radius: 5px;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.3s;
            margin-top: 10px;
        }

        #shipping-form button:hover {
            background-color: #2997FF;
            color: #FFF;
        }

        .checkbox-group {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            color: #2997FF;
        }

        .checkbox-group input[type="checkbox"] {
            margin-right: 10px;
        }

        .conditional-fields {
            display: none;
            margin-top: 15px;
        }

        .message {
            padding: 15px;
            margin-bottom: 15px;
            border-radius: 5px;
            width: 100%;
            text-align: center;
        }

        .message.success {
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }

        .info-message {
            background-color: #e7f3fe;
            border: 1px solid #cce5ff;
            color: #004085;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
            width: 100%;
            text-align: center;
            font-size: 0.9rem;
            line-height: 1.4;
        }

        .address-suggestions {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: 1px solid #D2D2D7;
            border-radius: 5px;
            z-index: 1000;
            max-height: 200px;
            overflow-y: auto;
            display: none;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .address-suggestion {
            padding: 12px;
            cursor: pointer;
            border-bottom: 1px solid #f0f0f0;
            display: flex;
            flex-direction: column;
        }

        .address-suggestion:last-child {
            border-bottom: none;
        }

        .address-suggestion:hover {
            background-color: #f8f9fa;
        }

        .suggestion-main {
            font-weight: 500;
            margin-bottom: 2px;
        }

        .suggestion-secondary {
            font-size: 0.85rem;
            color: #666;
        }

        .loader {
            border: 2px solid #f3f3f3;
            border-radius: 50%;
            border-top: 2px solid #2997FF;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
            margin: 10px auto;
            display: none;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .error-message {
            color: #721c24;
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            padding: 10px;
            border-radius: 5px;
            margin-top: 5px;
            font-size: 0.9rem;
            display: none;
        }
    </style>

<!-- Feedback Message -->
    <?php if ($message): ?>
    <div class="message <?php echo $message_type; ?>">
        <?php echo $message; ?>
    </div>
    <?php endif; ?>

    <!-- Info Message -->
    <div class="info-message">
        Hier können Sie Ihre Standard-Lieferadresse hinterlegen. Im Bestellprozess haben Sie weiterhin die Möglichkeit, 
        eine abweichende Lieferadresse anzugeben.
    </div>

    <form id="shipping-form" method="POST">
        <!-- Unternehmensdetails -->
        <div class="checkbox-group">
            <input type="checkbox" id="is_company_shipping" name="is_company_shipping" 
                   <?php checked($is_company_shipping, true); ?> />
            <label for="is_company_shipping">Lieferung an Firma</label>
        </div>

        <div id="company_fields" class="conditional-fields" 
             <?php echo $is_company_shipping ? 'style="display: block;"' : ''; ?>>
            <div class="form-group">
                <input type="text" name="shipping_company" placeholder="Firmenname" 
                       value="<?php echo esc_attr($shipping_company); ?>" />
            </div>
        </div>

        <!-- Adresssuche und Standardfelder -->
        <div class="form-group">
            <input type="text" id="address_search" placeholder="Adresse suchen..." />
            <div class="loader" id="address_loader"></div>
            <div id="address_error" class="error-message"></div>
            <div id="address_suggestions" class="address-suggestions"></div>
        </div>

        <div class="form-group">
            <input type="text" name="shipping_address_1" id="shipping_address_1" 
                   placeholder="Straße und Hausnummer" 
                   value="<?php echo esc_attr($shipping_address_1); ?>" required />
        </div>

        <div class="form-group">
            <input type="text" name="shipping_postcode" id="shipping_postcode" 
                   placeholder="PLZ" value="<?php echo esc_attr($shipping_postcode); ?>" required />
        </div>

        <div class="form-group">
            <input type="text" name="shipping_city" id="shipping_city" 
                   placeholder="Stadt" value="<?php echo esc_attr($shipping_city); ?>" required />
        </div>

        <div class="form-group">
            <select name="shipping_country" id="shipping_country" required>
                <?php
                $countries_obj = new WC_Countries();
                $countries = $countries_obj->get_countries();
                foreach ($countries as $code => $name) {
                    $selected = ($shipping_country === $code) ? 'selected' : '';
                    echo '<option value="' . esc_attr($code) . '" ' . $selected . '>' . esc_html($name) . '</option>';
                }
                ?>
            </select>
        </div>

        <button type="submit">Speichern</button>
    </form>

    <script>
    jQuery(document).ready(function($) {
        // HERE API Initialisierung
        const API_KEY = 'xPlTGXIrjg1O6Oea3e2gvo5lrN-iO1gT47Sc-VojWdU';
        const APP_ID = 'hbvuII26xI3nJHR9TPWx';

        // Firmenfeld Toggle
        $('#is_company_shipping').change(function() {
            $('#company_fields').slideToggle(300);
            if (!this.checked) {
                $('input[name="shipping_company"]').val('');
            }
        });

        // Erfolgsbenachrichtigung nach 3 Sekunden ausblenden
        setTimeout(function() {
            $('.message').fadeOut();
        }, 3000);

        // Adresssuche
        let searchTimeout;
        $('#address_search').on('input', function() {
            clearTimeout(searchTimeout);
            const query = $(this).val();
            
            $('#address_error').hide();
            $('#address_loader').hide();
            
            if (query.length < 3) {
                $('#address_suggestions').hide();
                return;
            }

            $('#address_loader').show();

            searchTimeout = setTimeout(function() {
                $.ajax({
                    url: 'https://geocode.search.hereapi.com/v1/geocode',
                    data: {
                        q: query,
                        apiKey: API_KEY,
                        limit: 5,
                        lang: 'de',
                        in: 'countryCode:DEU,AUT'
                    },
                    type: 'GET',
                    success: function(data) {
                        $('#address_loader').hide();
                        const $suggestions = $('#address_suggestions');
                        $suggestions.empty();

                        if (data && data.items && data.items.length > 0) {
                            data.items.forEach(function(item) {
                                const address = item.address;
                                
                                // Hauptadresszeile
                                const mainLine = [
                                    address.street,
                                    address.houseNumber,
                                    address.postalCode,
                                    address.city
                                ].filter(Boolean).join(' ');

                                // Zusätzliche Informationen
                                const secondaryLine = [
                                    address.district,
                                    address.state,
                                    address.countryName
                                ].filter(Boolean).join(', ');

                                const $suggestion = $('<div>').addClass('address-suggestion')
                                    .append($('<div>').addClass('suggestion-main').text(mainLine))
                                    .append($('<div>').addClass('suggestion-secondary').text(secondaryLine))
                                    .data('address', address);

// Im click-Handler der Adressvorschläge den Ländercode-Teil anpassen:

$suggestion.on('click', function() {
    const address = $(this).data('address');
    
    // Straße und Hausnummer
    const street = address.street || '';
    const houseNumber = address.houseNumber || '';
    $('#shipping_address_1').val(
        street + (houseNumber ? ' ' + houseNumber : '')
    );
    
    // PLZ
    $('#shipping_postcode').val(address.postalCode || '');
    
    // Stadt
    $('#shipping_city').val(address.city || '');
    
    // Land - Angepasst für WooCommerce Länderformat
    if (address.countryCode) {
        // HERE API liefert Ländercodes in Kleinbuchstaben (de, at),
        // WooCommerce erwartet sie in Großbuchstaben (DE, AT)
        const countryCode = address.countryCode.toUpperCase();
        $('#shipping_country').val(countryCode);
        
        // Falls der Ländercode nicht direkt gefunden wird, Konsolen-Ausgabe zur Fehlersuche
        if (!$('#shipping_country option[value="' + countryCode + '"]').length) {
            console.log('Ländercode nicht gefunden:', countryCode);
        }
    }

    $suggestions.hide();
    $('#address_search').val('');
});

                                $suggestions.append($suggestion);
                            });

                            $suggestions.show();
                        } else {
                            showError('Keine Adressen gefunden.');
                        }
                    },
                    error: function(xhr, status, error) {
                        $('#address_loader').hide();
                        console.error('Fehler bei der Adresssuche:', error);
                        
                        let errorMessage = 'Ein Fehler ist bei der Adresssuche aufgetreten.';
                        if (xhr.status === 401) {
                            errorMessage = 'Authentifizierungsfehler bei der Adresssuche.';
                        } else if (xhr.status === 429) {
                            errorMessage = 'Zu viele Anfragen. Bitte versuchen Sie es später erneut.';
                        }
                        
                        showError(errorMessage);
                    }
                });
            }, 500);
        });

        function showError(message) {
            const $error = $('#address_error');
            $error.text(message).show();
            $('#address_suggestions').hide();
        }

        // Klick außerhalb schließt Vorschläge und Fehlermeldungen
        $(document).on('click', function(e) {
            if (!$(e.target).closest('#address_search, #address_suggestions').length) {
                $('#address_suggestions').hide();
                $('#address_error').hide();
            }
        });
    });
    </script>

    <?php
    return ob_get_clean();
}
add_shortcode('shipping_settings', 'shipping_settings');

// -----------------------------------------------------------------------------------------------------------------



// -----------------------------------------------------------------------------------------------------------------


// -----------------------------------------------------------------------------------------------------------------

/**
 * Custom Shipping Address Shortcode
 * Zeigt ein Formular zur Auswahl und Verwaltung von Lieferadressen an
 */
function custom_shipping_address_shortcode() {
    if (!function_exists('WC')) {
        return 'WooCommerce ist nicht aktiviert.';
    }

    $user_id = get_current_user_id();
    
    // Primäre Adresse abrufen
    $customer = new WC_Customer($user_id);
    $primary_address = [
        'first_name' => $customer->get_shipping_first_name(),
        'last_name' => $customer->get_shipping_last_name(),
        'address_1' => $customer->get_shipping_address_1(),
        'address_2' => $customer->get_shipping_address_2(),
        'postcode' => $customer->get_shipping_postcode(),
        'city' => $customer->get_shipping_city(),
        'country' => $customer->get_shipping_country()
    ];

    // Zusätzliche Adressen abrufen
    $secondary_addresses = get_user_meta($user_id, 'additional_shipping_addresses', true) ?: [];
    
    // Aktuelle ausgewählte Adresse
    $current_slot = WC()->session->get('selected_shipping_slot') ?: 'primary';

    ob_start();
    ?>
    <div class="custom-shipping-address">
        <div class="address-selector">
            <h3>Lieferadresse</h3>
            <div class="address-slots">
                <!-- Primäre Adresse -->
                <div class="address-slot <?php echo ($current_slot === 'primary') ? 'active' : ''; ?>" 
                     data-slot="primary">
                    <span class="slot-title">Meine Lieferanschrift</span>
                    <?php if (!empty($primary_address['address_1'])): ?>
                    <span class="slot-preview">
                        <?php 
                        $preview_address = $primary_address['address_1'];
                        if (!empty($primary_address['address_2'])) {
                            $preview_address .= ' ' . $primary_address['address_2'];
                        }
                        $preview_address .= ', ' . $primary_address['postcode'] . ' ' . $primary_address['city'];
                        echo esc_html($preview_address); 
                        ?>
                    </span>
                    <?php endif; ?>
                </div>

                <!-- Zusätzliche Adressen -->
                <?php foreach ($secondary_addresses as $index => $address): ?>
                    <div class="address-slot <?php echo ($current_slot === 'secondary_' . $index) ? 'active' : ''; ?>" 
                         data-slot="secondary_<?php echo $index; ?>">
                        <span class="slot-title">Lieferanschrift <?php echo ($index + 2); ?></span>
                        <?php if (!empty($address['address_1'])): ?>
                        <span class="slot-preview">
                            <?php 
                            $preview_address = $address['address_1'];
                            if (!empty($address['address_2'])) {
                                $preview_address .= ' ' . $address['address_2'];
                            }
                            $preview_address .= ', ' . $address['postcode'] . ' ' . $address['city'];
                            echo esc_html($preview_address);
                            ?>
                        </span>
                        <?php endif; ?>
                    </div>
                <?php endforeach; ?>

                <!-- Neue Adresse Button -->
                <?php if (count($secondary_addresses) < 2): ?>
                    <div class="address-slot new-slot" data-slot="new">
                        <span class="slot-title">+ Neue Lieferanschrift</span>
                    </div>
                <?php endif; ?>
            </div>
        </div>

        <div class="checkout-form-section">
            <input type="hidden" name="current_address_slot" id="current_address_slot" value="<?php echo esc_attr($current_slot); ?>">
            
            <!-- Adresssuche-Feld -->
            <div class="form-group address-search-group">
                <input type="text" 
                       id="address_search" 
                       placeholder="Adresse suchen..." 
                       class="address-search" />
                <div class="loader" id="address_loader"></div>
                <div id="address_suggestions" class="address-suggestions"></div>
                <div id="address_error" class="error-message"></div>
            </div>
            
            <div class="form-row">
                <input type="text" 
                       name="shipping_first_name" 
                       class="shipping-field"
                       placeholder="Vorname"
                       value="<?php echo esc_attr($primary_address['first_name']); ?>"
                       required>
                
                <input type="text" 
                       name="shipping_last_name" 
                       class="shipping-field"
                       placeholder="Name"
                       value="<?php echo esc_attr($primary_address['last_name']); ?>"
                       required>
            </div>

            <div class="form-row">
                <input type="text" 
                       name="shipping_address_1" 
                       id="shipping_address_1"
                       class="shipping-field"
                       placeholder="Straße"
                       value="<?php echo esc_attr($primary_address['address_1']); ?>"
                       required>
                
                <input type="text" 
                       name="shipping_address_2" 
                       id="shipping_address_2"
                       class="shipping-field"
                       placeholder="Hausnummer"
                       value="<?php echo esc_attr($primary_address['address_2']); ?>"
                       required>
            </div>

            <div class="form-row">
                <input type="text" 
                       name="shipping_postcode" 
                       id="shipping_postcode"
                       class="shipping-field"
                       placeholder="PLZ"
                       value="<?php echo esc_attr($primary_address['postcode']); ?>"
                       required>
                
                <input type="text" 
                       name="shipping_city" 
                       id="shipping_city"
                       class="shipping-field"
                       placeholder="Ort"
                       value="<?php echo esc_attr($primary_address['city']); ?>"
                       required>
            </div>

            <div class="form-row">
                <select name="shipping_country" id="shipping_country" class="shipping-field" required>
                    <?php
                    $countries_obj = new WC_Countries();
                    $countries = $countries_obj->get_shipping_countries();
                    $default_country = $primary_address['country'] ?: $countries_obj->get_base_country();
                    
                    foreach ($countries as $code => $name) {
                        echo '<option value="' . esc_attr($code) . '" ' . 
                             selected($default_country, $code, false) . '>' . 
                             esc_html($name) . '</option>';
                    }
                    ?>
                </select>
            </div>
        </div>
    </div>
    
    <style>
    .custom-shipping-address {
        width: 100%;
        font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
    }

    .address-selector {
        margin-bottom: 30px;
    }

    .address-selector h3 {
        font-size: 20px;
        margin-bottom: 16px;
        color: #1d1d1f;
        font-weight: 600;
        text-transform: uppercase;
    }

    .address-slots {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
    }

    .address-slot {
        padding: 16px;
        border: 1px solid #d2d2d7;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.2s ease;
        background: white;
        flex: 1;
        min-width: 200px;
        display: flex;
        flex-direction: column;
    }

    .slot-title {
        font-weight: 500;
        margin-bottom: 4px;
        color: #1d1d1f;
    }

    .slot-preview {
        font-size: 0.9em;
        color: #6e6e73;
    }

    .address-slot:hover {
        border-color: #0079FF;
    }

    .address-slot.active {
        border-color: #0079FF;
        background: #f5f5f7;
    }

    .new-slot {
        border-style: dashed;
        color: #0079FF;
        justify-content: center;
        align-items: center;
    }

    .checkout-form-section {
        display: flex;
        flex-direction: column;
        gap: 16px;
    }

    .form-row {
        display: flex;
        gap: 12px;
    }

    .form-row input,
    .form-row select,
    .address-search {
        flex: 1;
        padding: 12px;
        border: 1px solid #d2d2d7;
        border-radius: 8px;
        font-size: 0.95rem;
        background-color: #FFF;
        transition: border-color 0.2s ease;
    }

    .form-row input:focus,
    .form-row select:focus,
    .address-search:focus {
        border-color: #0079FF;
        outline: none;
        box-shadow: 0 0 0 2px rgba(0, 121, 255, 0.1);
    }

    .form-row input.error,
    .address-search.error {
        border-color: #ff3b30;
    }

    .address-search-group {
        position: relative;
        margin-bottom: 8px;
    }

    .loader {
        border: 2px solid #f3f3f3;
        border-radius: 50%;
        border-top: 2px solid #0079FF;
        width: 16px;
        height: 16px;
        animation: spin 1s linear infinite;
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        display: none;
    }

    @keyframes spin {
        0% { transform: translateY(-50%) rotate(0deg); }
        100% { transform: translateY(-50%) rotate(360deg); }
    }

    .address-suggestions {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #d2d2d7;
        border-radius: 8px;
        z-index: 1000;
        max-height: 250px;
        overflow-y: auto;
        display: none;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        margin-top: 4px;
    }

    .address-suggestion {
        padding: 12px 16px;
        cursor: pointer;
        border-bottom: 1px solid #f5f5f7;
    }

    .address-suggestion:last-child {
        border-bottom: none;
    }

    .address-suggestion:hover {
        background-color: #f5f5f7;
    }

    .suggestion-main {
        font-weight: 500;
        margin-bottom: 4px;
        color: #1d1d1f;
    }

    .suggestion-secondary {
        font-size: 0.85rem;
        color: #6e6e73;
    }

    .error-message {
        color: #ff3b30;
        background-color: rgba(255, 59, 48, 0.1);
        border-radius: 8px;
        padding: 8px 12px;
        margin-top: 4px;
        font-size: 0.9rem;
        display: none;
    }

    @media (max-width: 600px) {
        .form-row {
            flex-direction: column;
        }
        
        .form-row input,
        .form-row select {
            width: 100%;
        }

        .address-slot {
            min-width: 100%;
        }
    }
    </style>

    <script>
    jQuery(document).ready(function($) {
        // HERE API Schlüssel
        const API_KEY = 'xPlTGXIrjg1O6Oea3e2gvo5lrN-iO1gT47Sc-VojWdU';
        
        const primaryAddress = <?php echo json_encode($primary_address); ?>;
        const secondaryAddresses = <?php echo json_encode($secondary_addresses); ?>;
        let currentSlot = '<?php echo esc_js($current_slot); ?>';

        // Adressdaten laden
        function loadAddressData(slot) {
            let addressData;
            
            if (slot === 'primary') {
                addressData = primaryAddress;
            } else if (slot === 'new') {
                // Leere Felder für neue Adresse
                $('.shipping-field').val('');
                return;
            } else {
                const index = slot.replace('secondary_', '');
                addressData = secondaryAddresses[index] || {};
            }

            // Felder füllen
            Object.entries(addressData).forEach(([key, value]) => {
                $(`[name="shipping_${key}"]`).val(value);
            });

            // CheckoutSystem aktualisieren
            if (typeof CheckoutSystem !== 'undefined') {
                CheckoutSystem.updateState('shippingAddress', {
                    slot: slot,
                    address: addressData
                });
            }
        }

        // Initiale Adresse laden
        loadAddressData(currentSlot);

        // Adress-Slot Auswahl
        $('.address-slot').click(function() {
            const slot = $(this).data('slot');
            
            $('.address-slot').removeClass('active');
            $(this).addClass('active');
            
            currentSlot = slot;
            $('#current_address_slot').val(slot);
            
            loadAddressData(slot);

            // Session aktualisieren
            $.ajax({
                url: wc_checkout_params.ajax_url,
                type: 'POST',
                data: {
                    action: 'update_shipping_slot',
                    slot: slot,
                    security: wc_checkout_params.update_order_review_nonce
                }
            });
        });

        // Feldänderungen
        $('.shipping-field').on('change input', function() {
            const field = $(this).attr('name').replace('shipping_', '');
            const value = $(this).val();

            // CheckoutSystem aktualisieren
            if (typeof CheckoutSystem !== 'undefined') {
                CheckoutSystem.updateState('shippingAddress', {
                    slot: currentSlot,
                    field: field,
                    value: value
                });
            }

            // Automatisches Speichern
            saveAddress();
        });

        // Adresse speichern
        function saveAddress() {
            const addressData = {};
            $('.shipping-field').each(function() {
                const field = $(this).attr('name').replace('shipping_', '');
                addressData[field] = $(this).val();
            });

            $.ajax({
                url: wc_checkout_params.ajax_url,
                type: 'POST',
                data: {
                    action: 'save_shipping_address',
                    slot: currentSlot,
                    address: addressData,
                    security: wc_checkout_params.update_order_review_nonce
                },
                success: function(response) {
                    if (response.success) {
                        // Adressvorschau aktualisieren
                        updateAddressPreview(currentSlot, addressData);
                    }
                }
            });
        }

        // Adressvorschau aktualisieren
        function updateAddressPreview(slot, address) {
            const $slot = $(`.address-slot[data-slot="${slot}"]`);
            
            let streetHouseNumber = address.address_1;
            if (address.address_2) {
                streetHouseNumber += ' ' + address.address_2;
            }
            
            const preview = `${streetHouseNumber}, ${address.postcode} ${address.city}`;
            
            let $preview = $slot.find('.slot-preview');
            if (!$preview.length) {
                $preview = $('<span class="slot-preview"></span>').appendTo($slot);
            }
            $preview.text(preview);
        }
        
        // Adresssuche
        let searchTimeout;
        $('#address_search').on('input', function() {
            clearTimeout(searchTimeout);
            const query = $(this).val();
            
            $('#address_error').hide();
            $('#address_loader').hide();
            
            if (query.length < 3) {
                $('#address_suggestions').hide();
                return;
            }

            $('#address_loader').show();

            searchTimeout = setTimeout(function() {
                $.ajax({
                    url: 'https://geocode.search.hereapi.com/v1/geocode',
                    data: {
                        q: query,
                        apiKey: API_KEY,
                        limit: 5,
                        lang: 'de',
                        in: 'countryCode:DEU,AUT,CHE'
                    },
                    type: 'GET',
                    success: function(data) {
                        $('#address_loader').hide();
                        const $suggestions = $('#address_suggestions');
                        $suggestions.empty();

                        if (data && data.items && data.items.length > 0) {
                            data.items.forEach(function(item) {
                                const address = item.address;
                                
                                // Hauptadresszeile
                                const mainLine = [
                                    address.street,
                                    address.houseNumber,
                                    address.postalCode,
                                    address.city
                                ].filter(Boolean).join(' ');

                                // Zusätzliche Informationen
                                const secondaryLine = [
                                    address.district,
                                    address.state,
                                    address.countryName
                                ].filter(Boolean).join(', ');

                                const $suggestion = $('<div>').addClass('address-suggestion')
                                    .append($('<div>').addClass('suggestion-main').text(mainLine))
                                    .append($('<div>').addClass('suggestion-secondary').text(secondaryLine))
                                    .data('address', address);

                                $suggestion.on('click', function() {
                                    const address = $(this).data('address');
                                    
                                    // Wichtige Änderung: Straße und Hausnummer werden getrennt
                                    // Straße ins address_1-Feld
                                    $('#shipping_address_1').val(address.street || '');
                                    
                                    // Hausnummer ins address_2-Feld
                                    $('#shipping_address_2').val(address.houseNumber || '');
                                    
                                    // PLZ und Stadt
                                    $('#shipping_postcode').val(address.postalCode || '');
                                    $('#shipping_city').val(address.city || '');
                                    
                                    // Land - Großbuchstaben für WooCommerce
                                    if (address.countryCode) {
                                        const countryCode = address.countryCode.toUpperCase();
                                        $('#shipping_country').val(countryCode);
                                    }

                                    // Alle Felder als geändert markieren und speichern
                                    $('.shipping-field').trigger('change');
                                    
                                    // UI-Aktualisierung
                                    $suggestions.hide();
                                    $('#address_search').val('');
                                });

                                $suggestions.append($suggestion);
                            });

                            $suggestions.show();
                        } else {
                            showError('Keine Adressen gefunden.');
                        }
                    },
                    error: function(xhr, status, error) {
                        $('#address_loader').hide();
                        console.error('Fehler bei der Adresssuche:', error);
                        
                        let errorMessage = 'Ein Fehler ist bei der Adresssuche aufgetreten.';
                        if (xhr.status === 401) {
                            errorMessage = 'Authentifizierungsfehler bei der Adresssuche.';
                        } else if (xhr.status === 429) {
                            errorMessage = 'Zu viele Anfragen. Bitte versuchen Sie es später erneut.';
                        }
                        
                        showError(errorMessage);
                    }
                });
            }, 500);
        });

        function showError(message) {
            const $error = $('#address_error');
            $error.text(message).show();
            $('#address_suggestions').hide();
        }

        // Klick außerhalb schließt Vorschläge
        $(document).on('click', function(e) {
            if (!$(e.target).closest('#address_search, #address_suggestions').length) {
                $('#address_suggestions').hide();
                $('#address_error').hide();
            }
        });

        // Auf State-Updates reagieren wenn CheckoutSystem verfügbar
        $(document).on('checkoutStateUpdate', function(e, state) {
            if (state && state.shippingAddress) {
                // Aktualisiere nur, wenn es sich um den aktuellen Slot handelt
                if (state.shippingAddress.slot === currentSlot) {
                    // Bei Feldupdates
                    if (state.shippingAddress.field && state.shippingAddress.value) {
                        $(`[name="shipping_${state.shippingAddress.field}"]`).val(state.shippingAddress.value);
                    }
                    // Bei kompletter Adressaktualisierung
                    else if (state.shippingAddress.address) {
                        Object.entries(state.shippingAddress.address).forEach(([field, value]) => {
                            $(`[name="shipping_${field}"]`).val(value);
                        });
                    }
                }
            }
        });
    });
    </script>
    <?php
    
    return ob_get_clean();
}
add_shortcode('custom_shipping_address', 'custom_shipping_address_shortcode');

// AJAX Handler für Slot-Updates
function update_shipping_slot() {
    if (!isset($_POST['security']) || !wp_verify_nonce($_POST['security'], 'woocommerce-process_checkout')) {
        wp_send_json_error(['message' => 'Sicherheitsüberprüfung fehlgeschlagen.']);
        exit;
    }
    
    if (isset($_POST['slot'])) {
        $slot = sanitize_text_field($_POST['slot']);
        WC()->session->set('selected_shipping_slot', $slot);
        wp_send_json_success(['message' => 'Slot erfolgreich aktualisiert.']);
    } else {
        wp_send_json_error(['message' => 'Slot nicht angegeben.']);
    }
}
add_action('wp_ajax_update_shipping_slot', 'update_shipping_slot');
add_action('wp_ajax_nopriv_update_shipping_slot', 'update_shipping_slot');

// AJAX Handler für Adress-Speicherung
function save_shipping_address() {
    if (!isset($_POST['security']) || !wp_verify_nonce($_POST['security'], 'woocommerce-process_checkout')) {
        wp_send_json_error(['message' => 'Sicherheitsüberprüfung fehlgeschlagen.']);
        exit;
    }
    
    $user_id = get_current_user_id();
    
    if (!isset($_POST['slot']) || !isset($_POST['address']) || !is_array($_POST['address'])) {
        wp_send_json_error(['message' => 'Ungültige Parameter.']);
        return;
    }
    
    $slot = sanitize_text_field($_POST['slot']);
    $address = array_map('sanitize_text_field', $_POST['address']);
    
    if ($slot === 'primary') {
        // Primäre Adresse aktualisieren
        foreach ($address as $key => $value) {
            update_user_meta($user_id, "shipping_{$key}", $value);
        }
    } else {
        // Zusätzliche Adresse speichern
        $secondary_addresses = get_user_meta($user_id, 'additional_shipping_addresses', true) ?: [];
        $index = intval(str_replace('secondary_', '', $slot));
        $secondary_addresses[$index] = $address;
        update_user_meta($user_id, 'additional_shipping_addresses', $secondary_addresses);
    }
    
    wp_send_json_success(['message' => 'Adresse erfolgreich gespeichert.']);
}
add_action('wp_ajax_save_shipping_address', 'save_shipping_address');
add_action('wp_ajax_nopriv_save_shipping_address', 'save_shipping_address');

// -----------------------------------------------------------------------------------------------------------------

function checkout_communication_shortcode() {
    ob_start();
    ?>
    <script>
    // Checkout Communication System
    const CheckoutSystem = {
        // Zentraler Datenspeicher
        state: {
            shippingAddress: {},
            billingAddress: {},
            differentBilling: {},
            differentBillingAddress: {},
            paymentMethod: {},
            couponCode: {}
        },

        // Event-Handler Registrierung
        init: function() {
            this.initializeState();
            this.setupEventListeners();
            console.log('CheckoutSystem initialized');
        },

        // Initialer State aus WooCommerce
        initializeState: function() {
            const user_id = '<?php echo get_current_user_id(); ?>';
            
            // AJAX-Aufruf um initiale Daten zu laden
            jQuery.ajax({
                url: wc_checkout_params.ajax_url,
                type: 'POST',
                data: {
                    action: 'get_checkout_initial_state',
                    user_id: user_id
                },
                success: (response) => {
                    if (response.success) {
                        this.state = {...this.state, ...response.data};
                        this.updateAllFields();
                        this.notifyStateChange();
                        console.log('State initialized', this.state);
                    }
                }
            });
        },

        // Event Listener Setup
        setupEventListeners: function() {
            const $ = jQuery;
            
            // Shipping Address Events
            $(document).on('change', '.shipping-field', (e) => {
                const field = e.target.name.replace('shipping_', '');
                const value = e.target.value;
                this.updateState('shippingAddress', {
                    field: field,
                    value: value
                });
            });

            // Billing Address Events (falls verwendet)
            $(document).on('change', '.billing-field', (e) => {
                const field = e.target.name;
                const value = e.target.value;
                this.updateState('billingAddress', {
                    field: field,
                    value: value
                });
            });

            // Different Billing Events
            $(document).on('change', '#different_billing', (e) => {
                this.updateState('differentBilling', {
                    enabled: e.target.checked
                });
            });

            // Payment Method Events
            $(document).on('change', '[name="payment_method"]', (e) => {
                this.updateState('paymentMethod', {
                    method: e.target.value,
                    timestamp: Date.now()
                });
            });

            // Coupon Events
            $(document).on('change', '#coupon_code', (e) => {
                this.updateState('couponCode', {
                    code: e.target.value
                });
            });
        },

        // State Updates
        updateState: function(section, data) {
            if (!this.state[section]) {
                this.state[section] = {};
            }
            
            // Aktualisiere den jeweiligen Abschnitt im State
            this.state[section] = {
                ...this.state[section],
                ...data
            };
            
            console.log(`State updated: ${section}`, data);
            this.saveState();
            this.notifyStateChange();
        },

        // Speichern des States
        saveState: function() {
            jQuery.ajax({
                url: wc_checkout_params.ajax_url,
                type: 'POST',
                data: {
                    action: 'save_checkout_state',
                    state: this.state
                },
                success: (response) => {
                    if (response.success) {
                        console.log('State saved successfully');
                    }
                }
            });
        },

        // Benachrichtigung über State-Änderungen
        notifyStateChange: function() {
            jQuery(document).trigger('checkoutStateUpdate', [this.state]);
        },// Formularvalidierung
        validateForm: function() {
            let isValid = true;
            const errors = [];
            
            // Validiere Lieferadresse
            if (!this.validateShippingAddress()) {
                isValid = false;
                errors.push('Bitte geben Sie eine vollständige Lieferadresse an');
            }
            
            // Validiere Zahlungsmethode
            if (!this.validatePaymentMethod()) {
                isValid = false;
                errors.push('Bitte wählen Sie eine Zahlungsmethode aus');
            }
            
            // Validiere abweichende Rechnungsadresse falls aktiviert
            if (this.state.differentBilling && this.state.differentBilling.enabled) {
                if (!this.validateBillingAddress()) {
                    isValid = false;
                    errors.push('Bitte geben Sie eine vollständige Rechnungsadresse an');
                }
            }
            
            return {
                isValid: isValid,
                errors: errors
            };
        },

        // Validiere Lieferadresse
        validateShippingAddress: function() {
            const required = ['first_name', 'last_name', 'address_1', 'address_2', 'postcode', 'city', 'country'];
            
            if (!this.state.shippingAddress) return false;
            
            if (this.state.shippingAddress.slot && this.state.shippingAddress.address) {
                // Falls komplette Adresse im State
                return required.every(field => 
                    this.state.shippingAddress.address[field] && 
                    this.state.shippingAddress.address[field].trim() !== ''
                );
            } else {
                // Falls einzelne Felder
                return required.every(field => 
                    this.state.shippingAddress[field] && 
                    this.state.shippingAddress[field].trim() !== ''
                );
            }
        },

        // Validiere Rechnungsadresse
        validateBillingAddress: function() {
            const required = ['first_name', 'last_name', 'email', 'address_1', 'address_2', 'postcode', 'city', 'country'];
            
            if (!this.state.differentBillingAddress) return false;
            
            return required.every(field => {
                const fieldName = 'different_billing_' + field;
                return this.state.differentBillingAddress[fieldName] && 
                       this.state.differentBillingAddress[fieldName].trim() !== '';
            });
        },

        // Validiere Zahlungsmethode
        validatePaymentMethod: function() {
            return this.state.paymentMethod && 
                   this.state.paymentMethod.method && 
                   this.state.paymentMethod.method.trim() !== '';
        },

        // State abrufen
        getState: function() {
            return this.state;
        },

        // Formulardaten sammeln
        getFormData: function() {
            return {
                shipping_address: this.getShippingAddressData(),
                billing_address: this.getBillingAddressData(),
                different_billing: this.state.differentBilling ? this.state.differentBilling.enabled : false,
                different_billing_address: this.state.differentBillingAddress,
                payment_method: this.state.paymentMethod ? this.state.paymentMethod.method : '',
                coupon_code: this.state.couponCode ? this.state.couponCode.code : ''
            };
        },

        // Lieferadressdaten abrufen
        getShippingAddressData: function() {
            if (this.state.shippingAddress.slot && this.state.shippingAddress.address) {
                return this.state.shippingAddress.address;
            } else {
                const shippingData = {};
                Object.keys(this.state.shippingAddress).forEach(key => {
                    if (key !== 'slot' && key !== 'field' && key !== 'value') {
                        shippingData[key] = this.state.shippingAddress[key];
                    }
                });
                return shippingData;
            }
        },

        // Rechnungsadressdaten abrufen
        getBillingAddressData: function() {
            // Wenn keine abweichende Rechnungsadresse, Lieferadresse verwenden
            if (!this.state.differentBilling || !this.state.differentBilling.enabled) {
                return this.getShippingAddressData();
            }
            
            const billingData = {};
            Object.keys(this.state.differentBillingAddress).forEach(key => {
                // Konvertiere different_billing_* zu normalem Feld
                const newKey = key.replace('different_billing_', '');
                billingData[newKey] = this.state.differentBillingAddress[key];
            });
            
            return billingData;
        },

        // Alle Felder aktualisieren
        updateAllFields: function() {
            const $ = jQuery;
            
            // Shipping Address Felder
            if (this.state.shippingAddress) {
                // Bei Adressobjekt
                if (this.state.shippingAddress.address) {
                    Object.entries(this.state.shippingAddress.address).forEach(([field, value]) => {
                        $(`[name="shipping_${field}"]`).val(value);
                    });
                }
                // Bei Einzelfeldern
                else {
                    Object.entries(this.state.shippingAddress).forEach(([field, value]) => {
                        if (field !== 'slot' && field !== 'field' && field !== 'value') {
                            $(`[name="shipping_${field}"]`).val(value);
                        }
                    });
                }
            }

            // Different Billing Checkbox
            if (this.state.differentBilling && this.state.differentBilling.enabled !== undefined) {
                $('#different_billing').prop('checked', this.state.differentBilling.enabled);
                
                // Zeige/verstecke abweichende Adressfelder
                if (this.state.differentBilling.enabled) {
                    $('#different_billing_fields').show();
                } else {
                    $('#different_billing_fields').hide();
                }
            }

            // Different Billing Address Felder
            if (this.state.differentBillingAddress) {
                Object.entries(this.state.differentBillingAddress).forEach(([field, value]) => {
                    $(`[name="${field}"]`).val(value);
                });
            }

            // Payment Method
            if (this.state.paymentMethod && this.state.paymentMethod.method) {
                const paymentMethod = this.state.paymentMethod.method;
                $(`[name="payment_method"][value="${paymentMethod}"]`)
                    .prop('checked', true)
                    .closest('.payment-option')
                    .addClass('selected');
            }

            // Coupon Code
            if (this.state.couponCode && this.state.couponCode.code) {
                $('#coupon_code').val(this.state.couponCode.code);
            }
        }
    };

    // System initialisieren
    jQuery(document).ready(function() {
        // Nur initialisieren, wenn auf der Checkout-Seite
        if (typeof wc_checkout_params !== 'undefined') {
            CheckoutSystem.init();
        }
    });
    </script>
    <?php
    return ob_get_clean();
}
add_shortcode('checkout_communication', 'checkout_communication_shortcode');

// AJAX Handler für initiale Daten
function get_checkout_initial_state() {
    $user_id = isset($_POST['user_id']) ? intval($_POST['user_id']) : 0;
    
    // State für eingeloggte Benutzer
    if ($user_id) {
        $customer = new WC_Customer($user_id);
        
        // Shipping Address
        $shipping = array(
            'first_name' => $customer->get_shipping_first_name(),
            'last_name' => $customer->get_shipping_last_name(),
            'address_1' => $customer->get_shipping_address_1(),
            'address_2' => $customer->get_shipping_address_2(),
            'postcode' => $customer->get_shipping_postcode(),
            'city' => $customer->get_shipping_city(),
            'country' => $customer->get_shipping_country() ?: 'DE'
        );
        
        // Billing Address
        $billing = array(
            'first_name' => $customer->get_billing_first_name(),
            'last_name' => $customer->get_billing_last_name(),
            'email' => $customer->get_billing_email(),
            'address_1' => $customer->get_billing_address_1(),
            'address_2' => $customer->get_billing_address_2(),
            'postcode' => $customer->get_billing_postcode(),
            'city' => $customer->get_billing_city(),
            'country' => $customer->get_billing_country() ?: 'DE'
        );
        
        // Different Billing Address
        $different_billing = array();
        $fields = array('first_name', 'last_name', 'email', 'address_1', 'address_2', 'postcode', 'city', 'country');
        
        foreach ($fields as $field) {
            $different_billing['different_billing_' . $field] = $customer->get_meta('different_billing_' . $field) ?: $billing[$field];
        }
        
        // State zusammenbauen
        $state = array(
            'shippingAddress' => array(
                'slot' => WC()->session ? WC()->session->get('selected_shipping_slot') : 'primary',
                'address' => $shipping
            ),
            'billingAddress' => $billing,
            'differentBilling' => array(
                'enabled' => get_user_meta($user_id, 'different_billing_enabled', true) ?: false
            ),
            'differentBillingAddress' => $different_billing,
            'paymentMethod' => array(
                'method' => WC()->session ? WC()->session->get('chosen_payment_method') : ''
            ),
            'couponCode' => array(
                'code' => WC()->session ? WC()->session->get('applied_coupon') : ''
            )
        );
        
        wp_send_json_success($state);
    } else {
        // Fallback für nicht eingeloggte Benutzer
        $state = array(
            'shippingAddress' => array('country' => 'DE'),
            'billingAddress' => array('country' => 'DE'),
            'differentBilling' => array('enabled' => false),
            'paymentMethod' => array('method' => ''),
            'couponCode' => array('code' => '')
        );
        
        wp_send_json_success($state);
    }
}
add_action('wp_ajax_get_checkout_initial_state', 'get_checkout_initial_state');
add_action('wp_ajax_nopriv_get_checkout_initial_state', 'get_checkout_initial_state');

// AJAX Handler für State-Speicherung
function save_checkout_state() {
    if (isset($_POST['state'])) {
        $state = $_POST['state'];
        $user_id = get_current_user_id();
        
        // State in user_meta speichern falls Benutzer eingeloggt ist
        if ($user_id) {
            update_user_meta($user_id, 'checkout_state', $state);
        }
        
        // State in WC Session speichern
        if (function_exists('WC') && WC()->session) {
            WC()->session->set('checkout_state', $state);
        }
        
        wp_send_json_success();
    }
    wp_send_json_error();
}
add_action('wp_ajax_save_checkout_state', 'save_checkout_state');
add_action('wp_ajax_nopriv_save_checkout_state', 'save_checkout_state');

// -----------------------------------------------------------------------------------------------------------------



// -----------------------------------------------------------------------------------------------------------------

function custom_different_billing_shortcode() {
    if (!function_exists('WC')) {
        return 'WooCommerce ist nicht aktiviert.';
    }

    // Aktuelle Benutzerdaten abrufen
    $user_id = get_current_user_id();
    
    // WooCommerce Billing Felder abrufen
    $different_billing_first_name = get_user_meta($user_id, 'billing_first_name', true);
    $different_billing_last_name = get_user_meta($user_id, 'billing_last_name', true);
    $different_billing_email = get_user_meta($user_id, 'billing_email', true);
    $different_billing_address_1 = get_user_meta($user_id, 'billing_address_1', true);
    $different_billing_address_2 = get_user_meta($user_id, 'billing_address_2', true);
    $different_billing_postcode = get_user_meta($user_id, 'billing_postcode', true);
    $different_billing_city = get_user_meta($user_id, 'billing_city', true);
    $different_billing_country = get_user_meta($user_id, 'billing_country', true);
    $different_billing_enabled = get_user_meta($user_id, 'different_billing_enabled', true);

    ob_start();
    ?>
    <div class="custom-billing-address">
        <div class="checkbox-group">
            <input type="checkbox" 
                   id="different_billing" 
                   name="different_billing" 
                   class="billing-toggle"
                   <?php checked($different_billing_enabled, true); ?> />
            <label for="different_billing">Abweichende Rechnungsadresse</label>
        </div>
        
        <div id="different_billing_fields" class="conditional-fields" style="<?php echo $different_billing_enabled ? 'display: block;' : 'display: none;'; ?>">
            <!-- Adresssuche-Feld -->
            <div class="form-group address-search-group">
                <input type="text" 
                       id="billing_address_search" 
                       placeholder="Adresse suchen..." 
                       class="address-search" />
                <div class="loader" id="billing_address_loader"></div>
                <div id="billing_address_suggestions" class="address-suggestions"></div>
                <div id="billing_address_error" class="error-message"></div>
            </div>

            <div class="form-row">
                <input type="text" 
                       name="different_billing_first_name" 
                       placeholder="Vorname" 
                       value="<?php echo esc_attr($different_billing_first_name); ?>" 
                       class="billing-field" />
                
                <input type="text" 
                       name="different_billing_last_name" 
                       placeholder="Name" 
                       value="<?php echo esc_attr($different_billing_last_name); ?>" 
                       class="billing-field" />
            </div>

            <div class="form-row">
                <input type="email" 
                       name="different_billing_email" 
                       placeholder="E-Mail" 
                       value="<?php echo esc_attr($different_billing_email); ?>" 
                       class="billing-field" />
            </div>

            <div class="form-row">
                <input type="text" 
                       name="different_billing_address_1" 
                       id="different_billing_address_1"
                       placeholder="Straße" 
                       value="<?php echo esc_attr($different_billing_address_1); ?>" 
                       class="billing-field" />
                
                <input type="text" 
                       name="different_billing_address_2" 
                       id="different_billing_address_2"
                       placeholder="Hausnummer" 
                       value="<?php echo esc_attr($different_billing_address_2); ?>" 
                       class="billing-field" />
            </div>

            <div class="form-row">
                <input type="text" 
                       name="different_billing_postcode" 
                       id="different_billing_postcode"
                       placeholder="PLZ" 
                       value="<?php echo esc_attr($different_billing_postcode); ?>" 
                       class="billing-field" />
                
                <input type="text" 
                       name="different_billing_city" 
                       id="different_billing_city"
                       placeholder="Ort" 
                       value="<?php echo esc_attr($different_billing_city); ?>" 
                       class="billing-field" />
            </div>

            <div class="form-row">
                <select name="different_billing_country" 
                        id="different_billing_country"
                        class="billing-field">
                    <?php
                    $countries_obj = new WC_Countries();
                    $countries = $countries_obj->get_countries();
                    $default_country = $different_billing_country ?: 'DE';
                    
                    foreach ($countries as $code => $name) {
                        $selected = ($default_country === $code) ? 'selected' : '';
                        echo '<option value="' . esc_attr($code) . '" ' . $selected . '>' . esc_html($name) . '</option>';
                    }
                    ?>
                </select>
            </div>
        </div>
    </div>
    
    <style>
    .custom-billing-address {
        width: 100%;
        margin-bottom: 30px;
        font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
    }

    .checkbox-group {
        display: flex;
        align-items: center;
        margin-bottom: 16px;
        cursor: pointer;
    }

    .checkbox-group input[type="checkbox"] {
        margin-right: 10px;
        accent-color: #0079FF;
    }

    .checkbox-group label {
        color: #0079FF;
        font-weight: 500;
    }

    .conditional-fields {
        margin-top: 20px;
        display: none;
    }

    .form-row {
        display: flex;
        gap: 12px;
        margin-bottom: 12px;
    }

    .form-row input,
    .form-row select,
    .address-search {
        flex: 1;
        padding: 12px;
        border: 1px solid #d2d2d7;
        border-radius: 8px;
        font-size: 0.95rem;
        background-color: #FFF;
        transition: border-color 0.2s ease;
    }

    .form-row input:focus,
    .form-row select:focus,
    .address-search:focus {
        border-color: #0079FF;
        outline: none;
        box-shadow: 0 0 0 2px rgba(0, 121, 255, 0.1);
    }

    .address-search-group {
        position: relative;
        margin-bottom: 12px;
    }

    .loader {
        border: 2px solid #f3f3f3;
        border-radius: 50%;
        border-top: 2px solid #0079FF;
        width: 16px;
        height: 16px;
        animation: spin 1s linear infinite;
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        display: none;
    }@keyframes spin {
        0% { transform: translateY(-50%) rotate(0deg); }
        100% { transform: translateY(-50%) rotate(360deg); }
    }

    .address-suggestions {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #d2d2d7;
        border-radius: 8px;
        z-index: 1000;
        max-height: 250px;
        overflow-y: auto;
        display: none;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        margin-top: 4px;
    }

    .address-suggestion {
        padding: 12px 16px;
        cursor: pointer;
        border-bottom: 1px solid #f5f5f7;
    }

    .address-suggestion:last-child {
        border-bottom: none;
    }

    .address-suggestion:hover {
        background-color: #f5f5f7;
    }

    .suggestion-main {
        font-weight: 500;
        margin-bottom: 4px;
        color: #1d1d1f;
    }

    .suggestion-secondary {
        font-size: 0.85rem;
        color: #6e6e73;
    }

    .error-message {
        color: #ff3b30;
        background-color: rgba(255, 59, 48, 0.1);
        border-radius: 8px;
        padding: 8px 12px;
        margin-top: 4px;
        font-size: 0.9rem;
        display: none;
    }

    @media (max-width: 600px) {
        .form-row {
            flex-direction: column;
        }
        
        .form-row input,
        .form-row select {
            width: 100%;
        }
    }
    </style>

    <script>
    jQuery(document).ready(function($) {
        const checkbox = $('#different_billing');
        const fieldsContainer = $('#different_billing_fields');
        
        // HERE API Schlüssel
        const API_KEY = 'xPlTGXIrjg1O6Oea3e2gvo5lrN-iO1gT47Sc-VojWdU';

        // Toggle Felder
        checkbox.change(function() {
            if (this.checked) {
                fieldsContainer.slideDown(300);
            } else {
                fieldsContainer.slideUp(300);
            }

            // Update CheckoutSystem wenn verfügbar
            if (typeof CheckoutSystem !== 'undefined') {
                CheckoutSystem.updateState('differentBilling', {
                    enabled: this.checked
                });
            }
            
            // Metadaten aktualisieren
            $.ajax({
                url: wc_checkout_params.ajax_url,
                type: 'POST',
                data: {
                    action: 'update_different_billing_enabled',
                    enabled: this.checked ? 1 : 0
                }
            });
        });

        // Feldänderungen
        $('.billing-field').on('change', function() {
            // Update CheckoutSystem wenn verfügbar
            if (typeof CheckoutSystem !== 'undefined') {
                CheckoutSystem.updateState('differentBillingAddress', {
                    [this.name]: this.value
                });
            }
            
            // Metadaten aktualisieren
            saveBillingAddress();
        });
        
        // Adresse speichern
        function saveBillingAddress() {
            const addressData = {};
            $('.billing-field').each(function() {
                addressData[$(this).attr('name')] = $(this).val();
            });
            
            $.ajax({
                url: wc_checkout_params.ajax_url,
                type: 'POST',
                data: {
                    action: 'save_different_billing_address',
                    address: addressData
                }
            });
        }

        // Auf State-Updates reagieren wenn CheckoutSystem verfügbar
        $(document).on('checkoutStateUpdate', function(e, state) {
            if (state && state.differentBillingAddress) {
                Object.entries(state.differentBillingAddress).forEach(([field, value]) => {
                    $(`[name="${field}"]`).val(value);
                });
            }
            
            // Different Billing Checkbox aktualisieren
            if (state && state.differentBilling && state.differentBilling.enabled !== undefined) {
                const isChecked = state.differentBilling.enabled;
                checkbox.prop('checked', isChecked);
                
                if (isChecked && !fieldsContainer.is(':visible')) {
                    fieldsContainer.show();
                } else if (!isChecked && fieldsContainer.is(':visible')) {
                    fieldsContainer.hide();
                }
            }
        });
        
        // Adresssuche
        let searchTimeout;
        $('#billing_address_search').on('input', function() {
            clearTimeout(searchTimeout);
            const query = $(this).val();
            
            $('#billing_address_error').hide();
            $('#billing_address_loader').hide();
            
            if (query.length < 3) {
                $('#billing_address_suggestions').hide();
                return;
            }

            $('#billing_address_loader').show();

            searchTimeout = setTimeout(function() {
                $.ajax({
                    url: 'https://geocode.search.hereapi.com/v1/geocode',
                    data: {
                        q: query,
                        apiKey: API_KEY,
                        limit: 5,
                        lang: 'de',
                        in: 'countryCode:DEU,AUT,CHE'
                    },
                    type: 'GET',
                    success: function(data) {
                        $('#billing_address_loader').hide();
                        const $suggestions = $('#billing_address_suggestions');
                        $suggestions.empty();

                        if (data && data.items && data.items.length > 0) {
                            data.items.forEach(function(item) {
                                const address = item.address;
                                
                                // Hauptadresszeile
                                let streetPart = address.street || '';
                                let houseNumberPart = address.houseNumber ? ' ' + address.houseNumber : '';
                                
                                const mainLine = streetPart + houseNumberPart + 
                                                (address.postalCode ? ', ' + address.postalCode : '') + 
                                                (address.city ? ' ' + address.city : '');

                                // Zusätzliche Informationen
                                const secondaryLine = [
                                    address.district,
                                    address.state,
                                    address.countryName
                                ].filter(Boolean).join(', ');

                                const $suggestion = $('<div>').addClass('address-suggestion')
                                    .append($('<div>').addClass('suggestion-main').text(mainLine))
                                    .append($('<div>').addClass('suggestion-secondary').text(secondaryLine))
                                    .data('address', address);

                                $suggestion.on('click', function() {
                                    const address = $(this).data('address');
                                    
                                    // Straße und Hausnummer in separate Felder
                                    // Das ist die wichtige Verbesserung: Korrekte Trennung
                                    $('#different_billing_address_1').val(address.street || '');
                                    $('#different_billing_address_2').val(address.houseNumber || '');
                                    
                                    // PLZ und Stadt
                                    $('#different_billing_postcode').val(address.postalCode || '');
                                    $('#different_billing_city').val(address.city || '');
                                    
                                    // Land - Angepasst für WooCommerce Länderformat
                                    if (address.countryCode) {
                                        // HERE API liefert Ländercodes in Kleinbuchstaben (de, at),
                                        // WooCommerce erwartet sie in Großbuchstaben (DE, AT)
                                        const countryCode = address.countryCode.toUpperCase();
                                        $('#different_billing_country').val(countryCode);
                                    }

                                    // Felder als geändert markieren
                                    $('.billing-field').trigger('change');
                                    
                                    // UI aktualisieren
                                    $suggestions.hide();
                                    $('#billing_address_search').val('');
                                });

                                $suggestions.append($suggestion);
                            });

                            $suggestions.show();
                        } else {
                            showError('Keine Adressen gefunden.');
                        }
                    },
                    error: function(xhr, status, error) {
                        $('#billing_address_loader').hide();
                        console.error('Fehler bei der Adresssuche:', error);
                        
                        let errorMessage = 'Ein Fehler ist bei der Adresssuche aufgetreten.';
                        if (xhr.status === 401) {
                            errorMessage = 'Authentifizierungsfehler bei der Adresssuche.';
                        } else if (xhr.status === 429) {
                            errorMessage = 'Zu viele Anfragen. Bitte versuchen Sie es später erneut.';
                        }
                        
                        showError(errorMessage);
                    }
                });
            }, 500);
        });

        function showError(message) {
            const $error = $('#billing_address_error');
            $error.text(message).show();
            $('#billing_address_suggestions').hide();
        }

        // Klick außerhalb schließt Vorschläge
        $(document).on('click', function(e) {
            if (!$(e.target).closest('#billing_address_search, #billing_address_suggestions').length) {
                $('#billing_address_suggestions').hide();
                $('#billing_address_error').hide();
            }
        });
    });
    </script>
    <?php
    return ob_get_clean();
}
add_shortcode('custom_different_billing', 'custom_different_billing_shortcode');

// AJAX Handler für Different Billing Toggle
function update_different_billing_enabled() {
    $user_id = get_current_user_id();
    $enabled = isset($_POST['enabled']) ? (bool)$_POST['enabled'] : false;
    
    update_user_meta($user_id, 'different_billing_enabled', $enabled);
    wp_send_json_success();
}
add_action('wp_ajax_update_different_billing_enabled', 'update_different_billing_enabled');
add_action('wp_ajax_nopriv_update_different_billing_enabled', 'update_different_billing_enabled');

// AJAX Handler für Different Billing Adresse
function save_different_billing_address() {
    $user_id = get_current_user_id();
    $address = $_POST['address'];
    
    if ($address) {
        foreach ($address as $key => $value) {
            // Auch different_billing_* Felder speichern
            update_user_meta($user_id, $key, sanitize_text_field($value));
            
            // Konvertieren von different_billing_* zu billing_*
            $meta_key = str_replace('different_billing_', 'billing_', $key);
            update_user_meta($user_id, $meta_key, sanitize_text_field($value));
        }
    }
    
    wp_send_json_success();
}
add_action('wp_ajax_save_different_billing_address', 'save_different_billing_address');
add_action('wp_ajax_nopriv_save_different_billing_address', 'save_different_billing_address');

// -----------------------------------------------------------------------------------------------------------------

function personal_data_settings() {
    ob_start();
    global $wpdb;
    $user_id = get_current_user_id();
    $current_user = wp_get_current_user();
    $message = '';
    $message_type = '';

    // Daten aus der Datenbank abrufen
    $user_data = $wpdb->get_row(
        $wpdb->prepare(
            "SELECT * FROM personal_data WHERE user_id = %d",
            $user_id
        ),
        ARRAY_A
    );

    // Standardwerte festlegen
    $first_name = isset($user_data['first_name']) ? esc_attr($user_data['first_name']) : '';
    $last_name = isset($user_data['last_name']) ? esc_attr($user_data['last_name']) : '';
    $birthdate = isset($user_data['birthdate']) ? esc_attr($user_data['birthdate']) : '';
    $current_email = $current_user->user_email;

    // Formular-Verarbeitung
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        $email_changed = false;
        $needs_logout = false;
        
        // E-Mail-Änderung verarbeiten
        if (isset($_POST['email']) && !empty($_POST['email'])) {
            $new_email = sanitize_email($_POST['email']);
            
            if ($new_email !== $current_email) {
                // Prüfen, ob die E-Mail bereits existiert
                if (email_exists($new_email)) {
                    $message = 'Diese E-Mail-Adresse wird bereits verwendet.';
                    $message_type = 'error';
                } else {
                    $email_update = wp_update_user([
                        'ID' => $user_id,
                        'user_email' => $new_email
                    ]);
                    
                    if (!is_wp_error($email_update)) {
                        // E-Mail-Verifizierung zurücksetzen
                        $wpdb->query($wpdb->prepare(
                            "UPDATE dbs13227305.wp_email_verifications 
                            SET email_verified = 0, 
                                updated_at = NOW() 
                            WHERE user_id = %d",
                            $user_id
                        ));
                        
                        $email_changed = true;
                        $needs_logout = true;
                    } else {
                        $message = 'Fehler beim Ändern der E-Mail-Adresse.';
                        $message_type = 'error';
                    }
                }
            }
        }

        // Persönliche Daten verarbeiten
        $fields_to_update = [];
        
        if (isset($_POST['first_name']) && !empty($_POST['first_name'])) {
            $fields_to_update['first_name'] = sanitize_text_field($_POST['first_name']);
        }
        
        if (isset($_POST['last_name']) && !empty($_POST['last_name'])) {
            $fields_to_update['last_name'] = sanitize_text_field($_POST['last_name']);
        }
        
        if (isset($_POST['birthdate']) && !empty($_POST['birthdate'])) {
            $fields_to_update['birthdate'] = sanitize_text_field($_POST['birthdate']);
        }

        if (!empty($fields_to_update)) {
            if ($user_data) {
                $update_result = $wpdb->update(
                    'personal_data',
                    $fields_to_update,
                    ['user_id' => $user_id]
                );
            } else {
                $fields_to_update['user_id'] = $user_id;
                $update_result = $wpdb->insert('personal_data', $fields_to_update);
            }
        }
    }
    ?>

    <style>
        #custom-elementor-form {
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 500px;
            margin: 20px auto;
        }

        #custom-elementor-form .form-group {
            width: 100%;
            margin-bottom: 20px;
        }

        #custom-elementor-form input {
            width: 100%;
            padding: 10px;
            border: 1px solid #D2D2D7;
            border-radius: 5px;
            font-size: 1rem;
            background-color: #FFF;
        }

        #custom-elementor-form button {
            background-color: transparent;
            color: #2997FF;
            padding: 10px 20px;
            border: 1px solid #2997FF;
            border-radius: 5px;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.3s;
            margin-top: 10px;
        }

        #custom-elementor-form button:hover {
            background-color: #2997FF;
            color: #FFF;
        }

        .birthdate-title {
            width: 100%;
            margin-bottom: 5px;
            color: #2997FF;
            font-weight: normal;
            font-size: 0.9rem;
        }

        /* Email warning styles */
        .email-warning {
            display: none;
            color: #2997FF;
            font-size: 0.9rem;
            margin-top: 5px;
            width: 100%;
            text-align: left;
        }

        /* Overlay Styles */
        .email-change-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            z-index: 99999;
            justify-content: center;
            align-items: center;
        }

        .overlay-content {
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            text-align: center;
            max-width: 400px;
            width: 90%;
        }

        .loader {
            border: 5px solid #f3f3f3;
            border-radius: 50%;
            border-top: 5px solid #2997FF;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>

    <!-- Email Change Overlay -->
    <div id="emailChangeOverlay" class="email-change-overlay">
        <div class="overlay-content">
            <h3 style="margin-bottom: 15px;">E-Mail-Adresse wird geändert</h3>
            <div class="loader"></div>
            <p style="margin-top: 15px;">Sie werden nun ausgeloggt und zum Login weitergeleitet.</p>
            <p style="margin-top: 10px;">Bitte loggen Sie sich mit Ihrer neuen E-Mail-Adresse ein.</p>
        </div>
    </div>

    <form id="custom-elementor-form" method="POST">
        <div class="form-group">
            <input type="text" name="first_name" placeholder="<?php echo $first_name ?: 'Vorname'; ?>" value="<?php echo $first_name; ?>" />
        </div>
        
        <div class="form-group">
            <input type="text" name="last_name" placeholder="<?php echo $last_name ?: 'Nachname'; ?>" value="<?php echo $last_name; ?>" />
        </div>
        
        <div class="form-group">
            <div class="birthdate-title">Geburtstag</div>
            <input type="date" name="birthdate" value="<?php echo $birthdate; ?>" />
        </div>
        
        <div class="form-group">
            <input type="email" name="email" id="email-input" placeholder="<?php echo $current_email ?: 'E-Mail-Adresse'; ?>" value="<?php echo $current_email; ?>" />
            <div class="email-warning">
                Wenn Sie Ihre E-Mail-Adresse ändern, werden Sie ausgeloggt und müssen sich mit der neuen Adresse wieder einloggen.
            </div>
        </div>
        
        <button type="submit">Speichern</button>
    </form>

    <script>
    jQuery(document).ready(function($) {
        var originalEmail = '<?php echo $current_email; ?>';
        var emailInput = $('#email-input');
        var emailWarning = $('.email-warning');
        var form = $('#custom-elementor-form');
        
        // Show warning when email input changes
        emailInput.on('input', function() {
            if ($(this).val() !== originalEmail) {
                emailWarning.slideDown();
            } else {
                emailWarning.slideUp();
            }
        });

        <?php if ($needs_logout && $email_changed): ?>
        // Force logout and redirect
        function forceLogoutAndRedirect() {
            // Show overlay
            $('#emailChangeOverlay').css('display', 'flex');
            
            // Clear all cookies
            document.cookie.split(";").forEach(function(c) { 
                document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/"); 
            });
            
            // Add extra cookie clearing for WordPress
            document.cookie = "wordpress_logged_in_=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
            document.cookie = "wordpress_sec_=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
            
            // Force logout via AJAX
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'custom_force_logout'
                },
                success: function() {
                    // Redirect after short delay
                    setTimeout(function() {
                        window.location.href = 'https://yprint.de/login';
                    }, 2000);
                },
                error: function() {
                    // Redirect anyway if AJAX fails
                    window.location.href = 'https://yprint.de/login';
                }
            });
        }
        
        // Call the logout function
        forceLogoutAndRedirect();
        <?php endif; ?>
    });
    </script>

    <?php
    return ob_get_clean();
}
add_shortcode('personal_data_settings', 'personal_data_settings');

// Add AJAX action for force logout
add_action('wp_ajax_custom_force_logout', 'custom_force_logout');
function custom_force_logout() {
    wp_logout();
    wp_clear_auth_cookie();
    wp_send_json_success();
    die();
}

// -----------------------------------------------------------------------------------------------------------------
function yprint_login_form_shortcode() {
    // Sofortige Weiterleitung, wenn der Benutzer eingeloggt ist und kein Admin ist
    if (is_user_logged_in() && !current_user_can('administrator')) {
        ?>
        <script>
            window.location.href = '<?php echo esc_js(home_url('/my-products')); ?>';
        </script>
        <?php
        exit;
    }
    ob_start();
    ?>
    <style>
        /* Alle Abstände und Polster auf 0 setzen */
        #loginform {
            margin: 0 !important;
            padding: 0 !important;
        }
        /* Styling für die Eingabefelder */
        #loginform input[type="text"],
        #loginform input[type="password"],
        #loginform input[type="email"] {
            font-family: 'Roboto' !important;
            background-color: #f1f1f1 !important;
            border-radius: 10px !important;
            border: 1px solid #000000 !important;
            text-align: center !important;
            padding: 10px !important;
            height: 40px !important;
            width: 400px !important;
            margin: 0px !important;
            color: #333 !important;
        }
        
        /* Platzhaltertext anpassen */
        #loginform input::placeholder {
            color: #333 !important;
            font-weight: normal !important;
        }
        /* Styling für den Submit-Button */
        #loginform input[type="submit"] {
            width: 155px !important;
            height: 35px !important;
            font-family: 'Roboto' !important;
            font-size: 20px !important;
            font-weight: bold !important;
            color: white !important;
            background-color: #0079FF !important;
            border: 1px solid #707070 !important;
            text-transform: lowercase !important;
            cursor: pointer !important;
            line-height: 1px !important;
            margin-top: 20px !important;
            margin-bottom: -15px !important;
            border-radius: 0px !important;
        }
        /* Hover-Effekt für den Submit-Button */
        #loginform input[type="submit"]:hover {
            background-color: #0079FF !important;
        }
        /* Entfernen der "Remember me"-Checkbox */
        #loginform #rememberme {
            display: none !important;
        }
        /* Entfernen der Label für Username und Password */
        #loginform label {
            display: none !important;
        }
        /* Entfernen des Standard-Abstands zwischen den Feldern */
        #loginform .input {
            margin-bottom: 0 !important;
        }
        
        /* Mobile Wrapper - wichtig: dieser muss außerhalb des Formulars liegen */
        .yprint-login-mobile-wrapper {
            width: 100%;
            display: block;
        }
        
        @media screen and (max-width: 767px) {
            .yprint-login-mobile-wrapper {
                padding: 0 10%;
            }
            
            #loginform input[type="text"],
            #loginform input[type="password"],
            #loginform input[type="email"] {
                width: 100% !important;
                max-width: 100% !important;
            }
        }
    </style>
    
    <div class="yprint-login-mobile-wrapper">
    <?php
    // Standard WordPress Login-Formular einfügen
    $args = array(
        'redirect' => home_url('/sell-new-product'),
        'label_username' => '',
        'label_password' => '',
        'label_remember' => '',
        'value_username' => '',
        'value_remember' => false,
    );
    // Das Login-Formular generieren
    wp_login_form($args);
    ?>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var usernameField = document.querySelector('input[name="log"]');
            var passwordField = document.querySelector('input[name="pwd"]');
            
            if (usernameField) {
                usernameField.setAttribute('placeholder', 'Username');
            }
            if (passwordField) {
                passwordField.setAttribute('placeholder', 'Password');
            }
        });
    </script>
    <?php
    return ob_get_clean();
}
add_shortcode('yprint_login_form', 'yprint_login_form_shortcode');

// Verhindert die Weiterleitung von wp-login.php
function yprint_login_failed_redirect($username) {
    if (isset($_SERVER['REQUEST_URI']) && strpos($_SERVER['REQUEST_URI'], '/wp-login.php') !== false) {
        if (!isset($_POST['log'])) { 
            return;
        }
        wp_redirect(home_url('/login') . '?login=failed');
        exit;
    }
}
add_action('wp_login_failed', 'yprint_login_failed_redirect');

// Fehlerbehandlung für leere Felder
function yprint_empty_fields_redirect($user, $username, $password) {
    if (empty($username) || empty($password)) {
        if (isset($_POST['log']) && isset($_POST['pwd'])) {
            wp_redirect(home_url('/login') . '?login=empty');
            exit;
        }
    }
    return $user;
}
add_filter('authenticate', 'yprint_empty_fields_redirect', 30, 3);

// Weiterleitung nach fehlgeschlagenem Login
function yprint_redirect_after_failed_login($redirect_to, $request, $user) {
    if (is_wp_error($user)) {
        if (isset($_POST['log'])) {
            $redirect_to = home_url('/login') . '?login=failed';
        }
    }
    return $redirect_to;
}
add_filter('login_redirect', 'yprint_redirect_after_failed_login', 10, 3);

// E-Mail-Verifikation beim Login überprüfen
function yprint_authenticate_user($user, $username, $password) {
    if (is_wp_error($user)) {
        return $user;
    }
    
    global $wpdb;
    $table_name = 'wp_email_verifications';
    $user_id = $user->ID;
    
    $email_verified = $wpdb->get_var(
        $wpdb->prepare("SELECT email_verified FROM $table_name WHERE user_id = %d", $user_id)
    );
    
    if ($email_verified != 1) {
        wp_redirect(home_url('/login?login=email_not_verified&user_id=' . $user_id));
        exit;
    }
    
    return $user;
}
add_filter('authenticate', 'yprint_authenticate_user', 30, 3);

// Login-Feedback Shortcode
function yprint_login_feedback_shortcode() {
    ob_start();

    $error_message = '';
    $success_message = '';
    $info_message = '';
    $show_recover_option = false;
    $show_resend_verification = false;
    $user_id = isset($_GET['user_id']) ? intval($_GET['user_id']) : 0;

    if (isset($_GET['login'])) {
        switch ($_GET['login']) {
            case 'failed':
                $error_message = '⚠️ Falscher Benutzername oder Passwort!';
                $show_recover_option = true;
                break;
            case 'email_not_verified':
                $error_message = '⚠️ Deine E-Mail-Adresse wurde noch nicht bestätigt. Bitte überprüfe dein Postfach.';
                $show_resend_verification = true;
                break;
            case 'empty':
                $error_message = '⚠️ Bitte fülle alle Felder aus!';
                break;
        }
    }

    if (isset($_GET['verification_sent']) && $_GET['verification_sent'] == '1') {
        $success_message = '✅ Registrierung erfolgreich! Eine Bestätigungs-E-Mail wurde an deine E-Mail-Adresse gesendet. Bitte überprüfe dein Postfach und bestätige deine Adresse, um dich einloggen zu können.';
        $show_resend_verification = true;
    }
    
    if (isset($_GET['verification_issue']) && $_GET['verification_issue'] == '1') {
        $error_message = '⚠️ Dein Account wurde erstellt, aber es gab ein Problem beim Senden der Bestätigungs-E-Mail.';
        $info_message = 'Du kannst dich anmelden, sobald deine E-Mail-Adresse bestätigt ist. Bitte verwende die Option zum erneuten Senden der Bestätigungs-E-Mail.';
        $show_resend_verification = true;
    }

    if ($error_message) {
        echo '<div style="color: red; text-align: center; margin-bottom: 10px;">' . esc_html($error_message) . '</div>';
    }

    if ($info_message) {
        echo '<div style="color: #0079FF; text-align: center; margin-bottom: 10px;">' . esc_html($info_message) . '</div>';
    }

    if ($success_message) {
        echo '<div style="color: green; text-align: center; margin-bottom: 10px;">' . esc_html($success_message) . '</div>';
    }

    if ($show_recover_option) {
        echo '<div style="text-align: center; margin-top: 10px;">
                <a href="' . esc_url(home_url('/recover-account')) . '" style="color: #0079FF; font-weight: bold; text-decoration: none;">
                    ❓ Passwort vergessen? Konto wiederherstellen
                </a>
              </div>';
    }

    if ($show_resend_verification && $user_id) {
        echo '<div style="text-align: center; margin-top: 10px;">
                <form method="post">
                    <input type="hidden" name="resend_verification" value="' . esc_attr($user_id) . '">
                    <button type="submit" style="background-color: #0079FF; color: white; padding: 10px; border: none; cursor: pointer;">
                        ✉️ Bestätigungs-E-Mail erneut senden
                    </button>
                </form>
              </div>';
    } else if ($show_resend_verification) {
        // Wenn kein User-ID Parameter vorhanden ist, aber trotzdem der Button gezeigt werden soll
        echo '<div style="text-align: center; margin-top: 10px; color: #0079FF;">
                Wenn du keine E-Mail erhalten hast, versuche dich mit deinen Daten anzumelden, um die Bestätigungs-E-Mail erneut zu senden.
              </div>';
    }

    return ob_get_clean();
}
add_shortcode('yprint_login_feedback', 'yprint_login_feedback_shortcode');

// Handler für das Resenden der Verifikations-E-Mail
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['resend_verification'])) {
    global $wpdb;
    $table_name = 'wp_email_verifications';
    $user_id = intval($_POST['resend_verification']);
    $user = get_userdata($user_id);
    
    if ($user) {
        $email = $user->user_email;
        $username = $user->user_login;
        $verification_code = bin2hex(random_bytes(16));
        $current_time = current_time('mysql');
        
        // Zuerst den alten Eintrag definitiv löschen
        $wpdb->delete(
            $table_name,
            array('user_id' => $user_id),
            array('%d')
        );
        
        // Dann einen neuen Eintrag erstellen
        $wpdb->insert(
            $table_name,
            array(
                'user_id' => $user_id,
                'verification_code' => $verification_code,
                'email_verified' => 0,
                'created_at' => $current_time,
                'updated_at' => $current_time
            ),
            array('%d', '%s', '%d', '%s', '%s')
        );

        // Verification Link erstellen
        $verification_link = add_query_arg(
            array(
                'user_id' => $user_id,
                'verification_code' => $verification_code,
            ),
            home_url('/verify-email/')
        );

        // E-Mail Template laden und anpassen
        $template = file_get_contents('https://yprint.de/wp-content/uploads/2025/02/yprint-email-vorlage.html');
        $template = str_replace(
            array('{{headline}}', '{{first_name}}', '{{message}}'),
            array(
                'Verifiziere deine E-Mail-Adresse',
                esc_html($username),
                sprintf(
                    "Bitte klicke auf den folgenden Link, um deine E-Mail-Adresse zu verifizieren: <br><br> <a href='%s'>E-Mail verifizieren</a>",
                    esc_url($verification_link)
                )
            ),
            $template
        );

        // E-Mail senden
        $subject = 'Bitte verifiziere deine E-Mail-Adresse';
        $headers = array(
            'Content-Type: text/html; charset=UTF-8',
            'From: YPrint <do-not-reply@yprint.de>'
        );

        wp_mail($email, $subject, $template, $headers);
        
        wp_redirect(home_url('/login?verification_sent=1'));
        exit;
    }
}

// -----------------------------------------------------------------------------------------------------------------
// REST-API Endpunkt registrieren
add_action('rest_api_init', 'wp_rest_user_endpoints');

function wp_rest_user_endpoints() {
    register_rest_route('wp/v2', 'users/register', array(
        'methods' => 'POST',
        'callback' => 'wc_rest_user_endpoint_handler',
    ));
}

function wc_rest_user_endpoint_handler($request) {
    global $wpdb;
    $response = array();
    $parameters = $request->get_json_params();

    // Eingabedaten validieren
    $username = sanitize_text_field($parameters['username']);
    $email = sanitize_text_field($parameters['email']);
    $password = sanitize_text_field($parameters['password']);

    $error = new WP_Error();

    if (empty($username)) {
        $error->add(400, __("Username field 'username' is required.", 'wp-rest-user'), array('status' => 400));
        return $error;
    }
    if (empty($email)) {
        $error->add(401, __("Email field 'email' is required.", 'wp-rest-user'), array('status' => 400));
        return $error;
    }
    if (empty($password)) {
        $error->add(404, __("Password field 'password' is required.", 'wp-rest-user'), array('status' => 400));
        return $error;
    }

    // Prüfen, ob Benutzername oder E-Mail bereits existiert
    if (username_exists($username) || email_exists($email)) {
        $error->add(406, __("Username or email already registered.", 'wp-rest-user'), array('status' => 400));
        return $error;
    }

    // Registrierungs-E-Mail von WordPress verhindern
    add_filter('wp_new_user_notification_email', '__return_false');

    // Benutzer erstellen
    $user_id = wp_create_user($username, $password, $email);

    if (is_wp_error($user_id)) {
        return $user_id;
    }

    // Benutzerrolle setzen
    $user = get_user_by('id', $user_id);
    $user->set_role('subscriber');
    if (class_exists('WooCommerce')) {
        $user->set_role('customer');
    }

    // Verifizierungscode generieren
    $verification_code = bin2hex(random_bytes(16));

    // Tabellenname
    $table_name = 'wp_email_verifications';

    // Prüfen, ob der Benutzer bereits in der Verifizierungstabelle existiert
    $existing_id = $wpdb->get_var(
        $wpdb->prepare("SELECT id FROM $table_name WHERE user_id = %d", $user_id)
    );

    if ($existing_id) {
        // Falls Eintrag existiert: UPDATE
        $wpdb->update(
            $table_name,
            array(
                'verification_code' => $verification_code,
                'email_verified' => 0,
                'updated_at' => current_time('mysql'),
            ),
            array('user_id' => $user_id),
            array('%s', '%d', '%s'),
            array('%d')
        );
    } else {
        // Falls kein Eintrag existiert: INSERT
        $wpdb->insert(
            $table_name,
            array(
                'user_id' => $user_id,
                'verification_code' => $verification_code,
                'email_verified' => 0,
                'created_at' => current_time('mysql'),
                'updated_at' => current_time('mysql'),
            ),
            array('%d', '%s', '%d', '%s', '%s')
        );
    }

    // DEBUG: Fehler ausgeben
    if ($wpdb->last_error) {
        error_log("Datenbankfehler: " . $wpdb->last_error);
    }

    // Verifizierungslink erstellen
    $verification_link = add_query_arg(array(
        'user_id' => $user_id,
        'verification_code' => $verification_code,
    ), home_url('/verify-email/'));

    // Hier wird die E-Mail für die Verifizierung gesendet
    $email_sent = send_verification_email($email, $username, $verification_link);
    
    // Prüfen, ob die E-Mail gesendet wurde
    if (!$email_sent) {
        error_log("Email sending failed during registration for user: {$username} ({$email})");
        // Trotzdem fortfahren, da der Benutzer erstellt wurde
    }

    // Antwort zurückgeben
    $response['code'] = 200;
    $response['message'] = __("User '" . $username . "' Registration was Successful", "wp-rest-user");
    $response['email_sent'] = $email_sent; // Status der E-Mail-Versendung mitgeben
    
    return new WP_REST_Response($response, 200);
}

function send_verification_email($email, $username, $verification_link) {
    // Debug-Information in das Log schreiben
    error_log("Sending verification email to: {$email} with link: {$verification_link}");
    
    // Versuche die HTML-Vorlage zu laden
    $template_url = 'https://yprint.de/wp-content/uploads/2025/02/yprint-email-vorlage.html';
    $template = @file_get_contents($template_url);
    
    // Prüfen, ob die Vorlage geladen werden konnte
    if (!$template) {
        error_log("Email template could not be loaded from: {$template_url}");
        // Fallback zu einer einfachen HTML-Nachricht
        $template = '
        <!DOCTYPE html>
        <html>
        <head>
            <title>E-Mail-Verifizierung</title>
        </head>
        <body>
            <h1>{{headline}}</h1>
            <p>Hallo {{first_name}},</p>
            <p>{{message}}</p>
            <p>Dein YPrint-Team</p>
        </body>
        </html>';
    }
    
    // Ersetze die Platzhalter mit den tatsächlichen Werten
    $headline = 'Verifiziere deine E-Mail-Adresse';
    $first_name = $username;
    $message = "Bitte klicke auf den folgenden Link, um deine E-Mail-Adresse zu verifizieren: <br><br> <a href='{$verification_link}'>E-Mail verifizieren</a>";
    
    // Ersetze die Platzhalter in der Vorlage
    $template = str_replace('{{headline}}', $headline, $template);
    $template = str_replace('{{first_name}}', $first_name, $template);
    $template = str_replace('{{message}}', $message, $template);

    // Betreff und Header für die E-Mail
    $subject = 'Bitte verifiziere deine E-Mail-Adresse';
    $headers = array(
        'Content-Type: text/html; charset=UTF-8',
        'From: YPrint <do-not-reply@yprint.de>',
    );

    // E-Mail senden und Ergebnis prüfen
    $mail_sent = wp_mail($email, $subject, $template, $headers);
    
    // Wenn die E-Mail nicht gesendet werden konnte, dies in das Fehlerlog schreiben
    if (!$mail_sent) {
        error_log("Failed to send verification email to: {$email}");
        
        // Überprüfen der wp_mail Fehler
        global $phpmailer;
        if (isset($GLOBALS['phpmailer'])) {
            $phpmailer = $GLOBALS['phpmailer'];
            if ($phpmailer->ErrorInfo != '') {
                error_log('PHPMailer error: ' . $phpmailer->ErrorInfo);
            }
        }
    } else {
        error_log("Verification email sent successfully to: {$email}");
    }

    // Nur den Sende-Status zurückgeben, keine REST Response
    return $mail_sent;
}

// E-Mail-Verifizierungscode verarbeiten
function verify_user_email($user_id, $verification_code) {
    global $wpdb;
    // Sicherstellen, dass der Code und die Benutzer-ID übereinstimmen
    $updated = $wpdb->update(
        'wp_email_verifications',
        ['email_verified' => 1], // Markiere als verifiziert
        ['user_id' => $user_id, 'verification_code' => $verification_code],
        ['%d'], // Format der Werte
        ['%d', '%s'] // Format der Bedingungen
    );

    return ($updated !== false); // Wenn das Update erfolgreich war
}

function verify_email_shortcode() {
    ob_start();

    if (isset($_GET['verification_code']) && isset($_GET['user_id'])) {
        global $wpdb;
        $verification_code = sanitize_text_field($_GET['verification_code']);
        $user_id = intval($_GET['user_id']);

        // Korrekte Tabelle für Verifizierungsdaten
        $table_name = 'wp_email_verifications';

        // Verifizierungscode in der Datenbank suchen
        $user = $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM $table_name WHERE user_id = %d AND verification_code = %s", 
            $user_id, $verification_code
        ));

        if ($user) {
            // Überprüfen, ob die E-Mail bereits verifiziert wurde
            if ($user->email_verified == 1) {
                echo '<p>Die E-Mail-Adresse wurde bereits bestätigt.</p>';
            } else {
                $verification_request_time = strtotime($user->created_at);
                $expiry_time = 24 * 60 * 60; // 24 Stunden
                $current_time = time();
                $remaining_time = $expiry_time - ($current_time - $verification_request_time);

                // Überprüfen, ob der Verifizierungscode noch gültig ist
                if ($remaining_time > 0) {
                    $verified = verify_user_email($user_id, $verification_code);

                    if ($verified) {
                        echo '<p>Die E-Mail-Adresse wurde erfolgreich bestätigt! Du wirst nun zum Login weitergeleitet.</p>';
                        echo '<script>
                            setTimeout(function() {
                                window.location.href = "' . home_url('/login') . '";
                            }, 3000);
                        </script>';
                    } else {
                        echo '<p>Es gab ein Problem bei der Verifizierung des Codes.</p>';
                    }
                } else {
                    echo '<p>Der Verifizierungscode ist abgelaufen. Bitte fordere einen neuen an.</p>';
                }
            }
        } else {
            echo '<p>Der Verifizierungscode ist ungültig oder abgelaufen.</p>';
        }
    } else {
        echo '<p>Kein Verifizierungscode gefunden. Bitte überprüfe deinen E-Mail-Link.</p>';
    }

    return ob_get_clean();
}
add_shortcode('verify_email', 'verify_email_shortcode');

function yprint_registration_form_mobile() {
    return '<form id="register-form-mobile" method="post" style="display: flex; flex-direction: column; align-items: center; background-color: #fff; border-radius: 25px; padding: 20px; width: 300px; box-sizing: border-box; border: 1px solid #000; position: relative;">
        <div style="display: flex; flex-direction: column; align-items: center; font-family: \'Roboto\', sans-serif; font-weight: bold; margin-bottom: 16px;">
            <!-- Username Feld -->
            <label style="font-size: 14px; margin-bottom: 4px; color: #000; text-align: center;">Username</label>
            <div style="width: 240px; height: 36px; display: flex; align-items: center; border: 1px solid #000; border-radius: 18px; padding: 0 12px; background-color: #f9f9f9; box-sizing: border-box;">
                <input type="text" name="username" id="user_login_mobile" placeholder="Enter your username" style="flex-grow: 1; text-align: center; border: none; outline: none; font-family: inherit; font-size: 14px; background: none; height: 100%; margin: 0;" required>
            </div>
        </div>

        <div style="display: flex; flex-direction: column; align-items: center; font-family: \'Roboto\', sans-serif; font-weight: bold; margin-bottom: 16px;">
            <!-- Email Feld -->
            <label style="font-size: 14px; margin-bottom: 4px; color: #000; text-align: center;">Email</label>
            <div style="width: 240px; height: 36px; display: flex; align-items: center; border: 1px solid #000; border-radius: 18px; padding: 0 12px; background-color: #f9f9f9; box-sizing: border-box;">
                <input type="email" name="email" id="user_email_mobile" placeholder="Enter your email" style="flex-grow: 1; text-align: center; border: none; outline: none; font-family: inherit; font-size: 14px; background: none; height: 100%; margin: 0;" required>
            </div>
        </div>

        <div style="display: flex; flex-direction: column; align-items: center; font-family: \'Roboto\', sans-serif; font-weight: bold; margin-bottom: 16px;">
            <!-- Password Feld -->
            <label style="font-size: 14px; margin-bottom: 4px; color: #000; text-align: center;">Password</label>
            <div style="width: 240px; height: 36px; display: flex; align-items: center; border: 1px solid #000; border-radius: 18px; padding: 0 12px; background-color: #f9f9f9; box-sizing: border-box;">
                <input type="password" name="password" id="user_password_mobile" placeholder="Enter your password" style="flex-grow: 1; text-align: center; border: none; outline: none; font-family: inherit; font-size: 14px; background: none; height: 100%; margin: 0;" required>
            </div>
            <!-- Passwortanforderungen -->
            <div id="password-requirements" style="margin-top: 8px; font-size: 12px; color: red;">
                <ul>
                    <li id="length" style="color: red;">Mindestens 8 Zeichen</li>
                    <li id="uppercase" style="color: red;">Mindestens ein Großbuchstabe</li>
                    <li id="number" style="color: red;">Mindestens eine Zahl</li>
                    <li id="special" style="color: red;">Mindestens ein Sonderzeichen</li>
                </ul>
            </div>
        </div>

        <div style="display: flex; flex-direction: column; align-items: center; font-family: \'Roboto\', sans-serif; font-weight: bold; margin-bottom: 16px;">
            <!-- Repeat Password Feld -->
            <label style="font-size: 14px; margin-bottom: 4px; color: #000; text-align: center;">Repeat Password</label>
            <div style="width: 240px; height: 36px; display: flex; align-items: center; border: 1px solid #000; border-radius: 18px; padding: 0 12px; background-color: #f9f9f9; box-sizing: border-box;">
                <input type="password" name="password_confirm" id="user_password_confirm_mobile" placeholder="Repeat your password" style="flex-grow: 1; text-align: center; border: none; outline: none; font-family: inherit; font-size: 14px; background: none; height: 100%; margin: 0;" required>
            </div>
        </div>

        <!-- Datenschutz-Checkbox -->
        <div style="display: flex; margin-bottom: 25px; width: 240px; font-family: \'Roboto\', sans-serif; font-size: 13px; align-items: flex-start;">
            <input type="checkbox" id="datenschutz_akzeptiert" name="datenschutz_akzeptiert" style="margin-right: 10px; margin-top: 4px;" required>
            <label for="datenschutz_akzeptiert" style="font-weight: normal;">
                Ich habe die <a href="https://yprint.de/datenschutz/" target="_blank" style="color: #0079FF; font-weight: bold; text-decoration: none;">Datenschutzerklärung</a> gelesen und akzeptiere diese.
            </label>
        </div>

        <!-- Fehlermeldung für Datenschutz -->
        <div id="datenschutz-error" style="color: red; font-size: 12px; margin-bottom: 10px; display: none; font-family: \'Roboto\', sans-serif;">
            Bitte akzeptiere die Datenschutzerklärung, um fortzufahren.
        </div>

        <!-- Der Submit-Button wird innerhalb des Formulars, aber visuell außerhalb des Containers positioniert -->
        <div style="position: absolute; bottom: -75px; width: 100%; display: flex; justify-content: center;">
            <button type="submit" id="register-button-mobile" style="width: 155px; height: 35px; font-family: \'Roboto\', sans-serif; font-size: 20px; font-weight: bold; color: #FFFFFF; background-color: #0079FF; border: 1px solid #707070; border-radius: 0; cursor: pointer; text-transform: lowercase; line-height: 1px;">
                Register
            </button>
        </div>
    </form>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            // Passwort-Validierung
            document.getElementById("user_password_mobile").addEventListener("input", function() {
                var password = this.value;
                var requirements = {
                    length: password.length >= 8,
                    uppercase: /[A-Z]/.test(password),
                    number: /\d/.test(password),
                    special: /[!@#$%^&*(),.?":{}|<>]/.test(password)
                };

                // Überprüfe jede Anforderung
                if (requirements.length) {
                    document.getElementById("length").style.display = "none";
                } else {
                    document.getElementById("length").style.display = "block";
                    document.getElementById("length").style.color = "red";
                }

                if (requirements.uppercase) {
                    document.getElementById("uppercase").style.display = "none";
                } else {
                    document.getElementById("uppercase").style.display = "block";
                    document.getElementById("uppercase").style.color = "red";
                }

                if (requirements.number) {
                    document.getElementById("number").style.display = "none";
                } else {
                    document.getElementById("number").style.display = "block";
                    document.getElementById("number").style.color = "red";
                }

                if (requirements.special) {
                    document.getElementById("special").style.display = "none";
                } else {
                    document.getElementById("special").style.display = "block";
                    document.getElementById("special").style.color = "red";
                }
            });

            // Formular-Validierung inklusive Datenschutz-Checkbox
            document.getElementById("register-form-mobile").addEventListener("submit", function(event) {
                var datenschutzCheckbox = document.getElementById("datenschutz_akzeptiert");
                var datenschutzError = document.getElementById("datenschutz-error");
                
                if (!datenschutzCheckbox.checked) {
                    event.preventDefault();
                    datenschutzError.style.display = "block";
                    return false;
                } else {
                    datenschutzError.style.display = "none";
                }
                
                // Hier kannst du weitere Validierungen hinzufügen wenn nötig
            });
        });
    </script>';
}
add_shortcode('yprint_registration_form_mobile', 'yprint_registration_form_mobile');

function yprint_enqueue_registration_script() {
    wp_add_inline_script('jquery', '
        document.addEventListener("DOMContentLoaded", function () {
            document.getElementById("register-form-mobile").addEventListener("submit", function (event) {
                event.preventDefault();

                const username = document.getElementById("user_login_mobile").value;
                const email = document.getElementById("user_email_mobile").value;
                const password = document.getElementById("user_password_mobile").value;
                const confirmPassword = document.getElementById("user_password_confirm_mobile").value;

                if (password !== confirmPassword) {
                    alert("Passwords do not match.");
                    return;
                }

                const data = {
                    username: username,
                    email: email,
                    password: password
                };

                fetch("' . esc_url(rest_url('wp/v2/users/register')) . '", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(data)
                })
                .then(response => response.json())
                .then(result => {
                    if (result.code === 200) {
                        // Überprüfen, ob die E-Mail erfolgreich gesendet wurde
                        if (result.email_sent === false) {
                            // Wenn die E-Mail nicht gesendet wurde, zur Login-Seite mit einem Parameter für Email-Probleme weiterleiten
                            window.location.href = "/login?verification_issue=1&user_id=" + result.user_id;
                        } else {
                            // Standardweiterleitung bei erfolgreicher Registrierung und E-Mail-Versand
                            window.location.href = "/login?verification_sent=1";
                        }
                    } else {
                        alert(result.message || "An error occurred.");
                    }
                })
                .catch(error => {
                    alert("An unexpected error occurred.");
                    console.error(error);
                });
            });
        });
    ');
}
add_action('wp_enqueue_scripts', 'yprint_enqueue_registration_script');

// -----------------------------------------------------------------------------------------------------------------

// Fügen Sie diesen Code zu Ihrer theme's functions.php hinzu oder in ein Site-spezifisches Plugin
function yprint_mobile_nav_toggle() {
    ?>
    <script>
    jQuery(document).ready(function($) {
        // Warten bis die Seite vollständig geladen ist
        $(window).on('load', function() {
            // Diese Funktion überprüft, ob das Menü geöffnet ist
            function isMenuOpen() {
                return window.location.hash === '#mobile-navigation' || 
                       window.location.search.indexOf('nav_open=1') !== -1;
            }
            
            // Finde alle Navigations-Buttons (es könnten mehrere sein)
            var $navButtons = $('a[href="#mobile-navigation"], a[href*="nav_open=1"]');
            console.log('Gefundene Nav-Buttons:', $navButtons.length);
            
            // Wenn wir Buttons gefunden haben
            if ($navButtons.length > 0) {
                // Speichere die originalen href-Werte
                $navButtons.each(function() {
                    $(this).data('original-href', $(this).attr('href'));
                });
                
                // Füge einen Event-Listener für Klicks hinzu, der NACH dem ursprünglichen Klick ausgeführt wird
                $navButtons.on('click', function(e) {
                    // Speichere eine Referenz auf den Button
                    var $clickedButton = $(this);
                    
                    // Überprüfe, ob das Menü bereits geöffnet ist
                    if (isMenuOpen()) {
                        console.log('Menü ist offen, schließe es');
                        // Verhindern Sie das Standard-Klick-Verhalten
                        e.preventDefault();
                        e.stopPropagation();
                        
                        // Wenn es offen ist, schließe es durch Neuladen der Seite ohne Parameter
                        var cleanUrl = window.location.protocol + '//' + window.location.host + 
                                    window.location.pathname;
                        
                        // Behalte andere Query-Parameter bei, falls vorhanden, aber entferne nav_open
                        var searchParams = new URLSearchParams(window.location.search);
                        searchParams.delete('nav_open');
                        
                        // Füge bereinigte Parameter hinzu, falls welche übrig sind
                        if (searchParams.toString()) {
                            cleanUrl += '?' + searchParams.toString();
                        }
                        
                        // Navigiere zur bereinigten URL
                        window.location.href = cleanUrl;
                        return false;
                    } else {
                        console.log('Menü ist geschlossen, lasse es öffnen');
                        // Wenn das Menü geschlossen ist, lasse das Standard-Verhalten zu
                        // Aber ändere den Text nach einer kurzen Verzögerung
                        setTimeout(function() {
                            if ($clickedButton.data('original-text')) {
                                $clickedButton.text('Menü schließen');
                            }
                        }, 500);
                        return true; // Lasse den normalen Klick durchlaufen
                    }
                });
                
                // Update Button-Text basierend auf Menü-Status
                function updateButtonsText() {
                    if (isMenuOpen()) {
                        $navButtons.each(function() {
                            // Speichere den originalen Text, falls wir ihn noch nicht gespeichert haben
                            var $btn = $(this);
                            if (!$btn.data('original-text') && $btn.text() !== 'Menü schließen') {
                                $btn.data('original-text', $btn.text());
                                console.log('Originaler Text gespeichert:', $btn.data('original-text'));
                            }
                            $btn.text('Menü schließen');
                        });
                    } else {
                        $navButtons.each(function() {
                            var $btn = $(this);
                            // Stelle den ursprünglichen Text wieder her, falls gespeichert
                            if ($btn.data('original-text')) {
                                $btn.text($btn.data('original-text'));
                            }
                        });
                    }
                }
                
                // Initialer Check und regelmäßiges Update
                setTimeout(updateButtonsText, 500);
                setInterval(updateButtonsText, 1000);
                
                console.log('Mobile Navigation Toggle initialisiert');
            }
        });
    });
    </script>
    <?php
}
add_action('wp_footer', 'yprint_mobile_nav_toggle', 999);

// -----------------------------------------------------------------------------------------------------------------

// Shortcode für die Navigation der rechtlichen Seiten
function legal_navigation_shortcode() {
    // Sammle alle rechtlichen Seiten in einem Array
    $legal_pages = array(
        'cookies' => array(
            'title' => 'Cookies',
            'id' => get_page_by_path('cookies')->ID,
            'icon' => 'cookie'
        ),
        'impressum' => array(
            'title' => 'Impressum',
            'id' => get_page_by_path('impressum')->ID,
            'icon' => 'info'
        ),
        'datenschutz' => array(
            'title' => 'Datenschutz',
            'id' => get_page_by_path('datenschutz')->ID,
            'icon' => 'shield'
        ),
        'rechtlicher-hinweis' => array(
            'title' => 'Rechtlicher Hinweis',
            'id' => get_page_by_path('rechtlicher-hinweis')->ID,
            'icon' => 'gavel'
        ),
        'gesetz-ueber-digitale-dienste' => array(
            'title' => 'Gesetz über digitale Dienste',
            'id' => get_page_by_path('gesetz-ueber-digitale-dienste')->ID,
            'icon' => 'globe'
        ),
        'produktsicherheitsverordnung' => array(
            'title' => 'Produktsicherheit',
            'id' => get_page_by_path('produktsicherheitsverordnung')->ID,
            'icon' => 'check-circle'
        ),
    );

    // Bestimme die aktuelle Seite
    $current_page_id = get_the_ID();
    $current_page_slug = get_post_field('post_name', get_post());

    // Speichere die vorherige URL in einer Session, falls sie nicht aus einer rechtlichen Seite kommt
    if (!isset($_SESSION)) {
        session_start();
    }

    $referer = wp_get_referer();
    if ($referer && !preg_match('/(cookies|impressum|datenschutz|rechtlicher-hinweis|gesetz-ueber-digitale-dienste|produktsicherheitsverordnung)/i', $referer)) {
        $_SESSION['previous_page'] = $referer;
    }

    // Wenn keine vorherige Seite in der Session gespeichert ist, setze Startseite als Standard
    if (!isset($_SESSION['previous_page'])) {
        $_SESSION['previous_page'] = home_url();
    }

    // Beginne mit dem Output-Buffering
    ob_start();
    ?>
    <!-- Google Fonts für Roboto -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <!-- Font Awesome für Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <div class="yprint-legal-container">
        <div class="yprint-legal-sidebar">
            <!-- Zurück-Button immer als erster Button -->
            <a href="<?php echo $_SESSION['previous_page']; ?>" class="yprint-legal-button yprint-back-button">
                <i class="fas fa-arrow-left"></i> Zurück
            </a>
            
            <!-- Navigation für rechtliche Seiten -->
            <div class="yprint-legal-nav-title">Rechtliche Informationen</div>
            
            <?php foreach ($legal_pages as $slug => $page): ?>
                <?php 
                // Prüfe, ob dies die aktuelle Seite ist
                $is_current = ($page['id'] == $current_page_id || $slug == $current_page_slug);
                $class = $is_current ? 'yprint-current-legal-page' : '';
                ?>
                <a href="<?php echo get_permalink($page['id']); ?>" class="yprint-legal-button <?php echo $class; ?>">
                    <i class="fas fa-<?php echo $page['icon']; ?>"></i> <?php echo $page['title']; ?>
                </a>
            <?php endforeach; ?>
            
            <!-- Logo im Footer -->
            <div class="yprint-legal-footer">
                <img src="https://yprint.de/wp-content/uploads/2025/02/120225-y-icon.svg" alt="yprint Logo" class="yprint-footer-logo">
            </div>
        </div>
        
        <style>
            .yprint-legal-container {
                font-family: 'Roboto', sans-serif;
                max-width: 1200px;
                margin: 0 auto 40px auto;
                padding: 0;
                display: flex;
                flex-direction: column;
            }

            .yprint-legal-sidebar {
                width: 100%;
                display: flex;
                flex-direction: column;
                gap: 10px;
                margin-bottom: 30px;
                padding: 20px;
                border-radius: 8px;
                background-color: #FFFFFF;
                border: 1px solid #CFCFCF;
            }

            .yprint-legal-nav-title {
                font-weight: bold;
                font-size: 16px;
                color: #555;
                margin: 10px 0;
                padding-left: 10px;
                border-left: 3px solid #0079FF;
            }

            .yprint-legal-button {
                display: flex;
                align-items: center;
                padding: 12px 15px;
                text-decoration: none;
                color: #333;
                background-color: #fff;
                border-radius: 6px;
                font-size: 15px;
                transition: all 0.3s ease;
                border: 1px solid #eee;
            }

            .yprint-legal-button:hover {
                background-color: #f0f7ff;
                border-color: #0079FF;
            }

            .yprint-legal-button i {
                margin-right: 10px;
                color: #0079FF;
                font-size: 18px;
                width: 20px;
                text-align: center;
            }

            /* Zurück-Button spezielles Styling */
            .yprint-back-button {
                background-color: #0079FF;
                color: white;
                border: none;
            }

            .yprint-back-button:hover {
                background-color: #0056b3;
            }

            .yprint-back-button i {
                color: white;
            }

            /* Hervorhebung der aktuellen Seite */
            .yprint-current-legal-page {
                background-color: #e6f2ff;
                border-color: #0079FF;
                font-size: 20px;
                font-weight: 700;
                color: #0079FF;
                padding: 15px;
                position: relative;
            }

            .yprint-current-legal-page::after {
                content: "";
                position: absolute;
                right: 15px;
                top: 50%;
                transform: translateY(-50%);
                width: 8px;
                height: 8px;
                border-radius: 50%;
                background-color: #0079FF;
            }

            .yprint-current-legal-page i {
                font-size: 22px;
            }

            /* Footer der Sidebar */
            .yprint-legal-footer {
                margin-top: 20px;
                padding-top: 20px;
                border-top: 1px solid #eee;
                display: flex;
                flex-direction: column;
                align-items: center;
            }

            .yprint-footer-logo {
                width: 50px;
                height: 50px;
                margin-bottom: 10px;
            }

            /* Responsive Anpassungen */
            @media (min-width: 768px) {
                .yprint-legal-container {
                    flex-direction: row;
                }
                
                .yprint-legal-sidebar {
                    width: 280px;
                    position: sticky;
                    top: 20px;
                    align-self: flex-start;
                }
            }
        </style>
    </div>
    <?php
    // Gib den gepufferten Inhalt zurück
    return ob_get_clean();
}
add_shortcode('legal_navigation', 'legal_navigation_shortcode');

// Diese Funktion ermöglicht die Speicherung der zurückliegenden URL
function start_session_for_legal_pages() {
    if (!session_id()) {
        session_start();
    }
}
add_action('init', 'start_session_for_legal_pages');

// Laden der Roboto Schriftart global
function add_roboto_font_for_legal_pages() {
    if (is_page(array('cookies', 'impressum', 'datenschutz', 'rechtlicher-hinweis', 'gesetz-ueber-digitale-dienste', 'produktsicherheitsverordnung'))) {
        wp_enqueue_style('roboto-font', 'https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');
    }
}
add_action('wp_enqueue_scripts', 'add_roboto_font_for_legal_pages');

// -----------------------------------------------------------------------------------------------------------------

/**
 * Add this code to your theme's functions.php file or a custom plugin
 */

/**
 * Add shortcode for CookieYes consent popup trigger button
 * 
 * @param array $atts Shortcode attributes
 * @param string $content Shortcode content
 * @return string HTML output
 */
function yprint_cookieyes_button_shortcode($atts, $content = null) {
    // Parse attributes
    $attributes = shortcode_atts(array(
        'class' => '',
        'text'  => 'Cookie Settings',
        'style' => '',
    ), $atts);
    
    // Generate unique ID
    $unique_id = 'cky-btn-' . uniqid();
    
    // Combine classes - include cky-banner-element class for automatic CookieYes detection
    $classes = 'cky-banner-element ' . esc_attr($attributes['class']);
    
    // Build button style
    $style = '';
    if ($attributes['style']) {
        $style = ' style="' . esc_attr($attributes['style']) . '"';
    }
    
    // Build the button HTML
    $button = '<button id="' . esc_attr($unique_id) . '" class="' . esc_attr($classes) . '"' . $style . '>';
    $button .= esc_html($attributes['text']);
    $button .= '</button>';
    
    return $button;
}
add_shortcode('cookieyes_button', 'yprint_cookieyes_button_shortcode');

add_action('wp_footer', 'replace_cookieyes_icon_with_cookie_bite', 999);

add_action('wp_footer', 'replace_cookieyes_icon_with_cookie_bite', 999);





add_action('wp_footer', 'replace_cookieyes_icon_with_cookie_bite', 999);
function replace_cookieyes_icon_with_cookie_bite() {
    ?>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        function checkAndReplaceIcon() {
            const revisitBtn = document.querySelector('[data-cky-tag="revisit-consent"] img');
            const buttonWrapper = document.querySelector('[data-cky-tag="revisit-consent"]');
            
            if (revisitBtn && buttonWrapper) {
                // Hintergrund transparent machen
                buttonWrapper.style.backgroundColor = 'transparent';
                buttonWrapper.style.border = 'none';
                buttonWrapper.style.boxShadow = 'none';
                
                // Das Bild-Element durch das Cookie-Bite-SVG ersetzen
                const cookieSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                cookieSvg.setAttribute('width', '40');
                cookieSvg.setAttribute('height', '40');
                cookieSvg.setAttribute('viewBox', '0 0 512 512');
                cookieSvg.setAttribute('fill', '#1b7cff');
                
                // Exakter Pfad für das Cookie-Bite-Icon
                const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                path.setAttribute('d', 'M257.5 27.6c-.8-5.4-4.9-9.8-10.3-10.6c-22.1-3.1-44.6 .9-64.4 11.4l-74 39.5C89.1 78.4 73.2 94.9 63.4 115L26.7 190.6c-9.8 20.1-13 42.9-9.1 64.9l14.5 82.8c3.9 22.1 14.6 42.3 30.7 57.9l60.3 58.4c16.1 15.6 36.6 25.6 58.7 28.7l83 11.7c22.1 3.1 44.6-.9 64.4-11.4l74-39.5c19.7-10.5 35.6-27 45.4-47.2l36.7-75.5c9.8-20.1 13-42.9 9.1-64.9c-.9-5.3-5.3-9.3-10.6-10.1c-51.5-8.2-92.8-47.1-104.5-97.4c-1.8-7.6-8-13.4-15.7-14.6c-54.6-8.7-97.7-52-106.2-106.8zM208 144a32 32 0 1 1 0 64 32 32 0 1 1 0-64zM144 336a32 32 0 1 1 64 0 32 32 0 1 1 -64 0zm224-64a32 32 0 1 1 0 64 32 32 0 1 1 0-64z');
                
                cookieSvg.appendChild(path);
                revisitBtn.parentNode.replaceChild(cookieSvg, revisitBtn);
                
                // Optional: Größe des Button-Wrappers anpassen
                buttonWrapper.style.padding = '8px';
                
                return true;
            }
            return false;
        }
        
        // Sofort versuchen, das Icon zu ersetzen
        if (!checkAndReplaceIcon()) {
            // Wenn nicht sofort möglich, MutationObserver verwenden
            const observer = new MutationObserver(function(mutations) {
                if (checkAndReplaceIcon()) {
                    // Icon wurde ersetzt, Observer kann beendet werden
                    observer.disconnect();
                }
            });
            
            // Gesamtes body-Element beobachten
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
            
            // Sicherheitsabbruch nach 10 Sekunden
            setTimeout(function() {
                observer.disconnect();
            }, 10000);
        }
    });
    </script>
    <?php
}

// Funktion zum WordPress-Hook hinzufügen
add_action('wp_footer', 'replace_cookieyes_icon_with_cookie_bite');

// -----------------------------------------------------------------------------------------------------------------

/**
 * YPrint Minimalist Cart Shortcode
 * 
 * Creates a minimalistic WooCommerce cart for popup display
 */

// Verhindere direkten Zugriff
if (!defined('ABSPATH')) {
    exit;
}

function yprint_minimalist_cart_shortcode() {
    // Puffer-Output starten
    ob_start();
    
    // Sicherstellen, dass WooCommerce aktiv ist
    if (!class_exists('WooCommerce')) {
        return '<p>WooCommerce ist nicht aktiviert.</p>';
    }
    
    // CSS für den minimalistischen Warenkorb
    ?>
    <style>
        .yprint-mini-cart {
            font-family: 'Helvetica Neue', Arial, sans-serif;
            max-width: 100%;
            margin: 0 auto;
        }
        .yprint-mini-cart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
            margin-bottom: 15px;
        }
        .yprint-mini-cart-title {
            font-size: 18px;
            font-weight: 600;
            margin: 0;
        }
        .yprint-mini-cart-count {
            background: #0079FF;
            color: #fff;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
        }
        .yprint-mini-cart-items {
            max-height: 300px;
            overflow-y: auto;
            margin-bottom: 15px;
        }
        .yprint-mini-cart-item {
            display: flex;
            padding: 10px 0;
            border-bottom: 1px solid #f5f5f5;
        }
        .yprint-mini-cart-item-image {
            width: 60px;
            margin-right: 10px;
        }
        .yprint-mini-cart-item-image img {
            max-width: 100%;
            height: auto;
            display: block;
        }
        .yprint-mini-cart-item-details {
            flex-grow: 1;
        }
        .yprint-mini-cart-item-title {
            font-size: 14px;
            margin: 0 0 5px;
        }
        .yprint-mini-cart-item-price {
            font-size: 14px;
            font-weight: 600;
        }
        .yprint-mini-cart-item-quantity-control {
            display: flex;
            align-items: center;
            margin-top: 5px;
        }
        
        .qty-btn {
    background: #f0f0f0;
    border: 1px solid #ddd;
    width: 25px;
    height: 25px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;c
    font-size: 14px;
    transition: all 0.2s ease;
    color: #0079FF;
}
.qty-btn:hover {
    background: #0079FF;
    color: white;
    border-color: #0079FF;
}
        }
        .qty-value {
            padding: 0 10px;
            font-size: 14px;
            min-width: 20px;
            text-align: center;
        }
        .yprint-mini-cart-item-remove {
            cursor: pointer;
            color: #999;
            font-size: 18px;
            line-height: 1;
            padding: 0 5px;
        }
        .yprint-mini-cart-item-remove:hover {
            color: #0079FF;
        }
        .yprint-mini-cart-subtotal {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            font-weight: 600;
            border-top: 1px solid #eee;
        }
        .yprint-mini-cart-checkout {
            display: block;
            width: 100%;
            background: #0079FF;
            color: #fff;
            border: none;
            padding: 12px 15px;
            font-size: 14px;
            font-weight: 600;
            text-align: center;
            text-decoration: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .yprint-mini-cart-checkout:hover {
            background: #0062cc;
        }
        .yprint-mini-cart-empty {
            text-align: center;
            padding: 20px 0;
            color: #777;
        }
    </style>
    <div class="yprint-mini-cart">
        <div class="yprint-mini-cart-header">
            <h3 class="yprint-mini-cart-title">Dein Warenkorb</h3>
            <div class="yprint-mini-cart-count"><?php echo WC()->cart->get_cart_contents_count(); ?></div>
        </div>
        
        <div class="yprint-mini-cart-items">
            <?php
            $cart_items = WC()->cart->get_cart();
            
            if (empty($cart_items)) {
                echo '<div class="yprint-mini-cart-empty">Dein Warenkorb ist leer.</div>';
            } else {
                foreach ($cart_items as $cart_item_key => $cart_item) {
                    $_product = apply_filters('woocommerce_cart_item_product', $cart_item['data'], $cart_item, $cart_item_key);
                    $product_id = apply_filters('woocommerce_cart_item_product_id', $cart_item['product_id'], $cart_item, $cart_item_key);
                    
                    if ($_product && $_product->exists() && $cart_item['quantity'] > 0) {
                        $product_name = $_product->get_name();
                        $thumbnail = $_product->get_image();
                        $product_price = WC()->cart->get_product_price($_product);
                        $product_quantity = $cart_item['quantity'];
                        ?>
                        <div class="yprint-mini-cart-item">
                            <div class="yprint-mini-cart-item-image">
                                <?php echo $thumbnail; ?>
                            </div>
                            <div class="yprint-mini-cart-item-details">
                                <h4 class="yprint-mini-cart-item-title"><?php echo $product_name; ?></h4>
                                <div class="yprint-mini-cart-item-price"><?php echo $product_price; ?></div>
                                <div class="yprint-mini-cart-item-quantity-control">
                                    <button class="qty-btn qty-minus" data-cart-item-key="<?php echo $cart_item_key; ?>" data-quantity="<?php echo max(1, $product_quantity-1); ?>">-</button>
                                    <span class="qty-value"><?php echo $product_quantity; ?></span>
                                    <button class="qty-btn qty-plus" data-cart-item-key="<?php echo $cart_item_key; ?>" data-quantity="<?php echo $product_quantity+1; ?>">+</button>
                                </div>
                            </div>
                            <div class="yprint-mini-cart-item-remove" data-cart-item-key="<?php echo $cart_item_key; ?>">×</div>
                        </div>
                        <?php
                    }
                }
            }
            ?>
        </div>
        
        <div class="yprint-mini-cart-subtotal">
            <span>Zwischensumme:</span>
            <span><?php echo WC()->cart->get_cart_subtotal(); ?></span>
        </div>
        
        <a href="https://yprint.de/checkout" class="yprint-mini-cart-checkout">Zur Kasse</a>
    </div>
    
    <script>
    (function($) {
        // Bei Laden des Shortcodes den Warenkorb aktualisieren
        $(document).ready(function() {
            $.ajax({
                url: wc_add_to_cart_params.ajax_url,
                type: 'POST',
                data: {
                    action: 'yprint_update_mini_cart'
                },
                success: function(response) {
                    if (response.fragments) {
                        $.each(response.fragments, function(key, value) {
                            $(key).replaceWith(value);
                        });
                    }
                }
            });
        });
        
        // Event-Handler für Entfernen-Button
        $(document).on('click', '.yprint-mini-cart-item-remove', function(e) {
            e.preventDefault();
            
            var cartItemKey = $(this).data('cart-item-key');
            
            $.ajax({
                url: wc_add_to_cart_params.ajax_url,
                type: 'POST',
                data: {
                    action: 'yprint_remove_from_cart',
                    cart_item_key: cartItemKey
                },
                success: function(response) {
                    if (response.fragments) {
                        $.each(response.fragments, function(key, value) {
                            $(key).replaceWith(value);
                        });
                    }
                    // Warenkorb neu laden
                    $('body').trigger('wc_fragment_refresh');
                }
            });
        });
        
        // Event-Handler für Mengenänderung
        $(document).on('click', '.qty-btn', function(e) {
            e.preventDefault();
            
            var cartItemKey = $(this).data('cart-item-key');
            var newQuantity = $(this).data('quantity');
            
            $.ajax({
                url: wc_add_to_cart_params.ajax_url,
                type: 'POST',
                data: {
                    action: 'yprint_update_cart_quantity',
                    cart_item_key: cartItemKey,
                    quantity: newQuantity
                },
                success: function(response) {
                    if (response.fragments) {
                        $.each(response.fragments, function(key, value) {
                            $(key).replaceWith(value);
                        });
                    }
                    // Warenkorb neu laden
                    $('body').trigger('wc_fragment_refresh');
                }
            });
        });
    })(jQuery);
    </script>
    <?php
    
    // Ajax-Actions für den Warenkorb registrieren
    add_action('wp_ajax_yprint_update_mini_cart', 'yprint_update_mini_cart');
    add_action('wp_ajax_nopriv_yprint_update_mini_cart', 'yprint_update_mini_cart');
    
    add_action('wp_ajax_yprint_remove_from_cart', 'yprint_remove_from_cart');
    add_action('wp_ajax_nopriv_yprint_remove_from_cart', 'yprint_remove_from_cart');

    add_action('wp_ajax_yprint_update_cart_quantity', 'yprint_update_cart_quantity');
    add_action('wp_ajax_nopriv_yprint_update_cart_quantity', 'yprint_update_cart_quantity');

    // Puffer-Output zurückgeben
    return ob_get_clean();
    }

// Ajax-Funktion zum Aktualisieren des Mini-Warenkorbs
function yprint_update_mini_cart() {
    ob_start();
    
    // Fragment definieren
    $fragments['.yprint-mini-cart'] = yprint_minimalist_cart_shortcode();
    
    // Antwort senden
    wp_send_json(array(
        'fragments' => $fragments
    ));
    
    die();
}

// Ajax-Funktion zum Entfernen eines Produkts aus dem Warenkorb
function yprint_remove_from_cart() {
    $cart_item_key = isset($_POST['cart_item_key']) ? sanitize_text_field($_POST['cart_item_key']) : '';
    
    if ($cart_item_key) {
        WC()->cart->remove_cart_item($cart_item_key);
    }
    
    ob_start();
    
    // Fragments definieren
    $fragments['.yprint-mini-cart'] = yprint_minimalist_cart_shortcode();
    
    // Antwort senden
    wp_send_json(array(
        'fragments' => $fragments
    ));
    
    die();
}

// Ajax-Funktion zum Aktualisieren der Produktmenge
function yprint_minimalist_cart_update_quantity() {
    $cart_item_key = isset($_POST['cart_item_key']) ? sanitize_text_field($_POST['cart_item_key']) : '';
    $quantity = isset($_POST['quantity']) ? intval($_POST['quantity']) : 1;
    
    if ($cart_item_key && $quantity > 0) {
        WC()->cart->set_quantity($cart_item_key, $quantity);
    }
    
    ob_start();
    
    // Fragments definieren
    $fragments['.yprint-mini-cart'] = yprint_minimalist_cart_shortcode();
    
    // Antwort senden
    wp_send_json(array(
        'fragments' => $fragments
    ));
    
    die();
}

// Shortcode registrieren
add_shortcode('yprint_minimalist_cart', 'yprint_minimalist_cart_shortcode');

// -----------------------------------------------------------------------------------------------------------------
function ss25_basic_shirt_add_to_cart_script() {
    ?>
    <script type="text/javascript">
    jQuery(document).ready(function($) {
        $('.ss25_basic_shirt').css('cursor', 'pointer').on('click', function() {
            // Standard WooCommerce AJAX-Aufruf zum Hinzufügen zum Warenkorb
            $.post(wc_add_to_cart_params.wc_ajax_url.toString().replace('%%endpoint%%', 'add_to_cart'), {
                product_id: 3799,
                quantity: 1
            }, function(response) {
                if (response) {
                    // WooCommerce Fragmente aktualisieren
                    $(document.body).trigger('wc_fragment_refresh');
                    
                    // Popup über den Link mit href="#cart" öffnen
                    setTimeout(function() {
                        // Richtige Selector verwenden
                        $('a[href="#cart"]')[0].click();
                    }, 500);
                }
            });
        });
    });
    </script>
    <?php
}
add_action('wp_footer', 'ss25_basic_shirt_add_to_cart_script', 99);
// -----------------------------------------------------------------------------------------------------------------

/**
 * YPrint Custom Checkout System - Teil 1: Hauptshortcode
 */

// Verhindern direkter Aufrufe
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Hauptshortcode für das gesamte Checkout-Layout
 */
function yprint_checkout_shortcode() {
    if (!function_exists('WC')) {
        return '<div class="yprint-error-message">WooCommerce ist nicht aktiviert.</div>';
    }

    // Überprüfen, ob Warenkorb leer ist
    if (WC()->cart->is_empty()) {
        return '<div class="yprint-empty-cart-message">Dein Warenkorb ist leer. <a href="javascript:history.back()">Zurück</a></div>';
    }

    // Checkout-Kommunikationssystem einbinden
    ob_start();
    echo do_shortcode('[yprint_checkout_communication]');
    
    ?>
    <div class="yprint-checkout-container">
        <div class="yprint-back-button-container">
            <a href="javascript:history.back()" class="yprint-back-button">← Zurück</a>
        </div>
        <div class="yprint-checkout-columns">

            <!-- Linke Spalte: Adressen und Zahlungsoptionen -->
            <div class="yprint-checkout-left">
                <div class="yprint-checkout-section">
                    <h2 class="yprint-section-title">Lieferadresse</h2>
                    <?php echo do_shortcode('[yprint_shipping_address]'); ?>
                </div>

                <div class="yprint-checkout-section">
                    <h2 class="yprint-section-title">Zahlungsmethode</h2>
                    <?php echo do_shortcode('[yprint_payment_options]'); ?>
                </div>
            </div>

            <!-- Rechte Spalte: Bestellübersicht und Checkout-Button -->
            <div class="yprint-checkout-right">
                <div class="yprint-checkout-section yprint-order-summary-section">
                    <?php echo do_shortcode('[yprint_order_summary]'); ?>
                </div>

                <div class="yprint-checkout-section">
                    <?php echo do_shortcode('[yprint_coupon_buy]'); ?>
                </div>
                
                <div class="yprint-checkout-section">
                    <?php echo do_shortcode('[yprint_different_billing]'); ?>
                </div>

                <!-- Datenschutz-Checkbox -->
                <div class="yprint-checkout-section yprint-privacy-section">
                    <div class="yprint-checkbox-group">
                        <input type="checkbox" id="privacy_checkbox" name="privacy_checkbox" required>
                        <label for="privacy_checkbox">Ich habe die <a href="https://yprint.de/datenschutz" target="_blank">Datenschutzerklärung</a> gelesen und akzeptiere diese.</label>
                    </div>
                    <div id="privacy_error" class="yprint-field-error" style="display: none;"></div>
                </div>
            </div>
        </div>
    </div>

    <?php
    
    // Checkout-CSS und JavaScript einbinden
    yprint_checkout_scripts_and_styles();
    
    return ob_get_clean();
}
add_shortcode('yprint_checkout', 'yprint_checkout_shortcode');

/**
 * CSS und JavaScript für den Checkout
 */
function yprint_checkout_scripts_and_styles() {
    ?>
    <style>
    .yprint-checkout-container {
        font-family: 'Roboto', -apple-system, sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        display: flex;
        flex-direction: column;
        min-height: 80vh;
        justify-content: center;
    }

    .yprint-checkout-columns {
        display: flex;
        flex-wrap: wrap;
        gap: 30px;
    }

    .yprint-checkout-left {
        flex: 1 1 50%;
        min-width: 300px;
    }

    .yprint-checkout-right {
        flex: 1 1 45%;
        min-width: 300px;
    }

    .yprint-checkout-section {
        margin-bottom: 30px;
        padding-bottom: 20px;
        border-bottom: 1px solid #f0f0f0;
    }

    .yprint-section-title {
        font-size: 24px;
        font-weight: 600;
        margin-bottom: 20px;
        color: #1d1d1f;
    }

    .yprint-checkbox-group {
        display: flex;
        align-items: flex-start;
        margin-bottom: 15px;
    }

    .yprint-checkbox-group input[type="checkbox"] {
        margin-right: 10px;
        margin-top: 3px;
    }

    .yprint-checkbox-group label {
        font-size: 14px;
        line-height: 1.4;
        color: #1d1d1f;
    }

    .yprint-checkbox-group a {
        color: #0079FF;
        text-decoration: none;
    }

    .yprint-checkbox-group a:hover {
        text-decoration: underline;
    }

    .yprint-field-error {
        color: #dc3545;
        font-size: 0.9em;
        margin-top: 5px;
    }

    .yprint-empty-cart-message, 
    .yprint-error-message {
        text-align: center;
        padding: 50px 20px;
        font-size: 18px;
    }

    .yprint-empty-cart-message a {
        color: #0079FF;
        text-decoration: none;
    }

    .yprint-validation-feedback {
        margin-top: 15px;
        padding: 10px;
        border-radius: 4px;
        display: none;
    }

    .yprint-validation-feedback.error {
        background-color: #fff2f2;
        border: 1px solid #ffcdd2;
        color: #d32f2f;
    }

    .yprint-validation-item {
        display: flex;
        align-items: center;
        gap: 8px;
        margin: 4px 0;
    }

    .yprint-validation-item::before {
        content: "•";
        color: #d32f2f;
    }

    .yprint-back-button-container {
    margin-bottom: 20px;
}

.yprint-back-button {
    display: inline-flex;
    align-items: center;
    color: #0079FF;
    text-decoration: none;
    font-weight: 500;
    transition: color 0.2s ease;
}

.yprint-back-button:hover {
    color: #0068e1;
}

    @media (max-width: 768px) {
        .yprint-checkout-columns {
            flex-direction: column;
        }
    }
    </style>

    <script>
    jQuery(document).ready(function($) {
        // Datenschutz-Validierung
        $(document).on('click', '#yprint_checkout_submit', function(e) {
            // Datenschutz-Checkbox prüfen
            if (!$('#privacy_checkbox').is(':checked')) {
                e.preventDefault();
                $('#privacy_error').text('Bitte akzeptiere die Datenschutzerklärung, um fortzufahren.').show();
                
                $('html, body').animate({
                    scrollTop: $('.yprint-privacy-section').offset().top - 100
                }, 500);
                
                return false;
            } else {
                $('#privacy_error').hide();
            }
        });
        
        // Fehlermeldung bei Änderung der Checkbox entfernen
        $('#privacy_checkbox').on('change', function() {
            if ($(this).is(':checked')) {
                $('#privacy_error').hide();
            }
        });
    });
    </script>
    <?php
}

/**
 * YPrint Checkout Communication System
 * 
 * System für die Datenkoordination zwischen den Shortcodes im Checkout
 */

// Verhindern direkter Aufrufe
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Checkout-Kommunikationssystem Shortcode
 */
function yprint_checkout_communication_shortcode() {
    ob_start();
    ?>
    <script>
    // YPrint Checkout Communication System
    const YPrintCheckoutSystem = {
        // Zentraler Datenspeicher
        state: {
            shippingAddress: {},
            billingAddress: {},
            differentBilling: { enabled: false },
            differentBillingAddress: {},
            paymentMethod: {},
            couponCode: {}
        },

        // Initialisierung
        init: function() {
            this.initializeState();
            this.setupEventListeners();
        },

        // Initialen State aus WooCommerce laden
        initializeState: function() {
            const user_id = '<?php echo get_current_user_id(); ?>';
            
            // AJAX-Aufruf um initiale Daten zu laden
            jQuery.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'yprint_get_checkout_state',
                    user_id: user_id,
                    security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
                },
                success: (response) => {
                    if (response.success) {
                        // Stellen sicher, dass different_billing immer als deaktiviert geladen wird
                        const data = {...response.data};
                        if (data.differentBilling) {
                            data.differentBilling.enabled = false;
                        }
                        this.state = {...this.state, ...data};
                        this.updateAllFields();
                        this.notifyStateChange();
                    }
                }
            });
        },

        // Event Listener Setup
        setupEventListeners: function() {
            const $ = jQuery;
            
            // Shipping Address Events
            $(document).on('change', '.yprint-shipping-field', (e) => {
                const field = e.target.name.replace('shipping_', '');
                const value = e.target.value;
                this.updateState('shippingAddress', {
                    [field]: value
                });
            });

            // Different Billing Events
            $(document).on('change', '#different_billing', (e) => {
                this.updateState('differentBilling', {
                    enabled: e.target.checked
                });
            });

            // Different Billing Address Events
            $(document).on('change', '.yprint-billing-field', (e) => {
                const field = e.target.name;
                const value = e.target.value;
                this.updateState('differentBillingAddress', {
                    [field]: value
                });
            });

            // Payment Method Events
            $(document).on('change', '[name="payment_method"]', (e) => {
                this.updateState('paymentMethod', {
                    method: e.target.value,
                    timestamp: Date.now()
                });
            });

            // Coupon Events
            $(document).on('change', '#coupon_code', (e) => {
                this.updateState('couponCode', {
                    code: e.target.value
                });
            });
        },

        // State Updates
        updateState: function(section, data) {
            if (!this.state[section]) {
                this.state[section] = {};
            }
            
            // Aktualisiere den jeweiligen Abschnitt im State
            this.state[section] = {
                ...this.state[section],
                ...data
            };
            
            this.saveState();
            this.notifyStateChange();
        },

        // Speichern des States
        saveState: function() {
            jQuery.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'yprint_save_checkout_state',
                    state: this.state,
                    security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
                },
                success: (response) => {
                    if (response.success) {
                        console.log('State saved successfully');
                    }
                }
            });
        },

        // Benachrichtigung über State-Änderungen
        notifyStateChange: function() {
            jQuery(document).trigger('checkoutStateUpdate', [this.state]);
        },

        // Formularvalidierung
        validateForm: function() {
            let isValid = true;
            const errors = [];
            
            // Validiere Lieferadresse
            if (!this.state.shippingAddress || !this.state.shippingAddress.address_1) {
                isValid = false;
                errors.push('Bitte gib eine Lieferadresse an');
            }
            
            // Validiere Zahlungsmethode
            if (!this.state.paymentMethod || !this.state.paymentMethod.method) {
                isValid = false;
                errors.push('Bitte wähle eine Zahlungsmethode aus');
            }

            // Validiere abweichende Rechnungsadresse falls aktiviert
            if (this.state.differentBilling && this.state.differentBilling.enabled) {
                if (!this.state.differentBillingAddress || !this.state.differentBillingAddress.different_billing_address_1) {
                    isValid = false;
                    errors.push('Bitte gib eine abweichende Rechnungsadresse an');
                }
            }
            
            return {
                isValid: isValid,
                errors: errors
            };
        },

        // State abrufen
        getState: function() {
            return this.state;
        },

        // Formulardaten sammeln
        getFormData: function() {
            return {
                shipping_address: this.state.shippingAddress,
                billing_address: this.state.billingAddress,
                different_billing: this.state.differentBilling ? this.state.differentBilling.enabled : false,
                different_billing_address: this.state.differentBillingAddress,
                payment_method: this.state.paymentMethod ? this.state.paymentMethod.method : '',
                coupon_code: this.state.couponCode ? this.state.couponCode.code : ''
            };
        },

        // Alle Felder aktualisieren
        updateAllFields: function() {
            const $ = jQuery;
            
            // Shipping Address Felder
            if (this.state.shippingAddress) {
                Object.entries(this.state.shippingAddress).forEach(([field, value]) => {
                    if (field !== 'slot' && field !== 'address' && field !== 'field') {
                        $(`[name="shipping_${field}"]`).val(value);
                    }
                });
            }

            // Different Billing Checkbox
            if (this.state.differentBilling && this.state.differentBilling.enabled !== undefined) {
                $('#different_billing').prop('checked', this.state.differentBilling.enabled);
                
                // Zeige/verstecke abweichende Adressfelder
                if (this.state.differentBilling.enabled) {
                    $('#different_billing_fields').show();
                } else {
                    $('#different_billing_fields').hide();
                }
            }

            // Different Billing Address Felder
            if (this.state.differentBillingAddress) {
                Object.entries(this.state.differentBillingAddress).forEach(([field, value]) => {
                    $(`[name="${field}"]`).val(value);
                });
            }

            // Payment Method
            if (this.state.paymentMethod && this.state.paymentMethod.method) {
                const paymentMethod = this.state.paymentMethod.method;
                $(`[name="payment_method"][value="${paymentMethod}"]`)
                    .prop('checked', true)
                    .closest('.yprint-payment-option')
                    .addClass('selected');
            }

            // Coupon Code
            if (this.state.couponCode && this.state.couponCode.code) {
                $('#coupon_code').val(this.state.couponCode.code);
            }
        },

        // Checkout-Prozess starten
        processCheckout: function() {
    const $ = jQuery;
    const checkoutData = this.getFormData();
    
    // Überprüfen, ob Privatsphäre-Checkbox aktiviert ist
    if (!$('#privacy_checkbox').is(':checked')) {
        $('#privacy_error').text('Bitte akzeptiere die Datenschutzerklärung, um fortzufahren.').show();
        
        $('html, body').animate({
            scrollTop: $('.yprint-privacy-section').offset().top - 100
        }, 500);
        
        return;
    }

    // Validierung vor dem Absenden
    const validation = this.validateForm();
    if (!validation.isValid) {
        // Fehler anzeigen
        $('.yprint-validation-feedback')
            .empty()
            .addClass('error');
            
        validation.errors.forEach(error => {
            $('.yprint-validation-feedback').append(
                $('<div class="yprint-validation-item"></div>').text(error)
            );
        });
        
        $('.yprint-validation-feedback').show();
        
        $('html, body').animate({
            scrollTop: $('.yprint-validation-feedback').offset().top - 100
        }, 500);
        
        return;
    }

    // Loading-State aktivieren
    $('#yprint_checkout_submit').addClass('loading');
    $('.yprint-validation-feedback').hide();
    
    // Debug-Ausgabe der Daten
    console.log('Checkout data being sent:', checkoutData);
    
    $.ajax({
        type: 'POST',
        url: '<?php echo admin_url('admin-ajax.php'); ?>',
        data: {
            action: 'yprint_process_checkout',
            checkout_data: checkoutData,
            security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
        },
        success: function(response) {
            console.log('AJAX response:', response);
            
            if (response.success) {
                // Weiterleitung zur Checkout-Seite
                window.location.href = response.data.redirect;
            } else {
                // Fehleranzeige
                $('.yprint-validation-feedback')
                    .empty()
                    .addClass('error')
                    .append($('<div class="yprint-validation-item"></div>')
                    .text(response.data.message || 'Ein Fehler ist aufgetreten. Bitte versuchen Sie es erneut.'))
                    .show();
                
                $('#yprint_checkout_submit').removeClass('loading');
                
                $('html, body').animate({
                    scrollTop: $('.yprint-validation-feedback').offset().top - 100
                }, 500);
            }
        },
        error: function(xhr, status, error) {
            console.error('AJAX-Fehler:', xhr.responseText, status, error);
            
            // Fehlerdetails anzeigen wenn vorhanden
            let errorMessage = 'Ein Fehler ist aufgetreten. Bitte versuchen Sie es erneut.';
            try {
                const response = JSON.parse(xhr.responseText);
                if (response && response.data && response.data.message) {
                    errorMessage = response.data.message;
                }
            } catch (e) {
                console.error('Fehler beim Parsen der Antwort:', e);
            }
            
            // Allgemeiner Fehler
            $('.yprint-validation-feedback')
                .empty()
                .addClass('error')
                .append($('<div class="yprint-validation-item"></div>')
                .text(errorMessage))
                .show();
            
            $('#yprint_checkout_submit').removeClass('loading');
        }
    });
}

    };

    // System initialisieren
    jQuery(document).ready(function() {
        YPrintCheckoutSystem.init();
    });
    </script>
    
    <!-- Validierungsfeedback Element -->
    <div class="yprint-validation-feedback" style="display: none;"></div>
    <?php
    
    return ob_get_clean();
}
add_shortcode('yprint_checkout_communication', 'yprint_checkout_communication_shortcode');

/**
 * YPrint Checkout AJAX-Handler
 * 
 * Handler für AJAX-Anfragen des Checkout-Systems
 */

// Verhindern direkter Aufrufe
if (!defined('ABSPATH')) {
    exit;
}

/**
 * AJAX-Handler für initiale Checkout-Daten
 */
function yprint_get_checkout_state() {
    check_ajax_referer('yprint-checkout-nonce', 'security');
    
    $user_id = isset($_POST['user_id']) ? intval($_POST['user_id']) : 0;
    
    if (function_exists('WC')) {
        // Kundendaten abrufen
        if ($user_id) {
            $customer = new WC_Customer($user_id);
            
            // Shipping Address
            $shipping = array(
                'first_name' => $customer->get_shipping_first_name(),
                'last_name' => $customer->get_shipping_last_name(),
                'address_1' => $customer->get_shipping_address_1(),
                'address_2' => $customer->get_shipping_address_2(),
                'postcode' => $customer->get_shipping_postcode(),
                'city' => $customer->get_shipping_city(),
                'country' => $customer->get_shipping_country() ?: 'DE'
            );
            
            // Billing Address
            $billing = array(
                'first_name' => $customer->get_billing_first_name(),
                'last_name' => $customer->get_billing_last_name(),
                'email' => $customer->get_billing_email(),
                'address_1' => $customer->get_billing_address_1(),
                'address_2' => $customer->get_billing_address_2(),
                'postcode' => $customer->get_billing_postcode(),
                'city' => $customer->get_billing_city(),
                'country' => $customer->get_billing_country() ?: 'DE'
            );
            
            // State zusammenbauen
            $state = array(
                'shippingAddress' => $shipping,
                'billingAddress' => $billing,
                'differentBilling' => array(
                    'enabled' => get_user_meta($user_id, 'different_billing_enabled', true) ?: false
                ),
                'paymentMethod' => array(
                    'method' => WC()->session ? WC()->session->get('chosen_payment_method') : ''
                ),
                'couponCode' => array(
                    'code' => ''
                )
            );
        } else {
            // Fallback für nicht eingeloggte Benutzer
            $state = array(
                'shippingAddress' => array('country' => 'DE'),
                'billingAddress' => array('country' => 'DE'),
                'differentBilling' => array('enabled' => false),
                'paymentMethod' => array('method' => ''),
                'couponCode' => array('code' => '')
            );
        }
        
        // Session-Daten überschreiben falls vorhanden
        if (WC()->session) {
            $session_state = WC()->session->get('yprint_checkout_state');
            if ($session_state) {
                $state = wp_parse_args($session_state, $state);
            }
        }
        
        wp_send_json_success($state);
    } else {
        wp_send_json_error('WooCommerce ist nicht aktiviert');
    }
}
add_action('wp_ajax_yprint_get_checkout_state', 'yprint_get_checkout_state');
add_action('wp_ajax_nopriv_yprint_get_checkout_state', 'yprint_get_checkout_state');

/**
 * AJAX-Handler für State-Speicherung
 */
function yprint_save_checkout_state() {
    check_ajax_referer('yprint-checkout-nonce', 'security');
    
    if (isset($_POST['state'])) {
        $state = $_POST['state'];
        $user_id = get_current_user_id();
        
        // State in user_meta speichern falls Benutzer eingeloggt ist
        if ($user_id) {
            update_user_meta($user_id, 'yprint_checkout_state', $state);
        }
        
        // State in WooCommerce Session speichern
        if (function_exists('WC') && WC()->session) {
            WC()->session->set('yprint_checkout_state', $state);
        }
        
        wp_send_json_success();
    } else {
        wp_send_json_error('Keine Daten zum Speichern vorhanden');
    }
}
add_action('wp_ajax_yprint_save_checkout_state', 'yprint_save_checkout_state');
add_action('wp_ajax_nopriv_yprint_save_checkout_state', 'yprint_save_checkout_state');

/**
 * AJAX-Handler für Checkout-Prozess
 */
function yprint_process_checkout() {
    check_ajax_referer('yprint-checkout-nonce', 'security');
    
    if (!isset($_POST['checkout_data'])) {
        wp_send_json_error(array(
            'message' => 'Keine Checkout-Daten vorhanden'
        ));
        return;
    }
    
    $checkout_data = $_POST['checkout_data'];
    
    // Validierung der Daten
    $errors = array();
    
    // Lieferadresse prüfen
    if (empty($checkout_data['shipping_address']) || empty($checkout_data['shipping_address']['address_1'])) {
        $errors[] = 'Bitte gib eine Lieferadresse an';
    }
    
    // Zahlungsmethode prüfen
    if (empty($checkout_data['payment_method'])) {
        $errors[] = 'Bitte wähle eine Zahlungsmethode aus';
    }
    
    // Abweichende Rechnungsadresse prüfen wenn aktiviert
$different_billing_enabled = isset($checkout_data['different_billing']) && 
($checkout_data['different_billing'] === true || 
 $checkout_data['different_billing'] === 'true' || 
 $checkout_data['different_billing'] === 1 || 
 $checkout_data['different_billing'] === '1');

error_log('Different billing value: ' . print_r($checkout_data['different_billing'], true));
error_log('Different billing enabled: ' . ($different_billing_enabled ? 'true' : 'false'));

if ($different_billing_enabled) {
$has_different_billing_address = !empty($checkout_data['different_billing_address']) && 
        !empty($checkout_data['different_billing_address']['different_billing_address_1']);
        
if (!$has_different_billing_address) {
$errors[] = 'Bitte gib eine abweichende Rechnungsadresse an';
}
}
    
    // Bei Fehlern abbrechen
    if (!empty($errors)) {
        wp_send_json_error(array(
            'message' => implode(', ', $errors)
        ));
        return;
    }

    try {
        // Daten in WooCommerce Session speichern
        if (function_exists('WC') && WC()->session) {
            WC()->session->set('yprint_checkout_data', $checkout_data);
            
            // Zahlungsmethode in WooCommerce Session speichern
            if (!empty($checkout_data['payment_method'])) {
                WC()->session->set('chosen_payment_method', $checkout_data['payment_method']);
            }
            
            // Gutscheincode anwenden falls vorhanden
            if (!empty($checkout_data['coupon_code'])) {
                $coupon_code = sanitize_text_field($checkout_data['coupon_code']);
                if (!WC()->cart->has_discount($coupon_code)) {
                    WC()->cart->apply_coupon($coupon_code);
                }
            }
            
            // Kundendaten speichern, wenn angemeldet
            $user_id = get_current_user_id();
            if ($user_id > 0 && !empty($checkout_data['shipping_address'])) {
                foreach ($checkout_data['shipping_address'] as $key => $value) {
                    if ($key !== 'slot' && $key !== 'timestamp') {
                        update_user_meta($user_id, 'shipping_' . $key, sanitize_text_field($value));
                    }
                }
            }
            
            // Bestellung erstellen
$order_id = create_woocommerce_order($checkout_data);

if ($order_id) {
    // Zur individuellen Thank You Page weiterleiten
    $redirect_url = 'https://yprint.de/thank-you/';
    
    // Warenkorb leeren
    WC()->cart->empty_cart();
    
    wp_send_json_success(array(
        'redirect' => $redirect_url
    ));
} else {
    wp_send_json_error(array(
        'message' => 'Die Bestellung konnte nicht erstellt werden.'
    ));
}

        } else {
            throw new Exception('WooCommerce Session ist nicht verfügbar');
        }
    } catch (Exception $e) {
        error_log('YPrint Checkout Error: ' . $e->getMessage());
        wp_send_json_error(array(
            'message' => 'Ein technischer Fehler ist aufgetreten: ' . $e->getMessage()
        ));
    }
}

/**
 * Erstellt eine WooCommerce-Bestellung aus den Checkout-Daten
 */
function create_woocommerce_order($checkout_data) {
    // Neues Bestellobjekt erstellen
    $order = wc_create_order();
    
    // Den aktuellen Benutzer explizit als Kunden für die Bestellung festlegen
    $user_id = get_current_user_id();
    if ($user_id > 0) {
        $order->set_customer_id($user_id);
    }
    
    // Produkte aus dem Warenkorb zur Bestellung hinzufügen
    foreach (WC()->cart->get_cart() as $cart_item_key => $cart_item) {
        // Produkt zur Bestellung hinzufügen
        $order->add_product(
            $cart_item['data'],
            $cart_item['quantity'],
            array(
                'subtotal' => $cart_item['line_subtotal'],
                'total' => $cart_item['line_total'],
                'subtotal_tax' => $cart_item['line_subtotal_tax'],
                'total_tax' => $cart_item['line_tax']
            )
        );
    }
    
    // Versandkosten hinzufügen
    foreach (WC()->shipping->get_packages() as $package_key => $package) {
        if (isset($package['rates'][WC()->session->get('chosen_shipping_methods')[$package_key]])) {
            $shipping_rate = $package['rates'][WC()->session->get('chosen_shipping_methods')[$package_key]];
            $item = new WC_Order_Item_Shipping();
            $item->set_shipping_rate($shipping_rate);
            $item->set_order_id($order->get_id());
            $item->save();
            $order->add_item($item);
        }
    }
    
    // Rabatte hinzufügen
    if (WC()->cart->get_coupon_discount_totals()) {
        foreach (WC()->cart->get_coupon_discount_totals() as $code => $amount) {
            $item = new WC_Order_Item_Coupon();
            $item->set_code($code);
            $item->set_discount($amount);
            $order->add_item($item);
        }
    }
    
    // Lieferadresse setzen
    if (!empty($checkout_data['shipping_address'])) {
        $order->set_shipping_first_name($checkout_data['shipping_address']['first_name'] ?? '');
        $order->set_shipping_last_name($checkout_data['shipping_address']['last_name'] ?? '');
        $order->set_shipping_address_1($checkout_data['shipping_address']['address_1'] ?? '');
        $order->set_shipping_address_2($checkout_data['shipping_address']['address_2'] ?? '');
        $order->set_shipping_city($checkout_data['shipping_address']['city'] ?? '');
        $order->set_shipping_postcode($checkout_data['shipping_address']['postcode'] ?? '');
        $order->set_shipping_country($checkout_data['shipping_address']['country'] ?? 'DE');
    }
    
    // Rechnungsadresse setzen
    if (!empty($checkout_data['different_billing']) && $checkout_data['different_billing'] && !empty($checkout_data['different_billing_address'])) {
        // Abweichende Rechnungsadresse verwenden
        $order->set_billing_first_name($checkout_data['different_billing_address']['different_billing_first_name'] ?? '');
        $order->set_billing_last_name($checkout_data['different_billing_address']['different_billing_last_name'] ?? '');
        $order->set_billing_email($checkout_data['different_billing_address']['different_billing_email'] ?? '');
        $order->set_billing_address_1($checkout_data['different_billing_address']['different_billing_address_1'] ?? '');
        $order->set_billing_address_2($checkout_data['different_billing_address']['different_billing_address_2'] ?? '');
        $order->set_billing_city($checkout_data['different_billing_address']['different_billing_city'] ?? '');
        $order->set_billing_postcode($checkout_data['different_billing_address']['different_billing_postcode'] ?? '');
        $order->set_billing_country($checkout_data['different_billing_address']['different_billing_country'] ?? 'DE');
    } else {
        // Lieferadresse als Rechnungsadresse verwenden
        $order->set_billing_first_name($checkout_data['shipping_address']['first_name'] ?? '');
        $order->set_billing_last_name($checkout_data['shipping_address']['last_name'] ?? '');
        $order->set_billing_email(wp_get_current_user()->user_email ?: '');
        $order->set_billing_address_1($checkout_data['shipping_address']['address_1'] ?? '');
        $order->set_billing_address_2($checkout_data['shipping_address']['address_2'] ?? '');
        $order->set_billing_city($checkout_data['shipping_address']['city'] ?? '');
        $order->set_billing_postcode($checkout_data['shipping_address']['postcode'] ?? '');
        $order->set_billing_country($checkout_data['shipping_address']['country'] ?? 'DE');
    }
    
    // Zahlungsmethode setzen
    if (!empty($checkout_data['payment_method'])) {
        $order->set_payment_method($checkout_data['payment_method']);
    }
    
    // Bestellsummen berechnen
    $order->calculate_totals();
    
    // Bestellung speichern und die ID zurückgeben
    $order->save();
    
    return $order->get_id();
}

add_action('wp_ajax_yprint_process_checkout', 'yprint_process_checkout');
add_action('wp_ajax_nopriv_yprint_process_checkout', 'yprint_process_checkout');

/**
 * AJAX-Handler für Zahlungsmethoden-Updates
 */
function yprint_update_payment_method() {
    if (!isset($_POST['payment_method'])) {
        wp_send_json_error('Keine Zahlungsmethode angegeben');
        return;
    }

    $payment_method = sanitize_text_field($_POST['payment_method']);
    
    // WooCommerce Session aktualisieren
    if (function_exists('WC') && WC()->session) {
        WC()->session->set('chosen_payment_method', $payment_method);
    }
    
    wp_send_json_success();
}
add_action('wp_ajax_yprint_update_payment_method', 'yprint_update_payment_method');
add_action('wp_ajax_nopriv_yprint_update_payment_method', 'yprint_update_payment_method');

/**
 * YPrint Shipping Address Shortcode
 * 
 * Shortcode für die Lieferadresse im Checkout
 */

// Verhindern direkter Aufrufe
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Shortcode für die Lieferadresse
 */
function yprint_shipping_address_shortcode() {
    if (!function_exists('WC')) {
        return 'WooCommerce ist nicht aktiviert.';
    }

    $user_id = get_current_user_id();
    
    // Primäre Adresse abrufen
    $customer = new WC_Customer($user_id);
    $primary_address = [
        'first_name' => $customer->get_shipping_first_name(),
        'last_name' => $customer->get_shipping_last_name(),
        'address_1' => $customer->get_shipping_address_1(),
        'address_2' => $customer->get_shipping_address_2(),
        'postcode' => $customer->get_shipping_postcode(),
        'city' => $customer->get_shipping_city(),
        'country' => $customer->get_shipping_country()
    ];

    // Zusätzliche Adressen abrufen
    $secondary_addresses = get_user_meta($user_id, 'yprint_additional_shipping_addresses', true) ?: [];
    
    // Aktuelle ausgewählte Adresse
    $current_slot = WC()->session ? WC()->session->get('yprint_selected_shipping_slot') : 'primary';
    if (!$current_slot) {
        $current_slot = 'primary';
    }

    ob_start();
    ?>
    <div class="yprint-shipping-address">
        <div class="yprint-address-selector">
            <h3>Lieferadresse auswählen</h3>
            <div class="yprint-address-slots">
                <!-- Primäre Adresse -->
                <div class="yprint-address-slot <?php echo ($current_slot === 'primary') ? 'active' : ''; ?>" 
                     data-slot="primary">
                    <span class="yprint-slot-title">Meine Lieferanschrift</span>
                    <?php if (!empty($primary_address['address_1'])): ?>
                    <span class="yprint-slot-preview">
                        <?php echo esc_html($primary_address['address_1'] . ', ' . $primary_address['postcode'] . ' ' . $primary_address['city']); ?>
                    </span>
                    <?php endif; ?>
                </div>

                <!-- Zusätzliche Adressen -->
                <?php foreach ($secondary_addresses as $index => $address): ?>
                    <div class="yprint-address-slot <?php echo ($current_slot === 'secondary_' . $index) ? 'active' : ''; ?>" 
                         data-slot="secondary_<?php echo $index; ?>">
                        <span class="yprint-slot-title">Lieferanschrift <?php echo ($index + 2); ?></span>
                        <?php if (!empty($address['address_1'])): ?>
                        <span class="yprint-slot-preview">
                            <?php echo esc_html($address['address_1'] . ', ' . $address['postcode'] . ' ' . $address['city']); ?>
                        </span>
                        <?php endif; ?>
                    </div>
                <?php endforeach; ?>

                <!-- Neue Adresse Button -->
                <?php if (count($secondary_addresses) < 2): ?>
                    <div class="yprint-address-slot yprint-new-slot" data-slot="new">
                        <span class="yprint-slot-title">+ Neue Lieferanschrift</span>
                    </div>
                <?php endif; ?>
            </div>
        </div>

        <div class="yprint-form-section">
            <input type="hidden" name="current_address_slot" id="current_address_slot" value="<?php echo esc_attr($current_slot); ?>">
            
            <div class="yprint-form-row">
                <input type="text" 
                       name="shipping_first_name" 
                       class="yprint-shipping-field"
                       placeholder="Vorname"
                       required>
                
                <input type="text" 
                       name="shipping_last_name" 
                       class="yprint-shipping-field"
                       placeholder="Name"
                       required>
            </div>

            <div class="yprint-form-row">
                <input type="text" 
                       name="shipping_address_1" 
                       class="yprint-shipping-field"
                       placeholder="Straße"
                       required>
                
                <input type="text" 
                       name="shipping_address_2" 
                       class="yprint-shipping-field"
                       placeholder="Hausnummer"
                       required>
            </div>

            <div class="yprint-form-row">
                <input type="text" 
                       name="shipping_postcode" 
                       class="yprint-shipping-field"
                       placeholder="PLZ"
                       required>
                
                <input type="text" 
                       name="shipping_city" 
                       class="yprint-shipping-field"
                       placeholder="Ort"
                       required>
            </div>

            <div class="yprint-form-row">
                <select name="shipping_country" class="yprint-shipping-field" required>
                    <?php
                    $countries_obj = new WC_Countries();
                    $countries = $countries_obj->get_shipping_countries();
                    $default_country = $primary_address['country'] ?: $countries_obj->get_base_country();
                    
                    foreach ($countries as $code => $name) {
                        echo '<option value="' . esc_attr($code) . '" ' . 
                             selected($default_country, $code, false) . '>' . 
                             esc_html($name) . '</option>';
                    }
                    ?>
                </select>
            </div>
        </div>
    </div>
    
    <style>
    .yprint-shipping-address {
        width: 100%;
        font-family: 'Roboto', sans-serif;
    }

    .yprint-address-selector {
        margin-bottom: 30px;
    }

    .yprint-address-selector h3 {
        font-size: 18px;
        margin-bottom: 15px;
        color: #333;
    }

    .yprint-address-slots {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .yprint-address-slot {
        padding: 15px 20px;
        border: 2px solid #e0e0e0;
        border-radius: 5px;
        cursor: pointer;
        transition: all 0.3s ease;
        background: white;
        color: #333;
        flex: 1;
        min-width: 200px;
        display: flex;
        flex-direction: column;
    }

    .yprint-slot-title {
        font-weight: 500;
        margin-bottom: 5px;
    }

    .yprint-slot-preview {
        font-size: 0.9em;
        color: #666;
    }

    .yprint-address-slot:hover {
        border-color: #2997FF;
        color: #2997FF;
    }

    .yprint-address-slot.active {
        border-color: #2997FF;
        background: #f0f6ff;
    }

    .yprint-new-slot {
        border-style: dashed;
        color: #2997FF;
        justify-content: center;
        align-items: center;
    }

    .yprint-form-section {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .yprint-form-row {
        display: flex;
        gap: 15px;
    }

    .yprint-form-row input,
    .yprint-form-row select {
        flex: 1;
        padding: 12px 15px;
        border: 1px solid #e0e0e0;
        border-radius: 6px;
        font-size: 1rem;
        background-color: #FFF;
        transition: all 0.3s ease;
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
    }

    .yprint-form-row select {
        background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23333' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'><polyline points='6 9 12 15 18 9'></polyline></svg>");
        background-repeat: no-repeat;
        background-position: right 12px center;
        padding-right: 40px;
        cursor: pointer;
    }

    .yprint-form-row input:focus,
    .yprint-form-row select:focus {
        border-color: #2997FF;
        box-shadow: 0 0 0 2px rgba(41, 151, 255, 0.1);
        outline: none;
    }

    .yprint-form-row input:hover,
    .yprint-form-row select:hover {
        border-color: #aaa;
    }

    .yprint-form-row select::-ms-expand {
        display: none;
    }

    .yprint-form-row input.error {
        border-color: #dc3545;
    }

    @media (max-width: 600px) {
        .yprint-form-row {
            flex-direction: column;
        }
        
        .yprint-form-row input,
        .yprint-form-row select {
            width: 100%;
        }

        .yprint-address-slot {
            min-width: 100%;
        }
    }
    </style>

    <script>
    jQuery(document).ready(function($) {
        const primaryAddress = <?php echo json_encode($primary_address); ?>;
        const secondaryAddresses = <?php echo json_encode($secondary_addresses); ?>;
        let currentSlot = '<?php echo esc_js($current_slot); ?>';

        // Adressdaten laden
        function loadAddressData(slot) {
            let addressData;
            
            if (slot === 'primary') {
                addressData = primaryAddress;
            } else if (slot === 'new') {
                $('.yprint-shipping-field').val('');
                return;
            } else {
                const index = slot.replace('secondary_', '');
                addressData = secondaryAddresses[index] || {};
            }

            // Felder füllen
            Object.entries(addressData).forEach(([key, value]) => {
                $(`[name="shipping_${key}"]`).val(value);
            });

            // YPrintCheckoutSystem aktualisieren
            if (typeof YPrintCheckoutSystem !== 'undefined') {
                YPrintCheckoutSystem.updateState('shippingAddress', {
                    slot: slot,
                    ...addressData
                });
            }
        }
        // Initiale Adresse laden
        loadAddressData(currentSlot);

        // Adress-Slot Auswahl
        $('.yprint-address-slot').click(function() {
            const slot = $(this).data('slot');
            
            $('.yprint-address-slot').removeClass('active');
            $(this).addClass('active');
            
            currentSlot = slot;
            $('#current_address_slot').val(slot);
            
            loadAddressData(slot);

            // Session aktualisieren
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'yprint_update_shipping_slot',
                    slot: slot,
                    security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
                }
            });
        });

        // Feldänderungen
        $('.yprint-shipping-field').on('change input', function() {
            const field = $(this).attr('name').replace('shipping_', '');
            const value = $(this).val();

            // YPrintCheckoutSystem aktualisieren
            if (typeof YPrintCheckoutSystem !== 'undefined') {
                YPrintCheckoutSystem.updateState('shippingAddress', {
                    [field]: value
                });
            }

            // Automatisches Speichern
            saveAddress();
        });

        // Adresse speichern
        function saveAddress() {
            const addressData = {};
            $('.yprint-shipping-field').each(function() {
                const field = $(this).attr('name').replace('shipping_', '');
                addressData[field] = $(this).val();
            });

            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'yprint_save_shipping_address',
                    slot: currentSlot,
                    address: addressData,
                    security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
                },
                success: function(response) {
                    if (response.success) {
                        // Adressvorschau aktualisieren
                        updateAddressPreview(currentSlot, addressData);
                    }
                }
            });
        }

        // Adressvorschau aktualisieren
        function updateAddressPreview(slot, address) {
            const $slot = $(`.yprint-address-slot[data-slot="${slot}"]`);
            const preview = `${address.address_1}, ${address.postcode} ${address.city}`;
            
            let $preview = $slot.find('.yprint-slot-preview');
            if (!$preview.length) {
                $preview = $('<span class="yprint-slot-preview"></span>').appendTo($slot);
            }
            $preview.text(preview);
        }

        // Auf State-Updates reagieren
        $(document).on('checkoutStateUpdate', function(e, state) {
            if (state.shippingAddress && state.shippingAddress.slot === currentSlot) {
                const address = state.shippingAddress;
                if (address) {
                    Object.entries(address).forEach(([field, value]) => {
                        if (field !== 'slot' && field !== 'timestamp') {
                            $(`[name="shipping_${field}"]`).val(value);
                        }
                    });
                }
            }
        });
    });
    </script>
    <?php
    
    return ob_get_clean();
}
add_shortcode('yprint_shipping_address', 'yprint_shipping_address_shortcode');

// AJAX Handler für Slot-Updates
function yprint_update_shipping_slot() {
    check_ajax_referer('yprint-checkout-nonce', 'security');
    
    if (isset($_POST['slot'])) {
        $slot = sanitize_text_field($_POST['slot']);
        
        if (function_exists('WC') && WC()->session) {
            WC()->session->set('yprint_selected_shipping_slot', $slot);
        }
        
        wp_send_json_success();
    }
    
    wp_send_json_error('Kein Slot angegeben');
}
add_action('wp_ajax_yprint_update_shipping_slot', 'yprint_update_shipping_slot');
add_action('wp_ajax_nopriv_yprint_update_shipping_slot', 'yprint_update_shipping_slot');

// AJAX Handler für Adress-Speicherung
function yprint_save_shipping_address() {
    check_ajax_referer('yprint-checkout-nonce', 'security');
    
    $user_id = get_current_user_id();
    $slot = isset($_POST['slot']) ? sanitize_text_field($_POST['slot']) : '';
    $address = isset($_POST['address']) ? $_POST['address'] : array();

    if (empty($slot) || empty($address)) {
        wp_send_json_error('Ungültige Daten');
        return;
    }

    if ($slot === 'primary') {
        // Primäre Adresse aktualisieren
        foreach ($address as $key => $value) {
            update_user_meta($user_id, "shipping_{$key}", sanitize_text_field($value));
        }
    } else if (strpos($slot, 'secondary_') === 0) {
        // Zusätzliche Adresse speichern
        $secondary_addresses = get_user_meta($user_id, 'yprint_additional_shipping_addresses', true) ?: array();
        $index = intval(str_replace('secondary_', '', $slot));
        $secondary_addresses[$index] = array_map('sanitize_text_field', $address);
        update_user_meta($user_id, 'yprint_additional_shipping_addresses', $secondary_addresses);
    } else if ($slot === 'new') {
        // Neue Adresse erstellen
        $secondary_addresses = get_user_meta($user_id, 'yprint_additional_shipping_addresses', true) ?: array();
        $secondary_addresses[] = array_map('sanitize_text_field', $address);
        update_user_meta($user_id, 'yprint_additional_shipping_addresses', $secondary_addresses);
    }

    wp_send_json_success();
}
add_action('wp_ajax_yprint_save_shipping_address', 'yprint_save_shipping_address');
add_action('wp_ajax_nopriv_yprint_save_shipping_address', 'yprint_save_shipping_address');

/**
 * YPrint Payment Options Shortcode
 * 
 * Shortcode für die Zahlungsmethoden im Checkout
 */

// Verhindern direkter Aufrufe
if (!defined('ABSPATH')) {
    exit;
}

function yprint_payment_options_shortcode() {
    if (!function_exists('WC')) {
        return 'WooCommerce ist nicht aktiviert.';
    }

    $available_gateways = WC()->payment_gateways()->get_available_payment_gateways();
    $chosen_payment_method = WC()->session ? WC()->session->get('chosen_payment_method') : '';

    ob_start();
    ?>
    <div class="yprint-payment-options">
        <div class="yprint-payment-grid">
            <?php if (!empty($available_gateways)) : ?>
                <?php foreach ($available_gateways as $gateway) : ?>
                    <div class="yprint-payment-option <?php echo ($chosen_payment_method == $gateway->id) ? 'selected' : ''; ?>" data-payment-id="<?php echo $gateway->id; ?>">
                        <input 
                            type="radio" 
                            id="payment_method_<?php echo $gateway->id; ?>" 
                            name="payment_method" 
                            value="<?php echo $gateway->id; ?>"
                            <?php checked($chosen_payment_method, $gateway->id); ?>
                            class="yprint-hidden-radio"
                            required
                        >
                        <label for="payment_method_<?php echo $gateway->id; ?>" class="yprint-payment-label">
                            <?php
                            $icon_class = '';
                            if (strpos($gateway->id, 'paypal') !== false) {
                                $icon_class = 'yprint-payment-icon yprint-icon-paypal';
                            } elseif (strpos($gateway->id, 'stripe') !== false || strpos($gateway->id, 'credit') !== false) {
                                $icon_class = 'yprint-payment-icon yprint-icon-card';
                            } elseif (strpos($gateway->id, 'bacs') !== false || strpos($gateway->id, 'bank') !== false) {
                                $icon_class = 'yprint-payment-icon yprint-icon-bank';
                            } elseif (strpos($gateway->id, 'cod') !== false || strpos($gateway->id, 'cash') !== false) {
                                $icon_class = 'yprint-payment-icon yprint-icon-cash';
                            } elseif (strpos($gateway->id, 'klarna') !== false) {
                                $icon_class = 'yprint-payment-icon yprint-icon-klarna';
                            } elseif (strpos($gateway->id, 'sofort') !== false) {
                                $icon_class = 'yprint-payment-icon yprint-icon-sofort';
                            } elseif (strpos($gateway->id, 'sepa') !== false) {
                                $icon_class = 'yprint-payment-icon yprint-icon-sepa';
                            } else {
                                $icon_class = 'yprint-payment-icon yprint-icon-default';
                            }
                            ?>
                            <div class="<?php echo $icon_class; ?>"></div>
                            <span class="yprint-payment-title"><?php echo $gateway->get_title(); ?></span>
                            <?php if ($gateway->has_fields() || $gateway->get_description()) : ?>
                                <div class="yprint-payment-description">
                                    <?php echo $gateway->get_description(); ?>
                                </div>
                            <?php endif; ?>
                        </label>
                    </div>
                <?php endforeach; ?>
            <?php else : ?>
                <p class="yprint-no-payment-methods">Keine Zahlungsmethoden verfügbar.</p>
            <?php endif; ?>
        </div>
    </div>

    <style>
    .yprint-payment-options {
        width: 100%;
        font-family: 'Roboto', sans-serif;
    }

    .yprint-payment-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 15px;
    }

    .yprint-payment-option {
        border: 2px solid #e0e0e0;
        border-radius: 5px;
        overflow: hidden;
        transition: all 0.3s ease;
        background: white;
    }

    .yprint-payment-option:hover {
        border-color: #2997FF;
    }

    .yprint-payment-option.selected {
        border-color: #2997FF;
        background-color: #f0f6ff;
    }

    .yprint-hidden-radio {
        position: absolute;
        opacity: 0;
        height: 0;
        width: 0;
    }

    .yprint-payment-label {
        display: block;
        padding: 15px;
        cursor: pointer;
        width: 100%;
        height: 100%;
    }

    .yprint-payment-icon {
        width: 40px;
        height: 40px;
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
        margin-bottom: 10px;
    }

    .yprint-icon-paypal {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="40" height="40"><path fill="%230070E0" d="M19.2,5.4c-0.5-0.5-1.1-1-1.8-1.2C16.5,4,15.6,3.9,14.7,3.9H9.6c-0.5,0-0.9,0.3-1,0.8L6.3,16c-0.1,0.3,0.2,0.6,0.5,0.6h3.5l0.3-1.7v0.1c0.1-0.5,0.5-0.8,1-0.8h2.1c3,0,5.3-1.2,6-4.5c0-0.1,0-0.2,0.1-0.3c0.2-1.3,0-2.2-0.6-3"></path><path fill="%231F264F" d="M9.3,7.9c0.1-0.4,0.3-0.7,0.6-0.9C10.1,6.9,10.4,6.8,10.7,6.8l4.3,0c0.5,0,1,0.1,1.4,0.2c0.1,0,0.2,0.1,0.3,0.1c0.1,0,0.2,0.1,0.3,0.1c0.1,0,0.2,0.1,0.2,0.1c0.1,0,0.2,0.1,0.2,0.1c0.3,0.1,0.5,0.3,0.7,0.5c0.5-2.9-0.02-4.9-1.7-6.7C14.9-0.3,12.2,0,10,0H3.6C3,0,2.5,0.4,2.4,1L0,17.2c-0.1,0.5,0.3,1,0.8,1h6l1.5-9.3L9.3,7.9z"></path></svg>');
    }

    .yprint-icon-card {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="40" height="40"><path fill="%231F264F" d="M20,4H4C2.9,4,2,4.9,2,6v12c0,1.1,0.9,2,2,2h16c1.1,0,2-0.9,2-2V6C22,4.9,21.1,4,20,4z M20,18H4V12h16V18z M20,8H4V6h16V8z"></path><path fill="%231F264F" d="M6,14h4v2H6V14z M12,14h6v2h-6V14z"></path></svg>');
    }

    .yprint-icon-bank {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="40" height="40"><path fill="%231F264F" d="M12,3L2,8v2h20V8L12,3z M4,12h4v6H4V12z M10,12h4v6h-4V12z M16,12h4v6h-4V12z M2,20v2h20v-2H2z"></path></svg>');
    }

    .yprint-icon-cash {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="40" height="40"><path fill="%231F264F" d="M11,8v3H9v2h2v2H9v2h2v3h2v-3h2v-2h-2v-2h2v-2h-2V8H11z M21,4H3C1.9,4,1,4.9,1,6v12c0,1.1,0.9,2,2,2h18c1.1,0,2-0.9,2-2V6C23,4.9,22.1,4,21,4z M21,18H3V6h18V18z"></path></svg>');
    }

    .yprint-icon-klarna {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="40" height="40"><path fill="%23FFB3C7" d="M12,2C6.5,2,2,6.5,2,12s4.5,10,10,10s10-4.5,10-10S17.5,2,12,2z M12,20c-4.4,0-8-3.6-8-8s3.6-8,8-8s8,3.6,8,8S16.4,20,12,20z"></path><path fill="%23FFB3C7" d="M12,6c-1.1,0-2,0.9-2,2v8c0,1.1,0.9,2,2,2s2-0.9,2-2V8C14,6.9,13.1,6,12,6z"></path></svg>');
    }

    .yprint-icon-sofort {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="40" height="40"><path fill="%23EB6F93" d="M12,2C6.5,2,2,6.5,2,12s4.5,10,10,10s10-4.5,10-10S17.5,2,12,2z M15.5,15.5h-7v-7h7V15.5z"></path><path fill="%23EB6F93" d="M10.5,10.5h3v3h-3V10.5z"></path></svg>');
    }

    .yprint-icon-sepa {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="40" height="40"><path fill="%231F264F" d="M4,4h16c1.1,0,2,0.9,2,2v12c0,1.1-0.9,2-2,2H4c-1.1,0-2-0.9-2-2V6C2,4.9,2.9,4,4,4z M4,6v12h16V6H4z"></path><path fill="%231F264F" d="M6,10h12v2H6V10z M6,14h8v2H6V14z"></path></svg>');
    }

    .yprint-icon-default {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="40" height="40"><path fill="%231F264F" d="M20,4H4C2.9,4,2,4.9,2,6v12c0,1.1,0.9,2,2,2h16c1.1,0,2-0.9,2-2V6C22,4.9,21.1,4,20,4z M20,18H4V6h16V18z"></path><path fill="%231F264F" d="M13,15h4v2h-4V15z M11,11H7v2h4V11z M15,11h2v2h-2V11z"></path></svg>');
    }

    .yprint-payment-title {
        display: block;
        font-weight: 600;
        margin-bottom: 5px;
        font-size: 1rem;
    }

    .yprint-payment-description {
        font-size: 0.85rem;
        color: #666;
        margin-top: 8px;
        display: none;
    }

    .yprint-payment-option.selected .yprint-payment-description {
        display: block;
    }

    .yprint-payment-option.error {
        animation: yprint-shake 0.5s;
        border-color: #dc3545;
    }

    @keyframes yprint-shake {
        0%, 100% { transform: translateX(0); }
        25% { transform: translateX(-5px); }
        75% { transform: translateX(5px); }
    }

    .yprint-no-payment-methods {
        text-align: center;
        color: #dc3545;
        padding: 20px;
        border: 1px solid #dc3545;
        border-radius: 4px;
        grid-column: 1 / -1;
    }

    @media (max-width: 600px) {
        .yprint-payment-grid {
            grid-template-columns: 1fr;
        }
    }
    </style>

    <script>
    jQuery(document).ready(function($) {
        const $paymentOptions = $('.yprint-payment-option');
        const $paymentInputs = $('input[name="payment_method"]');
        
        // Initial State setzen
        const initialPayment = $('input[name="payment_method"]:checked').val();
        if (initialPayment) {
            // YPrintCheckoutSystem aktualisieren wenn verfügbar
            if (typeof YPrintCheckoutSystem !== 'undefined') {
                YPrintCheckoutSystem.updateState('paymentMethod', {
                    method: initialPayment,
                    timestamp: Date.now()
                });
            }
        }

        // Zahlungsmethode ändern
        $paymentInputs.on('change', function() {
            const $selectedOption = $(this).closest('.yprint-payment-option');
            
            // UI Update
            $paymentOptions.removeClass('selected');
            $selectedOption.addClass('selected');
            
            // Fehlerklasse entfernen
            $paymentOptions.removeClass('error');
            
            // YPrintCheckoutSystem aktualisieren wenn verfügbar
            if (typeof YPrintCheckoutSystem !== 'undefined') {
                YPrintCheckoutSystem.updateState('paymentMethod', {
                    method: this.value,
                    timestamp: Date.now()
                });
            }

            // WooCommerce Session aktualisieren
            updateWooCommercePayment(this.value);
        });

        // Click auf das gesamte Payment Option Element
        $paymentOptions.on('click', function(e) {
            if (!$(e.target).is('input')) {
                $(this).find('input[type="radio"]').prop('checked', true).trigger('change');
            }
        });

        // WooCommerce Payment Update
        function updateWooCommercePayment(method) {
            $.ajax({
                type: 'POST',
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                data: {
                    action: 'yprint_update_payment_method',
                    payment_method: method,
                    security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
                },
                success: function(response) {
                    if (response.success) {
                        $(document.body).trigger('payment_method_selected');
                    }
                }
            });
        }

        // Auf State-Updates reagieren wenn YPrintCheckoutSystem verfügbar
        $(document).on('checkoutStateUpdate', function(e, state) {
            if (state && state.paymentMethod && state.paymentMethod.method) {
                const $radio = $(`input[value="${state.paymentMethod.method}"]`);
                if (!$radio.is(':checked')) {
                    $radio.prop('checked', true).trigger('change');
                }
            }
        });

        // Fehlerbehandlung
        $(document).on('checkout_error', function() {
            if (!$paymentInputs.filter(':checked').length) {
                $paymentOptions.addClass('error');
                $('html, body').animate({
                    scrollTop: $('.yprint-payment-options').offset().top - 100
                }, 500);
            }
        });

        // Validierung vor Submit
        $(document).on('checkout_place_order', function() {
            if (!$paymentInputs.filter(':checked').length) {
                $paymentOptions.addClass('error');
                return false;
            }
            return true;
        });
    });
    </script>
    <?php
    
    return ob_get_clean();
}
add_shortcode('yprint_payment_options', 'yprint_payment_options_shortcode');

/**
 * YPrint Different Billing Shortcode
 * 
 * Shortcode für die abweichende Rechnungsadresse im Checkout
 */

// Verhindern direkter Aufrufe
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Shortcode für abweichende Rechnungsadresse
 */
function yprint_different_billing_shortcode() {
    if (!function_exists('WC')) {
        return 'WooCommerce ist nicht aktiviert.';
    }

    // Aktuelle Benutzerdaten abrufen
    $user_id = get_current_user_id();
    
    // WooCommerce Billing Felder abrufen
    $different_billing_first_name = get_user_meta($user_id, 'billing_first_name', true);
    $different_billing_last_name = get_user_meta($user_id, 'billing_last_name', true);
    $different_billing_email = get_user_meta($user_id, 'billing_email', true);
    $different_billing_address_1 = get_user_meta($user_id, 'billing_address_1', true);
    $different_billing_address_2 = get_user_meta($user_id, 'billing_address_2', true);
    $different_billing_postcode = get_user_meta($user_id, 'billing_postcode', true);
    $different_billing_city = get_user_meta($user_id, 'billing_city', true);
    $different_billing_country = get_user_meta($user_id, 'billing_country', true);
    $different_billing_enabled = false; // Immer als deaktiviert starten

    ob_start();
    ?>
    <div class="yprint-different-billing">
        <div class="yprint-checkbox-group">
            <input type="checkbox" 
                   id="different_billing" 
                   name="different_billing" 
                   class="yprint-billing-toggle"
                   <?php checked($different_billing_enabled, true); ?> />
            <label for="different_billing">Abweichende Rechnungsadresse</label>
        </div>
        
        <div id="different_billing_fields" class="yprint-conditional-fields" style="display: <?php echo $different_billing_enabled ? 'block' : 'none'; ?>;">
            <div class="yprint-form-row">
                <input type="text" 
                       name="different_billing_first_name" 
                       placeholder="Vorname" 
                       value="<?php echo esc_attr($different_billing_first_name); ?>" 
                       class="yprint-billing-field" />
                
                <input type="text" 
                       name="different_billing_last_name" 
                       placeholder="Name" 
                       value="<?php echo esc_attr($different_billing_last_name); ?>" 
                       class="yprint-billing-field" />
            </div>

            <div class="yprint-form-row">
                <input type="email" 
                       name="different_billing_email" 
                       placeholder="E-Mail" 
                       value="<?php echo esc_attr($different_billing_email); ?>" 
                       class="yprint-billing-field" />
            </div>

            <div class="yprint-form-row">
                <input type="text" 
                       name="different_billing_address_1" 
                       placeholder="Straße" 
                       value="<?php echo esc_attr($different_billing_address_1); ?>" 
                       class="yprint-billing-field" />
                
                <input type="text" 
                       name="different_billing_address_2" 
                       placeholder="Hausnummer" 
                       value="<?php echo esc_attr($different_billing_address_2); ?>" 
                       class="yprint-billing-field" />
            </div>

            <div class="yprint-form-row">
                <input type="text" 
                       name="different_billing_postcode" 
                       placeholder="PLZ" 
                       value="<?php echo esc_attr($different_billing_postcode); ?>" 
                       class="yprint-billing-field" />
                
                <input type="text" 
                       name="different_billing_city" 
                       placeholder="Ort" 
                       value="<?php echo esc_attr($different_billing_city); ?>" 
                       class="yprint-billing-field" />
            </div>

            <div class="yprint-form-row">
                <select name="different_billing_country" class="yprint-billing-field">
                    <?php
                    $countries_obj = new WC_Countries();
                    $countries = $countries_obj->get_countries();
                    $default_country = $different_billing_country ?: $countries_obj->get_base_country();
                    
                    foreach ($countries as $code => $name) {
                        echo '<option value="' . esc_attr($code) . '" ' . 
                             selected($default_country, $code, false) . '>' . 
                             esc_html($name) . '</option>';
                    }
                    ?>
                </select>
            </div>
        </div>
    </div>
    
    <style>
    .yprint-different-billing {
        width: 100%;
        font-family: 'Roboto', sans-serif;
    }

    .yprint-checkbox-group {
        display: flex;
        align-items: center;
        margin-bottom: 15px;
        color: #1d1d1f;
        cursor: pointer;
    }

    .yprint-checkbox-group a {
        color: #2997FF;
        text-decoration: none;
    }

    .yprint-checkbox-group a:hover {
        text-decoration: underline;
    }

    .yprint-checkbox-group input[type="checkbox"] {
        margin-right: 10px;
    }

    .yprint-conditional-fields {
        margin-top: 15px;
    }

    .yprint-form-row {
        display: flex;
        gap: 15px;
        margin-bottom: 15px;
    }

    .yprint-form-row input,
    .yprint-form-row select {
        flex: 1;
        padding: 10px;
        border: 1px solid #e0e0e0;
        border-radius: 4px;
        font-family: 'Roboto', sans-serif;
    }

    .yprint-form-row input:focus,
    .yprint-form-row select:focus {
        border-color: #2997FF;
        outline: none;
    }

    @media (max-width: 600px) {
        .yprint-form-row {
            flex-direction: column;
        }
        
        .yprint-form-row input,
        .yprint-form-row select {
            width: 100%;
        }
    }
    </style>

    <script>
    jQuery(document).ready(function($) {
        const checkbox = $('#different_billing');
        const fieldsContainer = $('#different_billing_fields');
        const hasExistingData = <?php echo !empty($different_billing_first_name) || 
                                         !empty($different_billing_last_name) || 
                                         !empty($different_billing_email) ? 'true' : 'false'; ?>;
        
        // Force unchecked state
        checkbox.prop('checked', false);
        fieldsContainer.hide();

        // Toggle Felder
        checkbox.change(function() {
            if (this.checked) {
                fieldsContainer.slideDown(300);
            } else {
                fieldsContainer.slideUp(300);
            }

            // Update YPrintCheckoutSystem
            if (typeof YPrintCheckoutSystem !== 'undefined') {
                YPrintCheckoutSystem.updateState('differentBilling', {
                    enabled: this.checked
                });
            }
            
            // Metadaten aktualisieren
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'yprint_update_different_billing_enabled',
                    enabled: this.checked ? 1 : 0,
                    security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
                }
            });
        });

        // Feldänderungen
        $('.yprint-billing-field').on('change', function() {
            // Update YPrintCheckoutSystem
            if (typeof YPrintCheckoutSystem !== 'undefined') {
                YPrintCheckoutSystem.updateState('differentBillingAddress', {
                    [this.name]: this.value
                });
            }
            
            // Metadaten aktualisieren
            saveBillingAddress();
        });

        // Adresse speichern
        function saveBillingAddress() {
            const addressData = {};
            $('.yprint-billing-field').each(function() {
                addressData[$(this).attr('name')] = $(this).val();
            });
            
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'yprint_save_different_billing_address',
                    address: addressData,
                    security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
                }
            });
        }

        // Auf State-Updates reagieren
        $(document).on('checkoutStateUpdate', function(e, state) {
            if (state && state.differentBillingAddress) {
                Object.entries(state.differentBillingAddress).forEach(([field, value]) => {
                    $(`[name="${field}"]`).val(value);
                });
            }
            
            // Wir ignorieren den State für die Checkbox und behalten den initialen Zustand bei
            // Immer deaktiviert bleiben, es sei denn, der Benutzer aktiviert es manuell
        });
    });
    </script>

    <?php
    return ob_get_clean();
}
add_shortcode('yprint_different_billing', 'yprint_different_billing_shortcode');

// AJAX Handler für Different Billing Toggle
function yprint_update_different_billing_enabled() {
    check_ajax_referer('yprint-checkout-nonce', 'security');
    
    $user_id = get_current_user_id();
    $enabled = isset($_POST['enabled']) ? (bool)$_POST['enabled'] : false;
    
    update_user_meta($user_id, 'different_billing_enabled', $enabled);
    wp_send_json_success();
}
add_action('wp_ajax_yprint_update_different_billing_enabled', 'yprint_update_different_billing_enabled');
add_action('wp_ajax_nopriv_yprint_update_different_billing_enabled', 'yprint_update_different_billing_enabled');

// AJAX Handler für Different Billing Adresse
function yprint_save_different_billing_address() {
    check_ajax_referer('yprint-checkout-nonce', 'security');
    
    $user_id = get_current_user_id();
    $address = isset($_POST['address']) ? $_POST['address'] : array();
    
    if ($address) {
        foreach ($address as $key => $value) {
            // Konvertieren von different_billing_* zu billing_*
            $meta_key = str_replace('different_billing_', 'billing_', $key);
            update_user_meta($user_id, $meta_key, sanitize_text_field($value));
        }
    }
    
    wp_send_json_success();
}
add_action('wp_ajax_yprint_save_different_billing_address', 'yprint_save_different_billing_address');
add_action('wp_ajax_nopriv_yprint_save_different_billing_address', 'yprint_save_different_billing_address');

/**
 * YPrint Order Summary Shortcode
 * 
 * Shortcode für die Bestellübersicht im Checkout
 */

// Verhindern direkter Aufrufe
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Shortcode für die Bestellübersicht
 */
function yprint_order_summary_shortcode() {
    if (!function_exists('WC')) {
        return 'WooCommerce ist nicht aktiviert.';
    }

    ob_start();
    ?>
    <div class="yprint-order-summary" id="yprint-order-summary">
        <h3 class="yprint-summary-title">Warenkorb</h3>
        
        <?php 
        foreach (WC()->cart->get_cart() as $cart_item_key => $cart_item) {
            $_product = apply_filters('woocommerce_cart_item_product', $cart_item['data'], $cart_item, $cart_item_key);
            
            $thumbnail = $_product->get_image('thumbnail', array('class' => 'yprint-item-image'));
            $product_name = apply_filters('woocommerce_cart_item_name', $_product->get_name(), $cart_item, $cart_item_key);
            $price = $cart_item['line_total'];
            $product_id = $_product->get_id();
            ?>
            <div class="yprint-order-item" data-cart-item-key="<?php echo esc_attr($cart_item_key); ?>" data-product-id="<?php echo esc_attr($product_id); ?>">
                <?php echo $thumbnail; ?>
                <div class="yprint-item-details">
                    <span class="yprint-item-title"><?php echo $product_name; ?></span>
                    <div class="yprint-item-quantity-wrapper">
    <button class="yprint-item-quantity-btn yprint-item-quantity-minus" data-cart-item-key="<?php echo esc_attr($cart_item_key); ?>">−</button>
    <input 
        type="number" 
        id="yprint-qty-<?php echo esc_attr($cart_item_key); ?>"
        class="yprint-item-quantity-input"
        data-cart-item-key="<?php echo esc_attr($cart_item_key); ?>"
        value="<?php echo esc_attr($cart_item['quantity']); ?>"
        min="1"
        style="border: none; width: 30px; padding: 0; text-align: center; background: transparent;"
    >
    <button class="yprint-item-quantity-btn yprint-item-quantity-plus" data-cart-item-key="<?php echo esc_attr($cart_item_key); ?>">+</button>
</div>
                </div>
                <span class="yprint-item-total"><?php echo wc_price($price); ?></span>
            </div>
            <?php 
        } 
        ?>

        <div class="yprint-summary-totals">
        <div class="yprint-subtotal">
            <span>Zwischensumme</span>
            <span><?php echo WC()->cart->get_cart_subtotal(); ?></span>
        </div>
        <div class="yprint-shipping">
            <span>Versand</span>
            <span><?php echo WC()->cart->get_cart_shipping_total(); ?></span>
        </div>
        <?php if (WC()->cart->get_discount_total() > 0) : ?>
        <div class="yprint-discount">
            <span>Rabatt</span>
            <span>-<?php echo wc_price(WC()->cart->get_discount_total()); ?></span>
        </div>
        <?php endif; ?>
        <div class="yprint-total">
            <span>Gesamtsumme</span>
            <span><?php echo WC()->cart->get_total(); ?></span>
        </div>
    </div>
</div>

<style>
.yprint-order-summary {
    width: 100%;
    font-family: 'Roboto', sans-serif;
}

.yprint-summary-title {
    text-transform: none;
    font-size: 24px;
    font-weight: 600;
    margin-bottom: 20px;
    color: #1d1d1f;
}

.yprint-order-item {
    display: flex;
    align-items: center;
    gap: 16px;
    margin-bottom: 16px;
    padding-bottom: 16px;
    border-bottom: 1px solid #f5f5f7;
    position: relative;
}

.yprint-item-image {
    width: 64px;
    height: 64px;
    object-fit: cover;
    border-radius: 4px;
}

.yprint-item-details {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
}

.yprint-item-title {
    font-weight: 500;
    margin-bottom: 8px;
    color: #1d1d1f;
}

.yprint-item-quantity-wrapper {
    display: flex;
    align-items: center;
    gap: 8px;
}

.yprint-item-quantity-input {
    width: 30px;
    padding: 0;
    text-align: center;
    border: none;
    color: #0079FF;
    font-weight: 600;
    background: transparent;
    cursor: text;
    -moz-appearance: textfield;
}

.yprint-item-quantity-input::-webkit-outer-spin-button,
.yprint-item-quantity-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

.yprint-item-quantity-btn {
    width: 24px;
    height: 24px;
    border: none;
    background: transparent;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 16px;
    color: #1d1d1f;
    padding: 0;
}

.yprint-item-quantity-btn:hover {
    background: transparent;
}

.yprint-item-price {
    display: none;
}

    .yprint-item-total {
        font-weight: 600;
        color: #0079FF;
    }

    .yprint-summary-totals {
        margin-top: 16px;
        padding-top: 16px;
        border-top: 1px solid #f5f5f7;
    }

    .yprint-subtotal, 
    .yprint-shipping,
    .yprint-discount,
    .yprint-total {
        display: flex;
        justify-content: space-between;
        margin-bottom: 8px;
    }

    .yprint-subtotal span, 
    .yprint-shipping span,
    .yprint-discount span {
        color: #6e6e73;
    }

    .yprint-total {
        font-weight: 600;
        border-top: 1px solid #f5f5f7;
        padding-top: 12px;
        margin-top: 12px;
    }

    .yprint-total span {
        color: #1d1d1f;
    }
    </style>

    <script>
    jQuery(document).ready(function($) {
        // Plus-Button für Mengenerhöhung
        $('.yprint-item-quantity-plus').on('click', function() {
            var cart_item_key = $(this).data('cart-item-key');
            var input = $('#yprint-qty-' + cart_item_key);
            var currentValue = parseInt(input.val());
            input.val(currentValue + 1);
            updateCart(cart_item_key, currentValue + 1);
        });

        // Minus-Button für Mengenreduzierung
        $('.yprint-item-quantity-minus').on('click', function() {
            var cart_item_key = $(this).data('cart-item-key');
            var input = $('#yprint-qty-' + cart_item_key);
            var currentValue = parseInt(input.val());
            if (currentValue > 1) {
                input.val(currentValue - 1);
                updateCart(cart_item_key, currentValue - 1);
            }
        });

        // Direkteingabe der Menge
        $('.yprint-item-quantity-input').on('change', function() {
            var cart_item_key = $(this).data('cart-item-key');
            var quantity = parseInt($(this).val());
            
            // Minimum-Wert sicherstellen
            if (quantity < 1) {
                quantity = 1;
                $(this).val(1);
            }
            
            updateCart(cart_item_key, quantity);
        });

        // AJAX-Funktion zum Aktualisieren des Warenkorbs
        function updateCart(cart_item_key, quantity) {
            $.ajax({
                type: 'POST',
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                data: {
                    action: 'yprint_update_cart_quantity',
                    cart_item_key: cart_item_key,
                    quantity: quantity,
                    security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
                },
                beforeSend: function() {
                    // Hier könnten wir einen Ladeindikator anzeigen
                },
                success: function(response) {
                    if (response.success) {
                        location.reload();
                    } else {
                        alert(response.data || 'Ein Fehler ist aufgetreten.');
                    }
                },
                error: function() {
                    alert('Ein Fehler ist aufgetreten.');
                }
            });
        }
    });
    </script>
    <?php
    
    return ob_get_clean();
}
add_shortcode('yprint_order_summary', 'yprint_order_summary_shortcode');

// AJAX-Handler für Mengenänderung
function yprint_update_cart_quantity() {
    check_ajax_referer('yprint-checkout-nonce', 'security');
    
    $cart_item_key = isset($_POST['cart_item_key']) ? sanitize_text_field($_POST['cart_item_key']) : '';
    $quantity = isset($_POST['quantity']) ? intval($_POST['quantity']) : 0;

    if (!$cart_item_key || $quantity < 1) {
        wp_send_json_error('Ungültige Eingabe');
        return;
    }
    
    if (function_exists('WC') && WC()->cart) {
        WC()->cart->set_quantity($cart_item_key, $quantity);
        WC()->cart->calculate_totals();
        wp_send_json_success('Menge aktualisiert');
    } else {
        wp_send_json_error('WooCommerce ist nicht aktiviert');
    }
}
add_action('wp_ajax_yprint_update_cart_quantity', 'yprint_update_cart_quantity');
add_action('wp_ajax_nopriv_yprint_update_cart_quantity', 'yprint_update_cart_quantity');

/**
 * YPrint Coupon and Buy Shortcode
 * 
 * Shortcode für das Gutschein-Feld und den Kaufen-Button im Checkout
 */

// Verhindern direkter Aufrufe
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Shortcode für Gutschein-Feld und Kaufen-Button
 */
function yprint_coupon_buy_shortcode() {
    if (!function_exists('WC')) {
        return 'WooCommerce ist nicht aktiviert.';
    }

    // Hole gespeicherten Gutscheincode
    $saved_coupon = WC()->session ? WC()->session->get('applied_coupon') : '';

    ob_start();
    ?>
    <div class="yprint-coupon-buy-section">
        <div class="yprint-coupon-form">
            <div class="yprint-coupon-input-wrapper">
                <input 
                    type="text" 
                    name="coupon_code" 
                    class="yprint-coupon-input" 
                    placeholder="Gutschein-Code eingeben" 
                    id="coupon_code" 
                    value="<?php echo esc_attr($saved_coupon); ?>" 
                />
                <button 
                    type="button"
                    class="yprint-coupon-button" 
                    id="apply_coupon"
                >
                    Anwenden
                </button>
            </div>
            <div class="yprint-coupon-message" style="display: none;"></div>
        </div>

        <button 
            type="button"
            id="yprint_checkout_submit"
            class="yprint-buy-button"
        >
            <span class="yprint-button-text">Jetzt kaufen</span>
            <div class="yprint-button-loader" style="display: none;">
                <div class="yprint-loader-spinner"></div>
            </div>
        </button>

        <!-- Validierungsfeedback -->
        <div class="yprint-validation-feedback" style="display: none;"></div>
    </div>

    <style>
    .yprint-coupon-buy-section {
        margin-top: 20px;
    }

    .yprint-coupon-form {
        margin-bottom: 20px;
    }

    .yprint-coupon-input-wrapper {
        display: flex;
        gap: 10px;
    }

    .yprint-coupon-input {
        flex: 1;
        padding: 12px;
        border: 1px solid #e0e0e0;
        border-radius: 5px;
        font-size: 1rem;
    }

    .yprint-coupon-input:focus {
        border-color: #2997FF;
        outline: none;
    }

    .yprint-coupon-button {
        padding: 0 20px;
        background-color: #f5f5f7;
        color: #1d1d1f;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1rem;
        transition: background-color 0.3s ease;
    }

    .yprint-coupon-button:hover {
        background-color: #e0e0e0;
    }

    .yprint-buy-button {
        width: 100%;
        padding: 15px;
        background-color: #0079FF;
        color: white;
        border: none;
        border-radius: 5px;
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s ease;
        position: relative;
    }

    .yprint-buy-button:hover {
        background-color: #0068e1;
    }

    .yprint-button-loader {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .yprint-loader-spinner {
        width: 20px;
        height: 20px;
        border: 2px solid #fff;
        border-top-color: transparent;
        border-radius: 50%;
        animation: yprint-spin 0.8s linear infinite;
    }

    @keyframes yprint-spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .yprint-buy-button.loading .yprint-button-text {
        visibility: hidden;
    }

    .yprint-buy-button.loading .yprint-button-loader {
        display: block;
    }

    .yprint-coupon-message {
        margin-top: 10px;
        padding: 8px;
        border-radius: 4px;
        font-size: 0.9em;
    }

    .yprint-coupon-message.success {
        background-color: #d4edda;
        color: #155724;
    }

    .yprint-coupon-message.error {
        background-color: #f8d7da;
        color: #721c24;
    }

    .yprint-validation-feedback {
        margin-top: 15px;
        padding: 10px;
        border-radius: 4px;
        font-size: 0.9em;
    }

    .yprint-validation-feedback.error {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .yprint-validation-item {
        margin: 5px 0;
    }
    </style>

    <script>
    jQuery(document).ready(function($) {
        const $buyButton = $('#yprint_checkout_submit');
        const $couponButton = $('#apply_coupon');
        const $couponInput = $('#coupon_code');
        const $couponMessage = $('.yprint-coupon-message');
        const $validationFeedback = $('.yprint-validation-feedback');

        // Gutschein anwenden
        $couponButton.on('click', function() {
            const couponCode = $couponInput.val().trim();
            
            if (!couponCode) {
                showCouponMessage('Bitte gib einen Gutschein-Code ein.', 'error');
                return;
            }
            
            // Button deaktivieren während der Anfrage
            $couponButton.prop('disabled', true);
            
            $.ajax({
                type: 'POST',
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                data: {
                    action: 'yprint_apply_coupon',
                    coupon_code: couponCode,
                    security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
                },
                success: function(response) {
                    $couponButton.prop('disabled', false);
                    
                    if (response.success) {
                        showCouponMessage('Gutschein wurde erfolgreich angewendet.', 'success');
                        
                        // YPrintCheckoutSystem aktualisieren
                        if (typeof YPrintCheckoutSystem !== 'undefined') {
                            YPrintCheckoutSystem.updateState('couponCode', {
                                code: couponCode
                            });
                        }
                        
                        // Seite neuladen um Preise zu aktualisieren
                        setTimeout(function() {
                            location.reload();
                        }, 1000);
                    } else {
                        showCouponMessage(response.data || 'Gutschein konnte nicht angewendet werden.', 'error');
                    }
                },
                error: function() {
                    $couponButton.prop('disabled', false);
                    showCouponMessage('Ein Fehler ist aufgetreten. Bitte versuche es erneut.', 'error');
                }
            });
        });

        // Gutschein-Nachricht anzeigen
        function showCouponMessage(text, type) {
            $couponMessage
                .text(text)
                .removeClass('success error')
                .addClass(type)
                .fadeIn();
            
            // Nach 3 Sekunden ausblenden
            setTimeout(function() {
                $couponMessage.fadeOut();
            }, 3000);
        }

        // Checkout Submit
        $buyButton.on('click', function(e) {
            e.preventDefault();
            
            // Button Loading State
            $buyButton.addClass('loading');
            $validationFeedback.hide();
            
            // Checkout Validierung durchführen
            if (typeof YPrintCheckoutSystem !== 'undefined') {
                const validationResult = YPrintCheckoutSystem.validateForm();
                
                if (validationResult.isValid) {
                    // Checkout Prozess starten
                    YPrintCheckoutSystem.processCheckout();
                } else {
                    // Fehler anzeigen
                    showValidationErrors(validationResult.errors);
                    $buyButton.removeClass('loading');
                }
            } else {
                // Fallback wenn YPrintCheckoutSystem nicht verfügbar ist
                $validationFeedback
                    .empty()
                    .addClass('error')
                    .append($('<div class="yprint-validation-item"></div>').text('Das Checkout-System konnte nicht geladen werden.'))
                    .show();
                
                $buyButton.removeClass('loading');
            }
        });

        // Validierungsfehler anzeigen
        function showValidationErrors(errors) {
            $validationFeedback.empty().addClass('error');
            
            errors.forEach(error => {
                $validationFeedback.append(
                    $('<div class="yprint-validation-item"></div>').text(error)
                );
            });

            $validationFeedback.show();

            // Scroll zu den Fehlern
            $('html, body').animate({
                scrollTop: $validationFeedback.offset().top - 100
            }, 500);
        }
    });
    </script>
    <?php
    
    return ob_get_clean();
}
add_shortcode('yprint_coupon_buy', 'yprint_coupon_buy_shortcode');

// AJAX Handler für Gutscheine
function yprint_apply_coupon() {
    check_ajax_referer('yprint-checkout-nonce', 'security');
    
    if (!isset($_POST['coupon_code']) || empty($_POST['coupon_code'])) {
        wp_send_json_error('Kein Gutschein-Code angegeben');
        return;
    }
    
    $coupon_code = sanitize_text_field($_POST['coupon_code']);
    
    if (function_exists('WC') && WC()->cart) {
        // Prüfen ob Gutschein bereits angewendet wurde
        if (WC()->cart->has_discount($coupon_code)) {
            wp_send_json_error('Dieser Gutschein wurde bereits angewendet');
            return;
        }
        
        // Gutschein anwenden
        $result = WC()->cart->apply_coupon($coupon_code);
        
        if ($result) {
            wp_send_json_success('Gutschein erfolgreich angewendet');
        } else {
            wp_send_json_error('Der Gutschein konnte nicht angewendet werden');
        }
    } else {
        wp_send_json_error('WooCommerce ist nicht aktiviert');
    }
}
add_action('wp_ajax_yprint_apply_coupon', 'yprint_apply_coupon');
add_action('wp_ajax_nopriv_yprint_apply_coupon', 'yprint_apply_coupon');

/**
 * YPrint Checkout WooCommerce Integration
 * 
 * Integration des benutzerdefinierten Checkouts mit WooCommerce
 */

// Verhindern direkter Aufrufe
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Filter zur Übernahme der Daten aus dem benutzerdefinierten Checkout in den normalen WooCommerce-Checkout
 */
add_filter('woocommerce_checkout_posted_data', function($data) {
    // Checkout-Daten aus der Session abrufen
    $checkout_data = WC()->session ? WC()->session->get('yprint_checkout_data') : null;
    
    if ($checkout_data) {
        // Shipping-Daten übernehmen
        if (isset($checkout_data['shipping_address'])) {
            foreach ($checkout_data['shipping_address'] as $key => $value) {
                if ($key !== 'slot' && $key !== 'timestamp') {
                    $data['shipping_' . $key] = $value;
                }
            }
        }
        
        // Billing-Daten übernehmen wenn Different Billing aktiviert ist
        if (isset($checkout_data['different_billing']) && $checkout_data['different_billing']) {
            if (isset($checkout_data['different_billing_address'])) {
                foreach ($checkout_data['different_billing_address'] as $key => $value) {
                    // Konvertieren von different_billing_* zu billing_*
                    $billing_key = str_replace('different_billing_', 'billing_', $key);
                    $data[$billing_key] = $value;
                }
            }
        } else {
            // Wenn keine abweichende Rechnungsadresse, dann Lieferadresse für Rechnungsadresse verwenden
            if (isset($checkout_data['shipping_address'])) {
                foreach ($checkout_data['shipping_address'] as $key => $value) {
                    if ($key !== 'slot' && $key !== 'timestamp') {
                        $data['billing_' . $key] = $value;
                    }
                }
            }
        }
        
        // Zahlungsart übernehmen
        if (isset($checkout_data['payment_method']) && !empty($checkout_data['payment_method'])) {
            $data['payment_method'] = $checkout_data['payment_method'];
        }
    }
    
    return $data;
});

/**
 * Checkout Validierung erweitern
 */

add_action('woocommerce_checkout_process', function() {
    // Datenschutz-Checkbox prüfen
    if (!isset($_POST['privacy_checkbox']) || $_POST['privacy_checkbox'] !== 'on') {
        wc_add_notice('Bitte akzeptiere die Datenschutzerklärung, um fortzufahren.', 'error');
    }

    // Zahlungsmethode prüfen
    if (!isset($_POST['payment_method']) || empty($_POST['payment_method'])) {
        wc_add_notice('Bitte wähle eine Zahlungsmethode aus.', 'error');
    }

    // Lieferadresse prüfen
    $shipping_fields = array(
        'shipping_first_name' => 'Vorname',
        'shipping_last_name' => 'Nachname',
        'shipping_address_1' => 'Straße',
        'shipping_postcode' => 'PLZ',
        'shipping_city' => 'Ort',
        'shipping_country' => 'Land'
    );

    foreach ($shipping_fields as $field => $label) {
        if (!isset($_POST[$field]) || empty($_POST[$field])) {
            wc_add_notice(sprintf('Bitte gib %s für die Lieferadresse an.', $label), 'error');
        }
    }

    // Abweichende Rechnungsadresse prüfen wenn aktiviert
    if (isset($_POST['different_billing']) && $_POST['different_billing'] === 'on') {
        $billing_fields = array(
            'billing_first_name' => 'Vorname',
            'billing_last_name' => 'Nachname',
            'billing_address_1' => 'Straße',
            'billing_postcode' => 'PLZ',
            'billing_city' => 'Ort',
            'billing_country' => 'Land'
        );

        foreach ($billing_fields as $field => $label) {
            if (!isset($_POST[$field]) || empty($_POST[$field])) {
                wc_add_notice(sprintf('Bitte gib %s für die Rechnungsadresse an.', $label), 'error');
            }
        }
    }
});

/**
 * YPrint Checkout Shortcodes registrieren
 */
function register_yprint_checkout_shortcodes() {
    add_shortcode('yprint_checkout', 'yprint_checkout_shortcode');
    add_shortcode('yprint_checkout_communication', 'yprint_checkout_communication_shortcode');
    add_shortcode('yprint_shipping_address', 'yprint_shipping_address_shortcode');
    add_shortcode('yprint_payment_options', 'yprint_payment_options_shortcode');
    add_shortcode('yprint_different_billing', 'yprint_different_billing_shortcode');
    add_shortcode('yprint_order_summary', 'yprint_order_summary_shortcode');
    add_shortcode('yprint_coupon_buy', 'yprint_coupon_buy_shortcode');
}
add_action('init', 'register_yprint_checkout_shortcodes');

/**
 * Thankyou Redirect Shortcode
 * Zeigt eine Ladeanimation und leitet nach 5 Sekunden weiter
 */
function thankyou_redirect_shortcode() {
    ob_start();
    ?>
    <div class="thankyou-redirect-container">
        <div class="loader-animation">
            <div class="spinner"></div>
        </div>
        <div class="redirect-message">
            <h2>Vielen Dank für deinen Einkauf!</h2>
            <p>Du wirst in wenigen Sekunden weitergeleitet...</p>
        </div>
    </div>
    
    <style>
        .thankyou-redirect-container {
            text-align: center;
            padding: 40px 20px;
            max-width: 600px;
            margin: 0 auto;
            font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
        }
        
        .loader-animation {
            margin-bottom: 30px;
        }
        
        .spinner {
            width: 60px;
            height: 60px;
            border: 3px solid rgba(0, 121, 255, 0.2);
            border-radius: 50%;
            border-top-color: #0079FF;
            display: inline-block;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .redirect-message h2 {
            font-size: 24px;
            margin-bottom: 16px;
            color: #1d1d1f;
        }
        
        .redirect-message p {
            font-size: 16px;
            color: #6e6e73;
        }
    </style>
    
    <script>
        // Führe diese Funktion aus, sobald die Seite geladen ist
        (function() {
            // Setze den Timer für die Weiterleitung
            setTimeout(function() {
                window.location.href = 'https://yprint.de/sell-new-product/';
            }, 5000); // 5000 Millisekunden = 5 Sekunden
        })();
    </script>
    <?php
    
    return ob_get_clean();
}
add_shortcode('thankyou_redirect', 'thankyou_redirect_shortcode');

/**
 * Passt die Bestellbestätigungsseite an und ersetzt sie mit unserem benutzerdefinierten Redirect
 */
function customize_order_received_page($title, $id) {
    // Prüfen, ob es sich um die Order-Received-Seite handelt
    if (is_wc_endpoint_url('order-received') && $id == wc_get_page_id('checkout')) {
        // Mache den normalen Titel unsichtbar
        add_filter('the_content', 'replace_thankyou_content', 1);
        return '';
    }
    return $title;
}
add_filter('the_title', 'customize_order_received_page', 10, 2);

/**
 * Ersetzt den Inhalt der Bestellbestätigungsseite
 */
function replace_thankyou_content($content) {
    // Nur auf der Order-Received-Seite
    if (is_wc_endpoint_url('order-received')) {
        // Ersetze den Inhalt mit unserem Shortcode
        return do_shortcode('[thankyou_redirect]');
    }
    return $content;
}

/**
 * Entferne das standardmäßige WooCommerce Dankeschön-Template
 */
function remove_woocommerce_order_details_table() {
    if (is_wc_endpoint_url('order-received')) {
        remove_action('woocommerce_thankyou', 'woocommerce_order_details_table', 10);
        
        // Verhindere auch alle anderen WooCommerce-Ausgaben
        remove_all_actions('woocommerce_thankyou');
        remove_all_actions('woocommerce_order_details_before_order_table');
        remove_all_actions('woocommerce_order_details_after_order_table');
        remove_all_actions('woocommerce_order_details_before_customer_details');
        remove_all_actions('woocommerce_order_details_after_customer_details');
    }
}
add_action('template_redirect', 'remove_woocommerce_order_details_table');

?>
