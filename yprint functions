
/**
 * YPrint Custom Checkout System - Teil 1: Hauptshortcode
 */

// Verhindern direkter Aufrufe
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Hauptshortcode für das gesamte Checkout-Layout
 */
function yprint_checkout_shortcode() {
    if (!function_exists('WC')) {
        return '<div class="yprint-error-message">WooCommerce ist nicht aktiviert.</div>';
    }

   // Überprüfen, ob Warenkorb leer ist
$cart_empty = WC()->cart->is_empty();

    // Checkout-Kommunikationssystem einbinden
    ob_start();
    echo do_shortcode('[yprint_checkout_communication]');
    
    ?>
    <div class="yprint-checkout-container">
        <div class="yprint-back-button-container">
            <a href="javascript:history.back()" class="yprint-back-button">← Zurück</a>
        </div>
        <div class="yprint-checkout-columns">

            <!-- Linke Spalte: Adressen und Zahlungsoptionen -->
            <div class="yprint-checkout-left">
                <div class="yprint-checkout-section">
                    <h2 class="yprint-section-title">Lieferadresse</h2>
                    <?php echo do_shortcode('[yprint_shipping_address]'); ?>
                </div>

                <div class="yprint-checkout-section">
                    <h2 class="yprint-section-title">Zahlungsmethode</h2>
                    <?php echo do_shortcode('[yprint_payment_options]'); ?>
                </div>
            </div>

            <!-- Rechte Spalte: Bestellübersicht und Checkout-Button -->
            <div class="yprint-checkout-right">
                <div class="yprint-checkout-section yprint-order-summary-section">
                    <?php echo do_shortcode('[yprint_order_summary]'); ?>
                </div>

                <div class="yprint-checkout-section">
                    <?php echo do_shortcode('[yprint_coupon_buy]'); ?>
                </div>
                
                <div class="yprint-checkout-section">
                    <?php echo do_shortcode('[yprint_different_billing]'); ?>
                </div>

                <!-- Datenschutz-Checkbox -->
                <div class="yprint-checkout-section yprint-privacy-section">
                    <div class="yprint-checkbox-group">
                        <input type="checkbox" id="privacy_checkbox" name="privacy_checkbox" required>
                        <label for="privacy_checkbox">Ich habe die <a href="https://yprint.de/datenschutz" target="_blank">Datenschutzerklärung</a> gelesen und akzeptiere diese.</label>
                    </div>
                    <div id="privacy_error" class="yprint-field-error" style="display: none;"></div>
                </div>
            </div>
        </div>
    </div>

    <?php
    
    // Checkout-CSS und JavaScript einbinden
    yprint_checkout_scripts_and_styles();
    
    return ob_get_clean();
}
add_shortcode('yprint_checkout', 'yprint_checkout_shortcode');

/**
 * CSS und JavaScript für den Checkout
 */
function yprint_checkout_scripts_and_styles() {
    ?>
    <style>
    .yprint-checkout-container {
        font-family: 'Roboto', -apple-system, sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        display: flex;
        flex-direction: column;
        min-height: 80vh;
        justify-content: center;
    }

    .yprint-checkout-columns {
        display: flex;
        flex-wrap: wrap;
        gap: 30px;
    }

    .yprint-checkout-left {
        flex: 1 1 50%;
        min-width: 300px;
    }

    .yprint-checkout-right {
        flex: 1 1 45%;
        min-width: 300px;
    }

    .yprint-checkout-section {
        margin-bottom: 30px;
        padding-bottom: 20px;
        border-bottom: 1px solid #f0f0f0;
    }

    .yprint-section-title {
        font-size: 24px;
        font-weight: 600;
        margin-bottom: 20px;
        color: #1d1d1f;
    }

    .yprint-checkbox-group {
        display: flex;
        align-items: flex-start;
        margin-bottom: 15px;
    }

    .yprint-checkbox-group input[type="checkbox"] {
        margin-right: 10px;
        margin-top: 3px;
    }

    .yprint-checkbox-group label {
        font-size: 14px;
        line-height: 1.4;
        color: #1d1d1f;
    }

    .yprint-checkbox-group a {
        color: #0079FF;
        text-decoration: none;
    }

    .yprint-checkbox-group a:hover {
        text-decoration: underline;
    }

    .yprint-field-error {
        color: #dc3545;
        font-size: 0.9em;
        margin-top: 5px;
    }

    .yprint-empty-cart-message, 
    .yprint-error-message {
        text-align: center;
        padding: 50px 20px;
        font-size: 18px;
    }

    .yprint-empty-cart-message a {
        color: #0079FF;
        text-decoration: none;
    }

    .yprint-validation-feedback {
        margin-top: 15px;
        padding: 10px;
        border-radius: 4px;
        display: none;
    }

    .yprint-validation-feedback.error {
        background-color: #fff2f2;
        border: 1px solid #ffcdd2;
        color: #d32f2f;
    }

    .yprint-validation-item {
        display: flex;
        align-items: center;
        gap: 8px;
        margin: 4px 0;
    }

    .yprint-validation-item::before {
        content: "•";
        color: #d32f2f;
    }

    .yprint-back-button-container {
    margin-bottom: 20px;
}

.yprint-back-button {
    display: inline-flex;
    align-items: center;
    color: #0079FF;
    text-decoration: none;
    font-weight: 500;
    transition: color 0.2s ease;
}

.yprint-back-button:hover {
    color: #0068e1;
}

    @media (max-width: 768px) {
        .yprint-checkout-columns {
            flex-direction: column;
        }
    }
    </style>

    <script>
    jQuery(document).ready(function($) {
        // Datenschutz-Validierung
        $(document).on('click', '#yprint_checkout_submit', function(e) {
            // Datenschutz-Checkbox prüfen
            if (!$('#privacy_checkbox').is(':checked')) {
                e.preventDefault();
                $('#privacy_error').text('Bitte akzeptiere die Datenschutzerklärung, um fortzufahren.').show();
                
                $('html, body').animate({
                    scrollTop: $('.yprint-privacy-section').offset().top - 100
                }, 500);
                
                return false;
            } else {
                $('#privacy_error').hide();
            }
        });
        
        // Fehlermeldung bei Änderung der Checkbox entfernen
        $('#privacy_checkbox').on('change', function() {
            if ($(this).is(':checked')) {
                $('#privacy_error').hide();
            }
        });
    });
    </script>
    <?php
}

/**
 * YPrint Checkout Communication System
 * 
 * System für die Datenkoordination zwischen den Shortcodes im Checkout
 */

// Verhindern direkter Aufrufe
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Checkout-Kommunikationssystem Shortcode
 */
function yprint_checkout_communication_shortcode() {
    ob_start();
    ?>
    <script>
    // YPrint Checkout Communication System
    const YPrintCheckoutSystem = {
        // Zentraler Datenspeicher
        state: {
            shippingAddress: {},
            billingAddress: {},
            differentBilling: { enabled: false },
            differentBillingAddress: {},
            paymentMethod: {},
            couponCode: {}
        },

        // Initialisierung
        init: function() {
            this.initializeState();
            this.setupEventListeners();
        },

        // Initialen State aus WooCommerce laden
        initializeState: function() {
            const user_id = '<?php echo get_current_user_id(); ?>';
            
            // AJAX-Aufruf um initiale Daten zu laden
            jQuery.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'yprint_get_checkout_state',
                    user_id: user_id,
                    security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
                },
                success: (response) => {
                    if (response.success) {
                        // Stellen sicher, dass different_billing immer als deaktiviert geladen wird
                        const data = {...response.data};
                        if (data.differentBilling) {
                            data.differentBilling.enabled = false;
                        }
                        this.state = {...this.state, ...data};
                        this.updateAllFields();
                        this.notifyStateChange();
                    }
                }
            });
        },

        // Event Listener Setup
        setupEventListeners: function() {
            const $ = jQuery;
            
            // Shipping Address Events
            $(document).on('change', '.yprint-shipping-field', (e) => {
                const field = e.target.name.replace('shipping_', '');
                const value = e.target.value;
                this.updateState('shippingAddress', {
                    [field]: value
                });
            });

            // Different Billing Events
            $(document).on('change', '#different_billing', (e) => {
                this.updateState('differentBilling', {
                    enabled: e.target.checked
                });
            });

            // Different Billing Address Events
            $(document).on('change', '.yprint-billing-field', (e) => {
                const field = e.target.name;
                const value = e.target.value;
                this.updateState('differentBillingAddress', {
                    [field]: value
                });
            });

            // Payment Method Events
            $(document).on('change', '[name="payment_method"]', (e) => {
                this.updateState('paymentMethod', {
                    method: e.target.value,
                    timestamp: Date.now()
                });
            });

            // Coupon Events
            $(document).on('change', '#coupon_code', (e) => {
                this.updateState('couponCode', {
                    code: e.target.value
                });
            });
        },

        // State Updates
        updateState: function(section, data) {
            if (!this.state[section]) {
                this.state[section] = {};
            }
            
            // Aktualisiere den jeweiligen Abschnitt im State
            this.state[section] = {
                ...this.state[section],
                ...data
            };
            
            this.saveState();
            this.notifyStateChange();
        },

        // Speichern des States
        saveState: function() {
            jQuery.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'yprint_save_checkout_state',
                    state: this.state,
                    security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
                },
                success: (response) => {
                    if (response.success) {
                        console.log('State saved successfully');
                    }
                }
            });
        },

        // Benachrichtigung über State-Änderungen
        notifyStateChange: function() {
            jQuery(document).trigger('checkoutStateUpdate', [this.state]);
        },

        // Formularvalidierung
        validateForm: function() {
            let isValid = true;
            const errors = [];
            
            // Validiere Lieferadresse
            if (!this.state.shippingAddress || !this.state.shippingAddress.address_1) {
                isValid = false;
                errors.push('Bitte gib eine Lieferadresse an');
            }
            
            // Validiere Zahlungsmethode
            if (!this.state.paymentMethod || !this.state.paymentMethod.method) {
                isValid = false;
                errors.push('Bitte wähle eine Zahlungsmethode aus');
            }

            // Validiere abweichende Rechnungsadresse falls aktiviert
            if (this.state.differentBilling && this.state.differentBilling.enabled) {
                if (!this.state.differentBillingAddress || !this.state.differentBillingAddress.different_billing_address_1) {
                    isValid = false;
                    errors.push('Bitte gib eine abweichende Rechnungsadresse an');
                }
            }
            
            return {
                isValid: isValid,
                errors: errors
            };
        },

        // State abrufen
        getState: function() {
            return this.state;
        },

        // Formulardaten sammeln
        getFormData: function() {
            return {
                shipping_address: this.state.shippingAddress,
                billing_address: this.state.billingAddress,
                different_billing: this.state.differentBilling ? this.state.differentBilling.enabled : false,
                different_billing_address: this.state.differentBillingAddress,
                payment_method: this.state.paymentMethod ? this.state.paymentMethod.method : '',
                coupon_code: this.state.couponCode ? this.state.couponCode.code : ''
            };
        },

        // Alle Felder aktualisieren
        updateAllFields: function() {
            const $ = jQuery;
            
            // Shipping Address Felder
            if (this.state.shippingAddress) {
                Object.entries(this.state.shippingAddress).forEach(([field, value]) => {
                    if (field !== 'slot' && field !== 'address' && field !== 'field') {
                        $(`[name="shipping_${field}"]`).val(value);
                    }
                });
            }

            // Different Billing Checkbox
            if (this.state.differentBilling && this.state.differentBilling.enabled !== undefined) {
                $('#different_billing').prop('checked', this.state.differentBilling.enabled);
                
                // Zeige/verstecke abweichende Adressfelder
                if (this.state.differentBilling.enabled) {
                    $('#different_billing_fields').show();
                } else {
                    $('#different_billing_fields').hide();
                }
            }

            // Different Billing Address Felder
            if (this.state.differentBillingAddress) {
                Object.entries(this.state.differentBillingAddress).forEach(([field, value]) => {
                    $(`[name="${field}"]`).val(value);
                });
            }

            // Payment Method
            if (this.state.paymentMethod && this.state.paymentMethod.method) {
                const paymentMethod = this.state.paymentMethod.method;
                $(`[name="payment_method"][value="${paymentMethod}"]`)
                    .prop('checked', true)
                    .closest('.yprint-payment-option')
                    .addClass('selected');
            }

            // Coupon Code
            if (this.state.couponCode && this.state.couponCode.code) {
                $('#coupon_code').val(this.state.couponCode.code);
            }
        },

        // Checkout-Prozess starten
        processCheckout: function() {
    const $ = jQuery;
    const checkoutData = this.getFormData();
    
    // Überprüfen, ob Privatsphäre-Checkbox aktiviert ist
    if (!$('#privacy_checkbox').is(':checked')) {
        $('#privacy_error').text('Bitte akzeptiere die Datenschutzerklärung, um fortzufahren.').show();
        
        $('html, body').animate({
            scrollTop: $('.yprint-privacy-section').offset().top - 100
        }, 500);
        
        return;
    }

    // Validierung vor dem Absenden
    const validation = this.validateForm();
    if (!validation.isValid) {
        // Fehler anzeigen
        $('.yprint-validation-feedback')
            .empty()
            .addClass('error');
            
        validation.errors.forEach(error => {
            $('.yprint-validation-feedback').append(
                $('<div class="yprint-validation-item"></div>').text(error)
            );
        });
        
        $('.yprint-validation-feedback').show();
        
        $('html, body').animate({
            scrollTop: $('.yprint-validation-feedback').offset().top - 100
        }, 500);
        
        return;
    }

    // Loading-State aktivieren
    $('#yprint_checkout_submit').addClass('loading');
    $('.yprint-validation-feedback').hide();
    
    // Debug-Ausgabe der Daten
    console.log('Checkout data being sent:', checkoutData);
    
    // Zahlungsmethode überprüfen für Validierung
    const paymentMethod = checkoutData.payment_method;
    
    // Zahlungsprozess beginnen
    this.validatePayment(paymentMethod, checkoutData, function(paymentValidated) {
        if (paymentValidated) {
            // Zahlungsverifizierung erfolgreich, Bestellung abschließen
            $.ajax({
                type: 'POST',
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                data: {
                    action: 'yprint_process_checkout',
                    checkout_data: checkoutData,
                    payment_verified: true,
                    security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
                },
                success: function(response) {
                    console.log('AJAX response:', response);
                    
                    if (response.success) {
                        // Weiterleitung zur Checkout-Seite
                        window.location.href = response.data.redirect;
                    } else {
                        // Fehleranzeige
                        $('.yprint-validation-feedback')
                            .empty()
                            .addClass('error')
                            .append($('<div class="yprint-validation-item"></div>')
                            .text(response.data.message || 'Ein Fehler ist aufgetreten. Bitte versuchen Sie es erneut.'))
                            .show();
                        
                        $('#yprint_checkout_submit').removeClass('loading');
                        
                        $('html, body').animate({
                            scrollTop: $('.yprint-validation-feedback').offset().top - 100
                        }, 500);
                    }
                },
                error: function(xhr, status, error) {
                    console.error('AJAX-Fehler:', xhr.responseText, status, error);
                    
                    // Fehlerdetails anzeigen wenn vorhanden
                    let errorMessage = 'Ein Fehler ist aufgetreten. Bitte versuchen Sie es erneut.';
                    try {
                        const response = JSON.parse(xhr.responseText);
                        if (response && response.data && response.data.message) {
                            errorMessage = response.data.message;
                        }
                    } catch (e) {
                        console.error('Fehler beim Parsen der Antwort:', e);
                    }
                    
                    // Allgemeiner Fehler
                    $('.yprint-validation-feedback')
                        .empty()
                        .addClass('error')
                        .append($('<div class="yprint-validation-item"></div>')
                        .text(errorMessage))
                        .show();
                    
                    $('#yprint_checkout_submit').removeClass('loading');
                }
            });
        } else {
            // Zahlungsverifizierung fehlgeschlagen
            $('.yprint-validation-feedback')
                .empty()
                .addClass('error')
                .append($('<div class="yprint-validation-item"></div>')
                .text('Die Zahlung konnte nicht bestätigt werden. Bitte versuchen Sie es erneut oder wählen Sie eine andere Zahlungsmethode.'))
                .show();
            
            $('#yprint_checkout_submit').removeClass('loading');
            
            $('html, body').animate({
                scrollTop: $('.yprint-validation-feedback').offset().top - 100
            }, 500);
        }
    });
},

    // Zahlungsvalidierung
    validatePayment: function(paymentMethod, checkoutData, callback) {
        const $ = jQuery;
        
        // Je nach Zahlungsart verschiedene Validierungen durchführen
        if (paymentMethod.includes('paypal')) {
            // PayPal Validierung
            $.ajax({
                type: 'POST',
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                data: {
                    action: 'yprint_validate_payment',
                    payment_method: paymentMethod,
                    checkout_data: checkoutData,
                    security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
                },
                success: function(response) {
                    if (response.success && response.data.validated) {
                        callback(true);
                    } else {
                        callback(false);
                    }
                },
                error: function() {
                    callback(false);
                }
            });
        } else if (paymentMethod.includes('stripe') || paymentMethod.includes('apple_pay') || paymentMethod.includes('google_pay') || paymentMethod.includes('credit')) {
            // Kreditkarten/Stripe/Apple Pay/Google Pay Validierung
            $.ajax({
                type: 'POST',
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                data: {
                    action: 'yprint_validate_payment',
                    payment_method: paymentMethod,
                    checkout_data: checkoutData,
                    security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
                },
                success: function(response) {
                    if (response.success && response.data.validated) {
                        callback(true);
                    } else {
                        callback(false);
                    }
                },
                error: function() {
                    callback(false);
                }
            });
        } else if (paymentMethod.includes('sepa') || paymentMethod.includes('lastschrift')) {
            // SEPA/Lastschrift Validierung
            $.ajax({
                type: 'POST',
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                data: {
                    action: 'yprint_validate_payment',
                    payment_method: paymentMethod,
                    checkout_data: checkoutData,
                    security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
                },
                success: function(response) {
                    if (response.success && response.data.validated) {
                        callback(true);
                    } else {
                        callback(false);
                    }
                },
                error: function() {
                    callback(false);
                }
            });
        } else if (paymentMethod.includes('bacs') || paymentMethod.includes('bank')) {
            // Überweisung benötigt keine Echtzeit-Validierung
            callback(true);
        } else {
            // Standardvalidierung für andere Zahlungsmethoden
            $.ajax({
                type: 'POST',
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                data: {
                    action: 'yprint_validate_payment',
                    payment_method: paymentMethod,
                    checkout_data: checkoutData,
                    security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
                },
                success: function(response) {
                    if (response.success && response.data.validated) {
                        callback(true);
                    } else {
                        callback(false);
                    }
                },
                error: function() {
                    callback(false);
                }
            });
        }
    }
    };

    // System initialisieren
    jQuery(document).ready(function() {
        YPrintCheckoutSystem.init();
    });
    </script>
    
    <!-- Validierungsfeedback Element -->
    <div class="yprint-validation-feedback" style="display: none;"></div>
    <?php
    
    return ob_get_clean();
}
add_shortcode('yprint_checkout_communication', 'yprint_checkout_communication_shortcode');

/**
 * YPrint Checkout AJAX-Handler
 * 
 * Handler für AJAX-Anfragen des Checkout-Systems
 */

// Verhindern direkter Aufrufe
if (!defined('ABSPATH')) {
    exit;
}

/**
 * AJAX-Handler für initiale Checkout-Daten
 */
function yprint_get_checkout_state() {
    check_ajax_referer('yprint-checkout-nonce', 'security');
    
    $user_id = isset($_POST['user_id']) ? intval($_POST['user_id']) : 0;
    
    if (function_exists('WC')) {
        // Kundendaten abrufen
        if ($user_id) {
            $customer = new WC_Customer($user_id);
            
            // Shipping Address
            $shipping = array(
                'first_name' => $customer->get_shipping_first_name(),
                'last_name' => $customer->get_shipping_last_name(),
                'address_1' => $customer->get_shipping_address_1(),
                'address_2' => $customer->get_shipping_address_2(),
                'postcode' => $customer->get_shipping_postcode(),
                'city' => $customer->get_shipping_city(),
                'country' => $customer->get_shipping_country() ?: 'DE'
            );
            
            // Billing Address
            $billing = array(
                'first_name' => $customer->get_billing_first_name(),
                'last_name' => $customer->get_billing_last_name(),
                'email' => $customer->get_billing_email(),
                'address_1' => $customer->get_billing_address_1(),
                'address_2' => $customer->get_billing_address_2(),
                'postcode' => $customer->get_billing_postcode(),
                'city' => $customer->get_billing_city(),
                'country' => $customer->get_billing_country() ?: 'DE'
            );
            
            // State zusammenbauen
            $state = array(
                'shippingAddress' => $shipping,
                'billingAddress' => $billing,
                'differentBilling' => array(
                    'enabled' => get_user_meta($user_id, 'different_billing_enabled', true) ?: false
                ),
                'paymentMethod' => array(
                    'method' => WC()->session ? WC()->session->get('chosen_payment_method') : ''
                ),
                'couponCode' => array(
                    'code' => ''
                )
            );
        } else {
            // Fallback für nicht eingeloggte Benutzer
            $state = array(
                'shippingAddress' => array('country' => 'DE'),
                'billingAddress' => array('country' => 'DE'),
                'differentBilling' => array('enabled' => false),
                'paymentMethod' => array('method' => ''),
                'couponCode' => array('code' => '')
            );
        }
        
        // Session-Daten überschreiben falls vorhanden
        if (WC()->session) {
            $session_state = WC()->session->get('yprint_checkout_state');
            if ($session_state) {
                $state = wp_parse_args($session_state, $state);
            }
        }
        
        wp_send_json_success($state);
    } else {
        wp_send_json_error('WooCommerce ist nicht aktiviert');
    }
}
add_action('wp_ajax_yprint_get_checkout_state', 'yprint_get_checkout_state');
add_action('wp_ajax_nopriv_yprint_get_checkout_state', 'yprint_get_checkout_state');

/**
 * AJAX-Handler für State-Speicherung
 */
function yprint_save_checkout_state() {
    check_ajax_referer('yprint-checkout-nonce', 'security');
    
    if (isset($_POST['state'])) {
        $state = $_POST['state'];
        $user_id = get_current_user_id();
        
        // State in user_meta speichern falls Benutzer eingeloggt ist
        if ($user_id) {
            update_user_meta($user_id, 'yprint_checkout_state', $state);
        }
        
        // State in WooCommerce Session speichern
        if (function_exists('WC') && WC()->session) {
            WC()->session->set('yprint_checkout_state', $state);
        }
        
        wp_send_json_success();
    } else {
        wp_send_json_error('Keine Daten zum Speichern vorhanden');
    }
}
add_action('wp_ajax_yprint_save_checkout_state', 'yprint_save_checkout_state');
add_action('wp_ajax_nopriv_yprint_save_checkout_state', 'yprint_save_checkout_state');

/**
 * AJAX-Handler für Checkout-Prozess
 */
function yprint_process_checkout() {
    check_ajax_referer('yprint-checkout-nonce', 'security');
    
    if (!isset($_POST['checkout_data'])) {
        wp_send_json_error(array(
            'message' => 'Keine Checkout-Daten vorhanden'
        ));
        return;
    }
    
    $checkout_data = $_POST['checkout_data'];
    $payment_verified = isset($_POST['payment_verified']) && $_POST['payment_verified'] === 'true';
    
    // Validierung der Daten
    $errors = array();
    
    // Lieferadresse prüfen
    if (empty($checkout_data['shipping_address']) || empty($checkout_data['shipping_address']['address_1'])) {
        $errors[] = 'Bitte gib eine Lieferadresse an';
    }
    
    // Zahlungsmethode prüfen
    if (empty($checkout_data['payment_method'])) {
        $errors[] = 'Bitte wähle eine Zahlungsmethode aus';
    }
    
    // Abweichende Rechnungsadresse prüfen wenn aktiviert
$different_billing_enabled = isset($checkout_data['different_billing']) && 
($checkout_data['different_billing'] === true || 
 $checkout_data['different_billing'] === 'true' || 
 $checkout_data['different_billing'] === 1 || 
 $checkout_data['different_billing'] === '1');

error_log('Different billing value: ' . print_r($checkout_data['different_billing'], true));
error_log('Different billing enabled: ' . ($different_billing_enabled ? 'true' : 'false'));

if ($different_billing_enabled) {
$has_different_billing_address = !empty($checkout_data['different_billing_address']) && 
        !empty($checkout_data['different_billing_address']['different_billing_address_1']);
        
if (!$has_different_billing_address) {
$errors[] = 'Bitte gib eine abweichende Rechnungsadresse an';
}
}
    
    // Bei Fehlern abbrechen
    if (!empty($errors)) {
        wp_send_json_error(array(
            'message' => implode(', ', $errors)
        ));
        return;
    }

    try {
        // Daten in WooCommerce Session speichern
        if (function_exists('WC') && WC()->session) {
            WC()->session->set('yprint_checkout_data', $checkout_data);
            
            // Zahlungsmethode in WooCommerce Session speichern
            if (!empty($checkout_data['payment_method'])) {
                WC()->session->set('chosen_payment_method', $checkout_data['payment_method']);
            }
            
            // Gutscheincode anwenden falls vorhanden
            if (!empty($checkout_data['coupon_code'])) {
                $coupon_code = sanitize_text_field($checkout_data['coupon_code']);
                if (!WC()->cart->has_discount($coupon_code)) {
                    WC()->cart->apply_coupon($coupon_code);
                }
            }
            
            // Kundendaten speichern, wenn angemeldet
            $user_id = get_current_user_id();
            if ($user_id > 0 && !empty($checkout_data['shipping_address'])) {
                foreach ($checkout_data['shipping_address'] as $key => $value) {
                    if ($key !== 'slot' && $key !== 'timestamp') {
                        update_user_meta($user_id, 'shipping_' . $key, sanitize_text_field($value));
                    }
                }
            }
            
            // Bestellung erstellen
$order_id = create_woocommerce_order($checkout_data);

if ($order_id) {
    // Zahlungsstatus speichern
    update_post_meta($order_id, '_payment_verified', $payment_verified);

    // Zahlungsart speichern
    if (!empty($checkout_data['payment_method'])) {
        update_post_meta($order_id, '_payment_method', sanitize_text_field($checkout_data['payment_method']));
    }
    
    // Zur individuellen Thank You Page weiterleiten
    $redirect_url = 'https://yprint.de/thank-you/';
    
    // Warenkorb leeren
    WC()->cart->empty_cart();
    
    wp_send_json_success(array(
        'redirect' => $redirect_url
    ));
} else {
    wp_send_json_error(array(
        'message' => 'Die Bestellung konnte nicht erstellt werden.'
    ));
}

        } else {
            throw new Exception('WooCommerce Session ist nicht verfügbar');
        }
    } catch (Exception $e) {
        error_log('YPrint Checkout Error: ' . $e->getMessage());
        wp_send_json_error(array(
            'message' => 'Ein technischer Fehler ist aufgetreten: ' . $e->getMessage()
        ));
    }
}

add_action('wp_ajax_yprint_process_checkout', 'yprint_process_checkout');
add_action('wp_ajax_nopriv_yprint_process_checkout', 'yprint_process_checkout');

/**
 * AJAX-Handler für Zahlungsvalidierung
 */
function yprint_validate_payment() {
    check_ajax_referer('yprint-checkout-nonce', 'security');
    
    if (!isset($_POST['payment_method']) || empty($_POST['payment_method'])) {
        wp_send_json_error(array(
            'message' => 'Keine Zahlungsmethode angegeben'
        ));
        return;
    }
    
    $payment_method = sanitize_text_field($_POST['payment_method']);
    $checkout_data = isset($_POST['checkout_data']) ? $_POST['checkout_data'] : array();
    
    // Zahlungsabwicklung je nach Zahlungsmethode
    if (strpos($payment_method, 'paypal') !== false) {
        // PayPal API Validierung
        // Hier würden Sie die eigentliche PayPal-Integration verwenden
        $validated = true; // Für Testzwecke immer erfolgreich
    } elseif (strpos($payment_method, 'stripe') !== false || 
              strpos($payment_method, 'apple_pay') !== false || 
              strpos($payment_method, 'google_pay') !== false || 
              strpos($payment_method, 'credit') !== false) {
        // Stripe/Kreditkarten Validierung
        // Hier würden Sie die eigentliche Stripe-Integration verwenden
        $validated = true; // Für Testzwecke immer erfolgreich
    } elseif (strpos($payment_method, 'sepa') !== false || 
              strpos($payment_method, 'lastschrift') !== false) {
        // SEPA/Lastschrift Validierung
        $validated = true; // Für Testzwecke immer erfolgreich
    } else {
        // Standard-Validierung für andere Zahlungsmethoden
        $validated = true; // Für Testzwecke immer erfolgreich
    }
    
    if ($validated) {
        wp_send_json_success(array(
            'validated' => true,
            'message' => 'Zahlung erfolgreich validiert'
        ));
    } else {
        wp_send_json_error(array(
            'validated' => false,
            'message' => 'Zahlung konnte nicht validiert werden'
        ));
    }
}
add_action('wp_ajax_yprint_validate_payment', 'yprint_validate_payment');
add_action('wp_ajax_nopriv_yprint_validate_payment', 'yprint_validate_payment');

/**
 * AJAX-Handler für Zahlungsmethoden-Updates
 */
function yprint_update_payment_method() {
    if (!isset($_POST['payment_method'])) {
        wp_send_json_error('Keine Zahlungsmethode angegeben');
        return;
    }

    $payment_method = sanitize_text_field($_POST['payment_method']);
    
    // WooCommerce Session aktualisieren
    if (function_exists('WC') && WC()->session) {
        WC()->session->set('chosen_payment_method', $payment_method);
    }
    
    wp_send_json_success();
}
add_action('wp_ajax_yprint_update_payment_method', 'yprint_update_payment_method');
add_action('wp_ajax_nopriv_yprint_update_payment_method', 'yprint_update_payment_method');

/**
 * YPrint Shipping Address Shortcode
 * 
 * Shortcode für die Lieferadresse im Checkout
 */

// Verhindern direkter Aufrufe
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Shortcode für die Lieferadresse
 */
function yprint_shipping_address_shortcode() {
    if (!function_exists('WC')) {
        return 'WooCommerce ist nicht aktiviert.';
    }

    $user_id = get_current_user_id();
    
    // Primäre Adresse abrufen
    $customer = new WC_Customer($user_id);
    $primary_address = [
        'first_name' => $customer->get_shipping_first_name(),
        'last_name' => $customer->get_shipping_last_name(),
        'address_1' => $customer->get_shipping_address_1(),
        'address_2' => $customer->get_shipping_address_2(),
        'postcode' => $customer->get_shipping_postcode(),
        'city' => $customer->get_shipping_city(),
        'country' => $customer->get_shipping_country()
    ];

    // Zusätzliche Adressen abrufen
    $secondary_addresses = get_user_meta($user_id, 'yprint_additional_shipping_addresses', true) ?: [];
    
    // Aktuelle ausgewählte Adresse
    $current_slot = WC()->session ? WC()->session->get('yprint_selected_shipping_slot') : 'primary';
    if (!$current_slot) {
        $current_slot = 'primary';
    }

    ob_start();
    ?>
    <div class="yprint-shipping-address">
        <div class="yprint-address-selector">
            <h3>Lieferadresse auswählen</h3>
            <div class="yprint-address-slots">
                <!-- Primäre Adresse -->
                <div class="yprint-address-slot <?php echo ($current_slot === 'primary') ? 'active' : ''; ?>" 
                     data-slot="primary">
                    <span class="yprint-slot-title">Meine Lieferanschrift</span>
                    <?php if (!empty($primary_address['address_1'])): ?>
                    <span class="yprint-slot-preview">
                        <?php echo esc_html($primary_address['address_1'] . ', ' . $primary_address['postcode'] . ' ' . $primary_address['city']); ?>
                    </span>
                    <?php endif; ?>
                </div>

                <!-- Zusätzliche Adressen -->
                <?php foreach ($secondary_addresses as $index => $address): ?>
                    <div class="yprint-address-slot <?php echo ($current_slot === 'secondary_' . $index) ? 'active' : ''; ?>" 
                         data-slot="secondary_<?php echo $index; ?>">
                        <span class="yprint-slot-title">Lieferanschrift <?php echo ($index + 2); ?></span>
                        <?php if (!empty($address['address_1'])): ?>
                        <span class="yprint-slot-preview">
                            <?php echo esc_html($address['address_1'] . ', ' . $address['postcode'] . ' ' . $address['city']); ?>
                        </span>
                        <?php endif; ?>
                    </div>
                <?php endforeach; ?>

                <!-- Neue Adresse Button -->
                <?php if (count($secondary_addresses) < 2): ?>
                    <div class="yprint-address-slot yprint-new-slot" data-slot="new">
                        <span class="yprint-slot-title">+ Neue Lieferanschrift</span>
                    </div>
                <?php endif; ?>
            </div>
        </div>

        <div class="yprint-form-section">
            <input type="hidden" name="current_address_slot" id="current_address_slot" value="<?php echo esc_attr($current_slot); ?>">
            
            <div class="yprint-form-row">
                <input type="text" 
                       name="shipping_first_name" 
                       class="yprint-shipping-field"
                       placeholder="Vorname"
                       required>
                
                <input type="text" 
                       name="shipping_last_name" 
                       class="yprint-shipping-field"
                       placeholder="Name"
                       required>
            </div>

            <div class="yprint-form-row">
                <input type="text" 
                       name="shipping_address_1" 
                       class="yprint-shipping-field"
                       placeholder="Straße"
                       required>
                
                <input type="text" 
                       name="shipping_address_2" 
                       class="yprint-shipping-field"
                       placeholder="Hausnummer"
                       required>
            </div>

            <div class="yprint-form-row">
                <input type="text" 
                       name="shipping_postcode" 
                       class="yprint-shipping-field"
                       placeholder="PLZ"
                       required>
                
                <input type="text" 
                       name="shipping_city" 
                       class="yprint-shipping-field"
                       placeholder="Ort"
                       required>
            </div>

            <div class="yprint-form-row">
                <select name="shipping_country" class="yprint-shipping-field" required>
                    <?php
                    $countries_obj = new WC_Countries();
                    $countries = $countries_obj->get_shipping_countries();
                    $default_country = $primary_address['country'] ?: $countries_obj->get_base_country();
                    
                    foreach ($countries as $code => $name) {
                        echo '<option value="' . esc_attr($code) . '" ' . 
                             selected($default_country, $code, false) . '>' . 
                             esc_html($name) . '</option>';
                    }
                    ?>
                </select>
            </div>
        </div>
    </div>
    
    <style>
    .yprint-shipping-address {
        width: 100%;
        font-family: 'Roboto', sans-serif;
    }

    .yprint-address-selector {
        margin-bottom: 30px;
    }

    .yprint-address-selector h3 {
        font-size: 18px;
        margin-bottom: 15px;
        color: #333;
    }

    .yprint-address-slots {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .yprint-address-slot {
        padding: 15px 20px;
        border: 2px solid #e0e0e0;
        border-radius: 5px;
        cursor: pointer;
        transition: all 0.3s ease;
        background: white;
        color: #333;
        flex: 1;
        min-width: 200px;
        display: flex;
        flex-direction: column;
    }

    .yprint-slot-title {
        font-weight: 500;
        margin-bottom: 5px;
    }

    .yprint-slot-preview {
        font-size: 0.9em;
        color: #666;
    }

    .yprint-address-slot:hover {
        border-color: #2997FF;
        color: #2997FF;
    }

    .yprint-address-slot.active {
        border-color: #2997FF;
        background: #f0f6ff;
    }

    .yprint-new-slot {
        border-style: dashed;
        color: #2997FF;
        justify-content: center;
        align-items: center;
    }

    .yprint-form-section {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .yprint-form-row {
        display: flex;
        gap: 15px;
    }

    .yprint-form-row input,
    .yprint-form-row select {
        flex: 1;
        padding: 12px 15px;
        border: 1px solid #e0e0e0;
        border-radius: 6px;
        font-size: 1rem;
        background-color: #FFF;
        transition: all 0.3s ease;
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
    }

    .yprint-form-row select {
        background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23333' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'><polyline points='6 9 12 15 18 9'></polyline></svg>");
        background-repeat: no-repeat;
        background-position: right 12px center;
        padding-right: 40px;
        cursor: pointer;
    }

    .yprint-form-row input:focus,
    .yprint-form-row select:focus {
        border-color: #2997FF;
        box-shadow: 0 0 0 2px rgba(41, 151, 255, 0.1);
        outline: none;
    }

    .yprint-form-row input:hover,
    .yprint-form-row select:hover {
        border-color: #aaa;
    }

    .yprint-form-row select::-ms-expand {
        display: none;
    }

    .yprint-form-row input.error {
        border-color: #dc3545;
    }

    @media (max-width: 600px) {
        .yprint-form-row {
            flex-direction: column;
        }
        
        .yprint-settings-content {
            padding: 15px 0;
        }

        .yprint-address-slot {
            min-width: 100%;
        }
    }
    </style>

    <script>
    jQuery(document).ready(function($) {
        const primaryAddress = <?php echo json_encode($primary_address); ?>;
        const secondaryAddresses = <?php echo json_encode($secondary_addresses); ?>;
        let currentSlot = '<?php echo esc_js($current_slot); ?>';

        // Adressdaten laden
        function loadAddressData(slot) {
            let addressData;
            
            if (slot === 'primary') {
                addressData = primaryAddress;
            } else if (slot === 'new') {
                $('.yprint-shipping-field').val('');
                return;
            } else {
                const index = slot.replace('secondary_', '');
                addressData = secondaryAddresses[index] || {};
            }

            // Felder füllen
            Object.entries(addressData).forEach(([key, value]) => {
                $(`[name="shipping_${key}"]`).val(value);
            });

            // YPrintCheckoutSystem aktualisieren
            if (typeof YPrintCheckoutSystem !== 'undefined') {
                YPrintCheckoutSystem.updateState('shippingAddress', {
                    slot: slot,
                    ...addressData
                });
            }
        }
        // Initiale Adresse laden
        loadAddressData(currentSlot);

        // Adress-Slot Auswahl
        $('.yprint-address-slot').click(function() {
            const slot = $(this).data('slot');
            
            $('.yprint-address-slot').removeClass('active');
            $(this).addClass('active');
            
            currentSlot = slot;
            $('#current_address_slot').val(slot);
            
            loadAddressData(slot);

            // Session aktualisieren
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'yprint_update_shipping_slot',
                    slot: slot,
                    security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
                }
            });
        });

        // Feldänderungen
        $('.yprint-shipping-field').on('change input', function() {
            const field = $(this).attr('name').replace('shipping_', '');
            const value = $(this).val();

            // YPrintCheckoutSystem aktualisieren
            if (typeof YPrintCheckoutSystem !== 'undefined') {
                YPrintCheckoutSystem.updateState('shippingAddress', {
                    [field]: value
                });
            }

            // Automatisches Speichern
            saveAddress();
        });

        // Adresse speichern
        function saveAddress() {
            const addressData = {};
            $('.yprint-shipping-field').each(function() {
                const field = $(this).attr('name').replace('shipping_', '');
                addressData[field] = $(this).val();
            });

            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'yprint_save_shipping_address',
                    slot: currentSlot,
                    address: addressData,
                    security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
                },
                success: function(response) {
                    if (response.success) {
                        // Adressvorschau aktualisieren
                        updateAddressPreview(currentSlot, addressData);
                    }
                }
            });
        }

        // Adressvorschau aktualisieren
        function updateAddressPreview(slot, address) {
            const $slot = $(`.yprint-address-slot[data-slot="${slot}"]`);
            const preview = `${address.address_1}, ${address.postcode} ${address.city}`;
            
            let $preview = $slot.find('.yprint-slot-preview');
            if (!$preview.length) {
                $preview = $('<span class="yprint-slot-preview"></span>').appendTo($slot);
            }
            $preview.text(preview);
        }

        // Auf State-Updates reagieren
        $(document).on('checkoutStateUpdate', function(e, state) {
            if (state.shippingAddress && state.shippingAddress.slot === currentSlot) {
                const address = state.shippingAddress;
                if (address) {
                    Object.entries(address).forEach(([field, value]) => {
                        if (field !== 'slot' && field !== 'timestamp') {
                            $(`[name="shipping_${field}"]`).val(value);
                        }
                    });
                }
            }
        });
    });
    </script>
    <?php
    
    return ob_get_clean();
}
add_shortcode('yprint_shipping_address', 'yprint_shipping_address_shortcode');

// AJAX Handler für Slot-Updates
function yprint_update_shipping_slot() {
    check_ajax_referer('yprint-checkout-nonce', 'security');
    
    if (isset($_POST['slot'])) {
        $slot = sanitize_text_field($_POST['slot']);
        
        if (function_exists('WC') && WC()->session) {
            WC()->session->set('yprint_selected_shipping_slot', $slot);
        }
        
        wp_send_json_success();
    }
    
    wp_send_json_error('Kein Slot angegeben');
}
add_action('wp_ajax_yprint_update_shipping_slot', 'yprint_update_shipping_slot');
add_action('wp_ajax_nopriv_yprint_update_shipping_slot', 'yprint_update_shipping_slot');

// AJAX Handler für Adress-Speicherung
function yprint_save_shipping_address() {
    check_ajax_referer('yprint-checkout-nonce', 'security');
    
    $user_id = get_current_user_id();
    $slot = isset($_POST['slot']) ? sanitize_text_field($_POST['slot']) : '';
    $address = isset($_POST['address']) ? $_POST['address'] : array();

    if (empty($slot) || empty($address)) {
        wp_send_json_error('Ungültige Daten');
        return;
    }

    if ($slot === 'primary') {
        // Primäre Adresse aktualisieren
        foreach ($address as $key => $value) {
            update_user_meta($user_id, "shipping_{$key}", sanitize_text_field($value));
        }
    } else if (strpos($slot, 'secondary_') === 0) {
        // Zusätzliche Adresse speichern
        $secondary_addresses = get_user_meta($user_id, 'yprint_additional_shipping_addresses', true) ?: array();
        $index = intval(str_replace('secondary_', '', $slot));
        $secondary_addresses[$index] = array_map('sanitize_text_field', $address);
        update_user_meta($user_id, 'yprint_additional_shipping_addresses', $secondary_addresses);
    } else if ($slot === 'new') {
        // Neue Adresse erstellen
        $secondary_addresses = get_user_meta($user_id, 'yprint_additional_shipping_addresses', true) ?: array();
        $secondary_addresses[] = array_map('sanitize_text_field', $address);
        update_user_meta($user_id, 'yprint_additional_shipping_addresses', $secondary_addresses);
    }

    wp_send_json_success();
}
add_action('wp_ajax_yprint_save_shipping_address', 'yprint_save_shipping_address');
add_action('wp_ajax_nopriv_yprint_save_shipping_address', 'yprint_save_shipping_address');

/**
 * YPrint Payment Options Shortcode
 * 
 * Shortcode für die Zahlungsmethoden im Checkout
 */

// Verhindern direkter Aufrufe
if (!defined('ABSPATH')) {
    exit;
}

function yprint_payment_options_shortcode() {
    if (!function_exists('WC')) {
        return 'WooCommerce ist nicht aktiviert.';
    }

    $available_gateways = WC()->payment_gateways()->get_available_payment_gateways();
    $chosen_payment_method = WC()->session ? WC()->session->get('chosen_payment_method') : '';

    ob_start();
    ?>
    <div class="yprint-payment-options">
        <div class="yprint-payment-grid">
            <?php if (!empty($available_gateways)) : ?>
                <?php foreach ($available_gateways as $gateway) : ?>
                    <div class="yprint-payment-option <?php echo ($chosen_payment_method == $gateway->id) ? 'selected' : ''; ?>" data-payment-id="<?php echo $gateway->id; ?>">
                        <input 
                            type="radio" 
                            id="payment_method_<?php echo $gateway->id; ?>" 
                            name="payment_method" 
                            value="<?php echo $gateway->id; ?>"
                            <?php checked($chosen_payment_method, $gateway->id); ?>
                            class="yprint-hidden-radio"
                            required
                        >
                        <label for="payment_method_<?php echo $gateway->id; ?>" class="yprint-payment-label">
                            <?php
                            $icon_class = '';
                            if (strpos($gateway->id, 'paypal') !== false) {
                                $icon_class = 'yprint-payment-icon yprint-icon-paypal';
                            } elseif (strpos($gateway->id, 'stripe') !== false || strpos($gateway->id, 'credit') !== false) {
                                $icon_class = 'yprint-payment-icon yprint-icon-card';
                            } elseif (strpos($gateway->id, 'bacs') !== false || strpos($gateway->id, 'bank') !== false) {
                                $icon_class = 'yprint-payment-icon yprint-icon-bank';
                            } elseif (strpos($gateway->id, 'cod') !== false || strpos($gateway->id, 'cash') !== false) {
                                $icon_class = 'yprint-payment-icon yprint-icon-cash';
                            } elseif (strpos($gateway->id, 'klarna') !== false) {
                                $icon_class = 'yprint-payment-icon yprint-icon-klarna';
                            } elseif (strpos($gateway->id, 'sofort') !== false) {
                                $icon_class = 'yprint-payment-icon yprint-icon-sofort';
                            } elseif (strpos($gateway->id, 'sepa') !== false) {
                                $icon_class = 'yprint-payment-icon yprint-icon-sepa';
                            } else {
                                $icon_class = 'yprint-payment-icon yprint-icon-default';
                            }
                            ?>
                            <div class="<?php echo $icon_class; ?>"></div>
                            <span class="yprint-payment-title"><?php echo $gateway->get_title(); ?></span>
                            <?php if ($gateway->has_fields() || $gateway->get_description()) : ?>
                                <div class="yprint-payment-description">
                                    <?php echo $gateway->get_description(); ?>
                                </div>
                            <?php endif; ?>
                        </label>
                    </div>
                <?php endforeach; ?>
            <?php else : ?>
                <p class="yprint-no-payment-methods">Keine Zahlungsmethoden verfügbar.</p>
            <?php endif; ?>
        </div>
    </div>

    <style>
    .yprint-payment-options {
        width: 100%;
        font-family: 'Roboto', sans-serif;
    }

    .yprint-payment-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 15px;
    }

    .yprint-payment-option {
        border: 2px solid #e0e0e0;
        border-radius: 5px;
        overflow: hidden;
        transition: all 0.3s ease;
        background: white;
    }

    .yprint-payment-option:hover {
        border-color: #2997FF;
    }

    .yprint-payment-option.selected {
        border-color: #2997FF;
        background-color: #f0f6ff;
    }

    .yprint-hidden-radio {
        position: absolute;
        opacity: 0;
        height: 0;
        width: 0;
    }

    .yprint-payment-label {
        display: block;
        padding: 15px;
        cursor: pointer;
        width: 100%;
        height: 100%;
    }

    .yprint-payment-icon {
        width: 40px;
        height: 40px;
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
        margin-bottom: 10px;
    }

    .yprint-icon-paypal {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="40" height="40"><path fill="%230070E0" d="M19.2,5.4c-0.5-0.5-1.1-1-1.8-1.2C16.5,4,15.6,3.9,14.7,3.9H9.6c-0.5,0-0.9,0.3-1,0.8L6.3,16c-0.1,0.3,0.2,0.6,0.5,0.6h3.5l0.3-1.7v0.1c0.1-0.5,0.5-0.8,1-0.8h2.1c3,0,5.3-1.2,6-4.5c0-0.1,0-0.2,0.1-0.3c0.2-1.3,0-2.2-0.6-3"></path><path fill="%231F264F" d="M9.3,7.9c0.1-0.4,0.3-0.7,0.6-0.9C10.1,6.9,10.4,6.8,10.7,6.8l4.3,0c0.5,0,1,0.1,1.4,0.2c0.1,0,0.2,0.1,0.3,0.1c0.1,0,0.2,0.1,0.3,0.1c0.1,0,0.2,0.1,0.2,0.1c0.1,0,0.2,0.1,0.2,0.1c0.3,0.1,0.5,0.3,0.7,0.5c0.5-2.9-0.02-4.9-1.7-6.7C14.9-0.3,12.2,0,10,0H3.6C3,0,2.5,0.4,2.4,1L0,17.2c-0.1,0.5,0.3,1,0.8,1h6l1.5-9.3L9.3,7.9z"></path></svg>');
    }

    .yprint-icon-card {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="40" height="40"><path fill="%231F264F" d="M20,4H4C2.9,4,2,4.9,2,6v12c0,1.1,0.9,2,2,2h16c1.1,0,2-0.9,2-2V6C22,4.9,21.1,4,20,4z M20,18H4V12h16V18z M20,8H4V6h16V8z"></path><path fill="%231F264F" d="M6,14h4v2H6V14z M12,14h6v2h-6V14z"></path></svg>');
    }

    .yprint-icon-bank {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="40" height="40"><path fill="%231F264F" d="M12,3L2,8v2h20V8L12,3z M4,12h4v6H4V12z M10,12h4v6h-4V12z M16,12h4v6h-4V12z M2,20v2h20v-2H2z"></path></svg>');
    }

    .yprint-icon-cash {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="40" height="40"><path fill="%231F264F" d="M11,8v3H9v2h2v2H9v2h2v3h2v-3h2v-2h-2v-2h2v-2h-2V8H11z M21,4H3C1.9,4,1,4.9,1,6v12c0,1.1,0.9,2,2,2h18c1.1,0,2-0.9,2-2V6C23,4.9,22.1,4,21,4z M21,18H3V6h18V18z"></path></svg>');
    }

    .yprint-icon-klarna {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="40" height="40"><path fill="%23FFB3C7" d="M12,2C6.5,2,2,6.5,2,12s4.5,10,10,10s10-4.5,10-10S17.5,2,12,2z M12,20c-4.4,0-8-3.6-8-8s3.6-8,8-8s8,3.6,8,8S16.4,20,12,20z"></path><path fill="%23FFB3C7" d="M12,6c-1.1,0-2,0.9-2,2v8c0,1.1,0.9,2,2,2s2-0.9,2-2V8C14,6.9,13.1,6,12,6z"></path></svg>');
    }

    .yprint-icon-sofort {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="40" height="40"><path fill="%23EB6F93" d="M12,2C6.5,2,2,6.5,2,12s4.5,10,10,10s10-4.5,10-10S17.5,2,12,2z M15.5,15.5h-7v-7h7V15.5z"></path><path fill="%23EB6F93" d="M10.5,10.5h3v3h-3V10.5z"></path></svg>');
    }

    .yprint-icon-sepa {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="40" height="40"><path fill="%231F264F" d="M4,4h16c1.1,0,2,0.9,2,2v12c0,1.1-0.9,2-2,2H4c-1.1,0-2-0.9-2-2V6C2,4.9,2.9,4,4,4z M4,6v12h16V6H4z"></path><path fill="%231F264F" d="M6,10h12v2H6V10z M6,14h8v2H6V14z"></path></svg>');
    }

    .yprint-icon-default {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="40" height="40"><path fill="%231F264F" d="M20,4H4C2.9,4,2,4.9,2,6v12c0,1.1,0.9,2,2,2h16c1.1,0,2-0.9,2-2V6C22,4.9,21.1,4,20,4z M20,18H4V6h16V18z"></path><path fill="%231F264F" d="M13,15h4v2h-4V15z M11,11H7v2h4V11z M15,11h2v2h-2V11z"></path></svg>');
    }

    .yprint-payment-title {
        display: block;
        font-weight: 600;
        margin-bottom: 5px;
        font-size: 1rem;
    }

    .yprint-payment-description {
        font-size: 0.85rem;
        color: #666;
        margin-top: 8px;
        display: none;
    }

    .yprint-payment-option.selected .yprint-payment-description {
        display: block;
    }

    .yprint-payment-option.error {
        animation: yprint-shake 0.5s;
        border-color: #dc3545;
    }

    @keyframes yprint-shake {
        0%, 100% { transform: translateX(0); }
        25% { transform: translateX(-5px); }
        75% { transform: translateX(5px); }
    }

    .yprint-no-payment-methods {
        text-align: center;
        color: #dc3545;
        padding: 20px;
        border: 1px solid #dc3545;
        border-radius: 4px;
        grid-column: 1 / -1;
    }

    @media (max-width: 600px) {
        .yprint-payment-grid {
            grid-template-columns: 1fr;
        }
    }
    </style>

    <script>
    jQuery(document).ready(function($) {
        const $paymentOptions = $('.yprint-payment-option');
        const $paymentInputs = $('input[name="payment_method"]');
        
        // Initial State setzen
        const initialPayment = $('input[name="payment_method"]:checked').val();
        if (initialPayment) {
            // YPrintCheckoutSystem aktualisieren wenn verfügbar
            if (typeof YPrintCheckoutSystem !== 'undefined') {
                YPrintCheckoutSystem.updateState('paymentMethod', {
                    method: initialPayment,
                    timestamp: Date.now()
                });
            }
        }

        // Zahlungsmethode ändern
$paymentInputs.on('change', function() {
    const $selectedOption = $(this).closest('.yprint-payment-option');
    
    // UI Update
    $paymentOptions.removeClass('selected');
    $selectedOption.addClass('selected');
    
    // Fehlerklasse entfernen
    $paymentOptions.removeClass('error');
    
    // YPrintCheckoutSystem aktualisieren wenn verfügbar
    if (typeof YPrintCheckoutSystem !== 'undefined') {
        YPrintCheckoutSystem.updateState('paymentMethod', {
            method: this.value,
            timestamp: Date.now()
        });
    }

    // WooCommerce Integration - Standard-Event trigger
    $(document.body).trigger('payment_method_selected');
    
    // Die Standard-WooCommerce Zahlungsmethode aktualisieren
    $('input[name="payment_method"][value="' + this.value + '"]').prop('checked', true).trigger('click');
});
        // WooCommerce Payment Update
        function updateWooCommercePayment(method) {
            $.ajax({
                type: 'POST',
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                data: {
                    action: 'yprint_update_payment_method',
                    payment_method: method,
                    security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
                },
                success: function(response) {
                    if (response.success) {
                        $(document.body).trigger('payment_method_selected');
                    }
                }
            });
        }

        // Auf State-Updates reagieren wenn YPrintCheckoutSystem verfügbar
        $(document).on('checkoutStateUpdate', function(e, state) {
            if (state && state.paymentMethod && state.paymentMethod.method) {
                const $radio = $(`input[value="${state.paymentMethod.method}"]`);
                if (!$radio.is(':checked')) {
                    $radio.prop('checked', true).trigger('change');
                }
            }
        });

        // Fehlerbehandlung
        $(document).on('checkout_error', function() {
            if (!$paymentInputs.filter(':checked').length) {
                $paymentOptions.addClass('error');
                $('html, body').animate({
                    scrollTop: $('.yprint-payment-options').offset().top - 100
                }, 500);
            }
        });

        // Validierung vor Submit
        $(document).on('checkout_place_order', function() {
            if (!$paymentInputs.filter(':checked').length) {
                $paymentOptions.addClass('error');
                return false;
            }
            return true;
        });
    });
    </script>
    <?php
    
    return ob_get_clean();
}
add_shortcode('yprint_payment_options', 'yprint_payment_options_shortcode');

/**
 * YPrint Different Billing Shortcode
 * 
 * Shortcode für die abweichende Rechnungsadresse im Checkout
 */

// Verhindern direkter Aufrufe
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Shortcode für abweichende Rechnungsadresse
 */
function yprint_different_billing_shortcode() {
    if (!function_exists('WC')) {
        return 'WooCommerce ist nicht aktiviert.';
    }

    // Aktuelle Benutzerdaten abrufen
    $user_id = get_current_user_id();
    
    // WooCommerce Billing Felder abrufen
    $different_billing_first_name = get_user_meta($user_id, 'billing_first_name', true);
    $different_billing_last_name = get_user_meta($user_id, 'billing_last_name', true);
    $different_billing_email = get_user_meta($user_id, 'billing_email', true);
    $different_billing_address_1 = get_user_meta($user_id, 'billing_address_1', true);
    $different_billing_address_2 = get_user_meta($user_id, 'billing_address_2', true);
    $different_billing_postcode = get_user_meta($user_id, 'billing_postcode', true);
    $different_billing_city = get_user_meta($user_id, 'billing_city', true);
    $different_billing_country = get_user_meta($user_id, 'billing_country', true);
    $different_billing_enabled = false; // Immer als deaktiviert starten

    ob_start();
    ?>
    <div class="yprint-different-billing">
        <div class="yprint-checkbox-group">
            <input type="checkbox" 
                   id="different_billing" 
                   name="different_billing" 
                   class="yprint-billing-toggle"
                   <?php checked($different_billing_enabled, true); ?> />
            <label for="different_billing">Abweichende Rechnungsadresse</label>
        </div>
        
        <div id="different_billing_fields" class="yprint-conditional-fields" style="display: <?php echo $different_billing_enabled ? 'block' : 'none'; ?>;">
            <div class="yprint-form-row">
                <input type="text" 
                       name="different_billing_first_name" 
                       placeholder="Vorname" 
                       value="<?php echo esc_attr($different_billing_first_name); ?>" 
                       class="yprint-billing-field" />
                
                <input type="text" 
                       name="different_billing_last_name" 
                       placeholder="Name" 
                       value="<?php echo esc_attr($different_billing_last_name); ?>" 
                       class="yprint-billing-field" />
            </div>

            <div class="yprint-form-row">
                <input type="email" 
                       name="different_billing_email" 
                       placeholder="E-Mail" 
                       value="<?php echo esc_attr($different_billing_email); ?>" 
                       class="yprint-billing-field" />
            </div>

            <div class="yprint-form-row">
                <input type="text" 
                       name="different_billing_address_1" 
                       placeholder="Straße" 
                       value="<?php echo esc_attr($different_billing_address_1); ?>" 
                       class="yprint-billing-field" />
                
                <input type="text" 
                       name="different_billing_address_2" 
                       placeholder="Hausnummer" 
                       value="<?php echo esc_attr($different_billing_address_2); ?>" 
                       class="yprint-billing-field" />
            </div>

            <div class="yprint-form-row">
                <input type="text" 
                       name="different_billing_postcode" 
                       placeholder="PLZ" 
                       value="<?php echo esc_attr($different_billing_postcode); ?>" 
                       class="yprint-billing-field" />
                
                <input type="text" 
                       name="different_billing_city" 
                       placeholder="Ort" 
                       value="<?php echo esc_attr($different_billing_city); ?>" 
                       class="yprint-billing-field" />
            </div>

            <div class="yprint-form-row">
                <select name="different_billing_country" class="yprint-billing-field">
                    <?php
                    $countries_obj = new WC_Countries();
                    $countries = $countries_obj->get_countries();
                    $default_country = $different_billing_country ?: $countries_obj->get_base_country();
                    
                    foreach ($countries as $code => $name) {
                        echo '<option value="' . esc_attr($code) . '" ' . 
                             selected($default_country, $code, false) . '>' . 
                             esc_html($name) . '</option>';
                    }
                    ?>
                </select>
            </div>
        </div>
    </div>
    
    <style>
    .yprint-different-billing {
        width: 100%;
        font-family: 'Roboto', sans-serif;
    }

    .yprint-checkbox-group {
        display: flex;
        align-items: center;
        margin-bottom: 15px;
        color: #1d1d1f;
        cursor: pointer;
    }

    .yprint-checkbox-group a {
        color: #2997FF;
        text-decoration: none;
    }

    .yprint-checkbox-group a:hover {
        text-decoration: underline;
    }

    .yprint-checkbox-group input[type="checkbox"] {
        margin-right: 10px;
    }

    .yprint-conditional-fields {
        margin-top: 15px;
    }

    .yprint-form-row {
        display: flex;
        gap: 15px;
        margin-bottom: 15px;
    }

    .yprint-form-row input,
    .yprint-form-row select {
        flex: 1;
        padding: 10px;
        border: 1px solid #e0e0e0;
        border-radius: 4px;
        font-family: 'Roboto', sans-serif;
    }

    .yprint-form-row input:focus,
    .yprint-form-row select:focus {
        border-color: #2997FF;
        outline: none;
    }

    @media (max-width: 600px) {
        .yprint-form-row {
            flex-direction: column;
        }
        
        .yprint-form-row input,
        .yprint-form-row select {
            width: 100%;
        }
    }
    </style>

    <script>
    jQuery(document).ready(function($) {
        const checkbox = $('#different_billing');
        const fieldsContainer = $('#different_billing_fields');
        const hasExistingData = <?php echo !empty($different_billing_first_name) || 
                                         !empty($different_billing_last_name) || 
                                         !empty($different_billing_email) ? 'true' : 'false'; ?>;
        
        // Force unchecked state
        checkbox.prop('checked', false);
        fieldsContainer.hide();

        // Toggle Felder
        checkbox.change(function() {
            if (this.checked) {
                fieldsContainer.slideDown(300);
            } else {
                fieldsContainer.slideUp(300);
            }

            // Update YPrintCheckoutSystem
            if (typeof YPrintCheckoutSystem !== 'undefined') {
                YPrintCheckoutSystem.updateState('differentBilling', {
                    enabled: this.checked
                });
            }
            
            // Metadaten aktualisieren
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'yprint_update_different_billing_enabled',
                    enabled: this.checked ? 1 : 0,
                    security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
                }
            });
        });

        // Feldänderungen
        $('.yprint-billing-field').on('change', function() {
            // Update YPrintCheckoutSystem
            if (typeof YPrintCheckoutSystem !== 'undefined') {
                YPrintCheckoutSystem.updateState('differentBillingAddress', {
                    [this.name]: this.value
                });
            }
            
            // Metadaten aktualisieren
            saveBillingAddress();
        });

        // Adresse speichern
        function saveBillingAddress() {
            const addressData = {};
            $('.yprint-billing-field').each(function() {
                addressData[$(this).attr('name')] = $(this).val();
            });
            
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'yprint_save_different_billing_address',
                    address: addressData,
                    security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
                }
            });
        }

        // Auf State-Updates reagieren
        $(document).on('checkoutStateUpdate', function(e, state) {
            if (state && state.differentBillingAddress) {
                Object.entries(state.differentBillingAddress).forEach(([field, value]) => {
                    $(`[name="${field}"]`).val(value);
                });
            }
            
            // Wir ignorieren den State für die Checkbox und behalten den initialen Zustand bei
            // Immer deaktiviert bleiben, es sei denn, der Benutzer aktiviert es manuell
        });
    });
    </script>

    <?php
    return ob_get_clean();
}
add_shortcode('yprint_different_billing', 'yprint_different_billing_shortcode');

// AJAX Handler für Different Billing Toggle
function yprint_update_different_billing_enabled() {
    check_ajax_referer('yprint-checkout-nonce', 'security');
    
    $user_id = get_current_user_id();
    $enabled = isset($_POST['enabled']) ? (bool)$_POST['enabled'] : false;
    
    update_user_meta($user_id, 'different_billing_enabled', $enabled);
    wp_send_json_success();
}
add_action('wp_ajax_yprint_update_different_billing_enabled', 'yprint_update_different_billing_enabled');
add_action('wp_ajax_nopriv_yprint_update_different_billing_enabled', 'yprint_update_different_billing_enabled');

// AJAX Handler für Different Billing Adresse
function yprint_save_different_billing_address() {
    check_ajax_referer('yprint-checkout-nonce', 'security');
    
    $user_id = get_current_user_id();
    $address = isset($_POST['address']) ? $_POST['address'] : array();
    
    if ($address) {
        foreach ($address as $key => $value) {
            // Konvertieren von different_billing_* zu billing_*
            $meta_key = str_replace('different_billing_', 'billing_', $key);
            update_user_meta($user_id, $meta_key, sanitize_text_field($value));
        }
    }
    
    wp_send_json_success();
}
add_action('wp_ajax_yprint_save_different_billing_address', 'yprint_save_different_billing_address');
add_action('wp_ajax_nopriv_yprint_save_different_billing_address', 'yprint_save_different_billing_address');



/**
 * YPrint Order Summary Shortcode
 * 
 * Shortcode für die Bestellübersicht im Checkout
 */

// Verhindern direkter Aufrufe
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Shortcode für die Bestellübersicht
 */
function yprint_order_summary_shortcode() {
    if (!function_exists('WC')) {
        return 'WooCommerce ist nicht aktiviert.';
    }

    ob_start();
    ?>
    <div class="yprint-order-summary" id="yprint-order-summary">
        <h3 class="yprint-summary-title">Warenkorb</h3>
        
        <?php 
        foreach (WC()->cart->get_cart() as $cart_item_key => $cart_item) {
            $_product = apply_filters('woocommerce_cart_item_product', $cart_item['data'], $cart_item, $cart_item_key);
            
            $thumbnail = $_product->get_image('thumbnail', array('class' => 'yprint-item-image'));
            $product_name = apply_filters('woocommerce_cart_item_name', $_product->get_name(), $cart_item, $cart_item_key);
            $price = $cart_item['line_total'];
            $product_id = $_product->get_id();
            ?>
            <div class="yprint-order-item" data-cart-item-key="<?php echo esc_attr($cart_item_key); ?>" data-product-id="<?php echo esc_attr($product_id); ?>">
                <?php echo $thumbnail; ?>
                <div class="yprint-item-details">
                    <span class="yprint-item-title"><?php echo $product_name; ?></span>
                    <div class="yprint-item-quantity-wrapper">
        <button class="yprint-item-quantity-btn yprint-item-quantity-minus" data-cart-item-key="<?php echo esc_attr($cart_item_key); ?>">−</button>
        <span class="yprint-item-quantity-value"><?php echo esc_attr($cart_item['quantity']); ?></span>
        <input type="number" class="yprint-item-quantity-input" value="<?php echo esc_attr($cart_item['quantity']); ?>" min="1" style="display: none;">
        <button class="yprint-item-quantity-btn yprint-item-quantity-plus" data-cart-item-key="<?php echo esc_attr($cart_item_key); ?>">+</button>
    </div>
                </div>
                <div class="yprint-item-remove" data-cart-item-key="<?php echo esc_attr($cart_item_key); ?>">×</div>
                <span class="yprint-item-total"><?php echo wc_price($price); ?></span>
            </div>
            <?php 
        } 
        ?>

        <div class="yprint-summary-totals">
        <div class="yprint-subtotal">
            <span>Zwischensumme</span>
            <span><?php echo WC()->cart->get_cart_subtotal(); ?></span>
        </div>
        <div class="yprint-shipping">
            <span>Versand</span>
            <span><?php echo WC()->cart->get_cart_shipping_total(); ?></span>
        </div>
        <?php if (WC()->cart->get_discount_total() > 0) : ?>
        <div class="yprint-discount">
            <span>Rabatt</span>
            <span>-<?php echo wc_price(WC()->cart->get_discount_total()); ?></span>
        </div>
        <?php endif; ?>
        <div class="yprint-total">
            <span>Gesamtsumme</span>
            <span><?php echo WC()->cart->get_total(); ?></span>
        </div>
    </div>
</div>

<style>
.yprint-order-summary {
    width: 100%;
    font-family: 'Roboto', sans-serif;
    position: relative;
}

.yprint-summary-title {
    text-transform: none;
    font-size: 24px;
    font-weight: 600;
    margin-bottom: 20px;
    color: #1d1d1f;
}

.yprint-order-item {
    display: flex;
    align-items: center;
    gap: 16px;
    margin-bottom: 16px;
    padding-bottom: 16px;
    border-bottom: 1px solid #f5f5f7;
    position: relative;
}

.yprint-item-image {
    width: 64px;
    height: 64px;
    object-fit: cover;
    border-radius: 4px;
}

.yprint-item-details {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
}

.yprint-item-title {
    font-weight: 500;
    margin-bottom: 8px;
    color: #1d1d1f;
}

.yprint-item-quantity-wrapper {
    display: flex;
    align-items: center;
    gap: 8px;
}

.yprint-item-quantity-value {
    min-width: 24px;
    text-align: center;
    color: #0079FF;
    font-weight: 600;
    cursor: pointer;
}

.yprint-item-quantity-input {
    width: 30px;
    padding: 0;
    text-align: center;
    border: 1px solid #ddd;
    color: #0079FF;
    font-weight: 600;
}

.yprint-item-quantity-input::-webkit-outer-spin-button,
.yprint-item-quantity-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

.yprint-item-quantity-btn {
    width: 24px;
    height: 24px;
    border: none;
    background: transparent;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 16px;
    color: #1d1d1f;
    padding: 0;
}

.yprint-item-quantity-btn:hover {
    background: transparent;
}

.yprint-item-remove {
    cursor: pointer;
    color: #999;
    font-size: 18px;
    line-height: 1;
    padding: 0 5px;
    position: absolute;
    right: 0;
    top: 0;
}

.yprint-item-remove:hover {
    color: #0079FF;
}

.yprint-item-price {
    display: none;
}

.yprint-item-total {
    font-weight: 600;
    color: #0079FF;
}

.yprint-summary-totals {
    margin-top: 16px;
    padding-top: 16px;
    border-top: 1px solid #f5f5f7;
}

.yprint-subtotal, 
.yprint-shipping,
.yprint-discount,
.yprint-total {
    display: flex;
    justify-content: space-between;
    margin-bottom: 8px;
}

.yprint-subtotal span, 
.yprint-shipping span,
.yprint-discount span {
    color: #6e6e73;
}

.yprint-total {
    font-weight: 600;
    border-top: 1px solid #f5f5f7;
    padding-top: 12px;
    margin-top: 12px;
}

.yprint-total span {
    color: #1d1d1f;
}

.yprint-loading-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: transparent;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease;
}

.yprint-loading-overlay.active {
    opacity: 1;
    visibility: visible;
}
</style>

<script>
jQuery(document).ready(function($) {
    // Variable um zu verfolgen, ob ein Eingabefeld aktiv ist
    var isEditing = false;
    var $orderSummary = $('#yprint-order-summary');
    
    // Overlay zum Order Summary hinzufügen, falls noch nicht vorhanden
    if ($orderSummary.find('.yprint-loading-overlay').length === 0) {
        $orderSummary.prepend('<div class="yprint-loading-overlay"><img src="https://yprint.de/wp-content/uploads/2025/02/120225-logo.svg" alt="Loading..."></div>');
    }
    
    // PLUS/MINUS BUTTONS
    $orderSummary.on('click', '.yprint-item-quantity-btn', function() {
        if (isEditing) return; // Ignorieren, wenn Eingabe aktiv
        
        var $btn = $(this);
        var $item = $btn.closest('.yprint-order-item');
        var $qtyValue = $item.find('.yprint-item-quantity-value');
        var cartItemKey = $item.data('cart-item-key');
        var currentQty = parseInt($qtyValue.text());
        var newQty = $btn.hasClass('yprint-item-quantity-minus') ? 
                     Math.max(1, currentQty - 1) : 
                     currentQty + 1;
        
        // Menge sofort aktualisieren
        $qtyValue.text(newQty);
        
        // AJAX-Update der Menge
        updateQuantity(cartItemKey, newQty);
    });
    
    // DIREKTEINGABE DER MENGE
    // Klick auf Menge (zum Bearbeiten)
    $orderSummary.on('click', '.yprint-item-quantity-value', function() {
        if (isEditing) return; // Bereits im Bearbeitungsmodus
        
        isEditing = true;
        var $value = $(this);
        var $input = $value.siblings('.yprint-item-quantity-input');
        
        // Eingabefeld vorbereiten und anzeigen
        $input.val($value.text());
        $value.hide();
        $input.show().focus().select();
    });
    
    // Eingabefeld verlassen
    $orderSummary.on('blur', '.yprint-item-quantity-input', function() {
        var $input = $(this);
        var $item = $input.closest('.yprint-order-item');
        var $value = $item.find('.yprint-item-quantity-value');
        var cartItemKey = $item.data('cart-item-key');
        var oldQty = parseInt($value.text());
        var newQty = parseInt($input.val());
        
        // Gültigen Wert sicherstellen
        if (isNaN(newQty) || newQty < 1) newQty = 1;
        
        // UI zurücksetzen
        $input.hide();
        $value.show();
        
        // Bearbeitungsmodus beenden
        isEditing = false;
        
        // Nur bei Änderung aktualisieren
        if (newQty !== oldQty) {
            $value.text(newQty);
            updateQuantity(cartItemKey, newQty);
        }
    });
    
    // Enter-Taste im Eingabefeld
    $orderSummary.on('keypress', '.yprint-item-quantity-input', function(e) {
        if (e.which === 13) { // Enter
            e.preventDefault();
            $(this).blur();
        }
    });
    
    // Klick außerhalb schließt Eingabefeld
    $(document).on('mousedown', function(e) {
        if (isEditing) {
            var $target = $(e);
            if (!$target.is('.yprint-item-quantity-input') && !$target.is('.yprint-item-quantity-value')) {
                $orderSummary.find('.yprint-item-quantity-input:visible').blur();
            }
        }
    });
    
    // ENTFERNEN-BUTTON
    $orderSummary.on('click', '.yprint-item-remove', function() {
        var $item = $(this).closest('.yprint-order-item');
        var cartItemKey = $item.data('cart-item-key');
        
        // Overlay aktivieren
        $orderSummary.find('.yprint-loading-overlay').addClass('active');
        
        $.ajax({
            url: '<?php echo admin_url('admin-ajax.php'); ?>',
            type: 'POST',
            data: {
                action: 'yprint_remove_from_cart',
                cart_item_key: cartItemKey,
                security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
            },
            success: function(response) {
                // Nach Erfolg Seite neu laden
                if (response.cart_count !== undefined) {
                    location.reload();
                }
            },
            error: function(xhr, status, error) {
                console.error('Fehler beim Entfernen:', status, error);
                $orderSummary.find('.yprint-loading-overlay').removeClass('active');
                alert('Ein Fehler ist aufgetreten.');
            }
        });
    });
    
    // Funktion zum Aktualisieren der Menge
    function updateQuantity(cartItemKey, quantity) {
        // Overlay aktivieren
        $orderSummary.find('.yprint-loading-overlay').addClass('active');
        
        $.ajax({
            url: '<?php echo admin_url('admin-ajax.php'); ?>',
            type: 'POST',
            data: {
                action: 'yprint_update_cart_quantity',
                cart_item_key: cartItemKey,
                quantity: quantity,
                security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
            },
            success: function(response) {
                if (response.success || response.cart_subtotal !== undefined) {
                    location.reload();
                } else {
                    $orderSummary.find('.yprint-loading-overlay').removeClass('active');
                    alert(response.data || 'Ein Fehler ist aufgetreten.');
                }
            },
            error: function(xhr, status, error) {
                console.error('Fehler beim Aktualisieren:', status, error);
                $orderSummary.find('.yprint-loading-overlay').removeClass('active');
                alert('Ein Fehler ist aufgetreten.');
            }
        });
    }
});
</script>
    <?php
    
    return ob_get_clean();
}
add_shortcode('yprint_order_summary', 'yprint_order_summary_shortcode');

/**
 * YPrint Coupon and Buy Shortcode
 * 
 * Shortcode für das Gutschein-Feld und den Kaufen-Button im Checkout
 */

// Verhindern direkter Aufrufe
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Shortcode für Gutschein-Feld und Kaufen-Button
 */
function yprint_coupon_buy_shortcode() {
    if (!function_exists('WC')) {
        return 'WooCommerce ist nicht aktiviert.';
    }

    // Hole gespeicherten Gutscheincode
    $saved_coupon = WC()->session ? WC()->session->get('applied_coupon') : '';

    ob_start();
    ?>
    <div class="yprint-coupon-buy-section">
        <div class="yprint-coupon-form">
            <div class="yprint-coupon-input-wrapper">
                <input 
                    type="text" 
                    name="coupon_code" 
                    class="yprint-coupon-input" 
                    placeholder="Gutschein-Code eingeben" 
                    id="coupon_code" 
                    value="<?php echo esc_attr($saved_coupon); ?>" 
                />
                <button 
                    type="button"
                    class="yprint-coupon-button" 
                    id="apply_coupon"
                >
                    Anwenden
                </button>
            </div>
            <div class="yprint-coupon-message" style="display: none;"></div>
        </div>

        <button 
            type="button"
            id="yprint_checkout_submit"
            class="yprint-buy-button"
        >
            <span class="yprint-button-text">Jetzt kaufen</span>
            <div class="yprint-button-loader" style="display: none;">
                <div class="yprint-loader-spinner"></div>
            </div>
        </button>

        <!-- Validierungsfeedback -->
        <div class="yprint-validation-feedback" style="display: none;"></div>
    </div>

    <style>
    .yprint-coupon-buy-section {
        margin-top: 20px;
    }

    .yprint-coupon-form {
        margin-bottom: 20px;
    }

    .yprint-coupon-input-wrapper {
        display: flex;
        gap: 10px;
    }

    .yprint-coupon-input {
        flex: 1;
        padding: 12px;
        border: 1px solid #e0e0e0;
        border-radius: 5px;
        font-size: 1rem;
    }

    .yprint-coupon-input:focus {
        border-color: #2997FF;
        outline: none;
    }

    .yprint-coupon-button {
        padding: 0 20px;
        background-color: #f5f5f7;
        color: #1d1d1f;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1rem;
        transition: background-color 0.3s ease;
    }

    .yprint-coupon-button:hover {
        background-color: #e0e0e0;
    }

    .yprint-buy-button {
        width: 100%;
        padding: 15px;
        background-color: #0079FF;
        color: white;
        border: none;
        border-radius: 5px;
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s ease;
        position: relative;
    }

    .yprint-buy-button:disabled {
    background-color: #a0a0a0;
    cursor: not-allowed;
    opacity: 0.6;
}

    .yprint-buy-button:hover {
        background-color: #0068e1;
    }

    .yprint-button-loader {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .yprint-loader-spinner {
        width: 20px;
        height: 20px;
        border: 2px solid #fff;
        border-top-color: transparent;
        border-radius: 50%;
        animation: yprint-spin 0.8s linear infinite;
    }

    @keyframes yprint-spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .yprint-buy-button.loading .yprint-button-text {
        visibility: hidden;
    }

    .yprint-buy-button.loading .yprint-button-loader {
        display: block;
    }

    .yprint-coupon-message {
        margin-top: 10px;
        padding: 8px;
        border-radius: 4px;
        font-size: 0.9em;
    }

    .yprint-coupon-message.success {
        background-color: #d4edda;
        color: #155724;
    }

    .yprint-coupon-message.error {
        background-color: #f8d7da;
        color: #721c24;
    }

    .yprint-validation-feedback {
        margin-top: 15px;
        padding: 10px;
        border-radius: 4px;
        font-size: 0.9em;
    }

    .yprint-validation-feedback.error {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .yprint-validation-item {
        margin: 5px 0;
    }
    </style>

    <script>
    jQuery(document).ready(function($) {
        const $buyButton = $('#yprint_checkout_submit');
        const $couponButton = $('#apply_coupon');
        const $couponInput = $('#coupon_code');
        const $couponMessage = $('.yprint-coupon-message');
        const $validationFeedback = $('.yprint-validation-feedback');
        
        // Bei Seitenladung Warenkorb-Status prüfen
        function checkCartStatus() {
            const cartIsEmpty = <?php echo WC()->cart->is_empty() ? 'true' : 'false'; ?>;
            $buyButton.prop('disabled', cartIsEmpty);
        }

        checkCartStatus();

        // Gutschein anwenden
        $couponButton.on('click', function() {
            const couponCode = $couponInput.val().trim();
            
            if (!couponCode) {
                showCouponMessage('Bitte gib einen Gutschein-Code ein.', 'error');
                return;
            }
            
            // Button deaktivieren während der Anfrage
            $couponButton.prop('disabled', true);
            
            $.ajax({
                type: 'POST',
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                data: {
                    action: 'yprint_apply_coupon',
                    coupon_code: couponCode,
                    security: '<?php echo wp_create_nonce('yprint-checkout-nonce'); ?>'
                },
                success: function(response) {
                    $couponButton.prop('disabled', false);
                    
                    if (response.success) {
                        showCouponMessage('Gutschein wurde erfolgreich angewendet.', 'success');
                        
                        // YPrintCheckoutSystem aktualisieren
                        if (typeof YPrintCheckoutSystem !== 'undefined') {
                            YPrintCheckoutSystem.updateState('couponCode', {
                                code: couponCode
                            });
                        }
                        
                        // Seite neuladen um Preise zu aktualisieren
                        setTimeout(function() {
                            location.reload();
                        }, 1000);
                    } else {
                        showCouponMessage(response.data || 'Gutschein konnte nicht angewendet werden.', 'error');
                    }
                },
                error: function() {
                    $couponButton.prop('disabled', false);
                    showCouponMessage('Ein Fehler ist aufgetreten. Bitte versuche es erneut.', 'error');
                }
            });
        });

        // Gutschein-Nachricht anzeigen
        function showCouponMessage(text, type) {
            $couponMessage
                .text(text)
                .removeClass('success error')
                .addClass(type)
                .fadeIn();
            
            // Nach 3 Sekunden ausblenden
            setTimeout(function() {
                $couponMessage.fadeOut();
            }, 3000);
        }

        // Checkout Submit
        $buyButton.on('click', function(e) {
            // Prüfen, ob Warenkorb leer ist
            if (<?php echo WC()->cart->is_empty() ? 'true' : 'false'; ?>) {
                return false;
            }
            
            e.preventDefault();
            
            // Button Loading State
            $buyButton.addClass('loading');
            $validationFeedback.hide();
    
    // Checkout Validierung durchführen
    if (typeof YPrintCheckoutSystem !== 'undefined') {
        const validationResult = YPrintCheckoutSystem.validateForm();
        
        if (validationResult.isValid) {
            // Checkout Prozess starten
            YPrintCheckoutSystem.processCheckout();
        } else {
            // Fehler anzeigen
            showValidationErrors(validationResult.errors);
            $buyButton.removeClass('loading');
        }
    } else {
        // Fallback wenn YPrintCheckoutSystem nicht verfügbar ist
        $validationFeedback
            .empty()
            .addClass('error')
            .append($('<div class="yprint-validation-item"></div>').text('Das Checkout-System konnte nicht geladen werden.'))
            .show();
        
        $buyButton.removeClass('loading');
    }
});

        // Validierungsfehler anzeigen
        function showValidationErrors(errors) {
            $validationFeedback.empty().addClass('error');
            
            errors.forEach(error => {
                $validationFeedback.append(
                    $('<div class="yprint-validation-item"></div>').text(error)
                );
            });

            $validationFeedback.show();

            // Scroll zu den Fehlern
            $('html, body').animate({
                scrollTop: $validationFeedback.offset().top - 100
            }, 500);
        }
    });
    </script>
    <?php
    
    return ob_get_clean();
}
add_shortcode('yprint_coupon_buy', 'yprint_coupon_buy_shortcode');

// AJAX Handler für Gutscheine
function yprint_apply_coupon() {
    check_ajax_referer('yprint-checkout-nonce', 'security');
    
    if (!isset($_POST['coupon_code']) || empty($_POST['coupon_code'])) {
        wp_send_json_error('Kein Gutschein-Code angegeben');
        return;
    }
    
    $coupon_code = sanitize_text_field($_POST['coupon_code']);
    
    if (function_exists('WC') && WC()->cart) {
        // Prüfen ob Gutschein bereits angewendet wurde
        if (WC()->cart->has_discount($coupon_code)) {
            wp_send_json_error('Dieser Gutschein wurde bereits angewendet');
            return;
        }
        
        // Gutschein anwenden
        $result = WC()->cart->apply_coupon($coupon_code);
        
        if ($result) {
            wp_send_json_success('Gutschein erfolgreich angewendet');
        } else {
            wp_send_json_error('Der Gutschein konnte nicht angewendet werden');
        }
    } else {
        wp_send_json_error('WooCommerce ist nicht aktiviert');
    }
}
add_action('wp_ajax_yprint_apply_coupon', 'yprint_apply_coupon');
add_action('wp_ajax_nopriv_yprint_apply_coupon', 'yprint_apply_coupon');

/**
 * YPrint Checkout WooCommerce Integration
 * 
 * Integration des benutzerdefinierten Checkouts mit WooCommerce
 */

// Verhindern direkter Aufrufe
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Filter zur Übernahme der Daten aus dem benutzerdefinierten Checkout in den normalen WooCommerce-Checkout
 */
add_filter('woocommerce_checkout_posted_data', function($data) {
    // Checkout-Daten aus der Session abrufen
    $checkout_data = WC()->session ? WC()->session->get('yprint_checkout_data') : null;
    
    if ($checkout_data) {
        // Shipping-Daten übernehmen
        if (isset($checkout_data['shipping_address'])) {
            foreach ($checkout_data['shipping_address'] as $key => $value) {
                if ($key !== 'slot' && $key !== 'timestamp') {
                    $data['shipping_' . $key] = $value;
                }
            }
        }
        
        // Billing-Daten übernehmen wenn Different Billing aktiviert ist
        if (isset($checkout_data['different_billing']) && $checkout_data['different_billing']) {
            if (isset($checkout_data['different_billing_address'])) {
                foreach ($checkout_data['different_billing_address'] as $key => $value) {
                    // Konvertieren von different_billing_* zu billing_*
                    $billing_key = str_replace('different_billing_', 'billing_', $key);
                    $data[$billing_key] = $value;
                }
            }
        } else {
            // Wenn keine abweichende Rechnungsadresse, dann Lieferadresse für Rechnungsadresse verwenden
            if (isset($checkout_data['shipping_address'])) {
                foreach ($checkout_data['shipping_address'] as $key => $value) {
                    if ($key !== 'slot' && $key !== 'timestamp') {
                        $data['billing_' . $key] = $value;
                    }
                }
            }
        }
        
        // Zahlungsart übernehmen
        if (isset($checkout_data['payment_method']) && !empty($checkout_data['payment_method'])) {
            $data['payment_method'] = $checkout_data['payment_method'];
        }
    }
    
    return $data;
});

/**
 * Checkout Validierung erweitern
 */

add_action('woocommerce_checkout_process', function() {
    // Datenschutz-Checkbox prüfen
    if (!isset($_POST['privacy_checkbox']) || $_POST['privacy_checkbox'] !== 'on') {
        wc_add_notice('Bitte akzeptiere die Datenschutzerklärung, um fortzufahren.', 'error');
    }

    // Zahlungsmethode prüfen
    if (!isset($_POST['payment_method']) || empty($_POST['payment_method'])) {
        wc_add_notice('Bitte wähle eine Zahlungsmethode aus.', 'error');
    }

    // Lieferadresse prüfen
    $shipping_fields = array(
        'shipping_first_name' => 'Vorname',
        'shipping_last_name' => 'Nachname',
        'shipping_address_1' => 'Straße',
        'shipping_postcode' => 'PLZ',
        'shipping_city' => 'Ort',
        'shipping_country' => 'Land'
    );

    foreach ($shipping_fields as $field => $label) {
        if (!isset($_POST[$field]) || empty($_POST[$field])) {
            wc_add_notice(sprintf('Bitte gib %s für die Lieferadresse an.', $label), 'error');
        }
    }

    // Abweichende Rechnungsadresse prüfen wenn aktiviert
    if (isset($_POST['different_billing']) && $_POST['different_billing'] === 'on') {
        $billing_fields = array(
            'billing_first_name' => 'Vorname',
            'billing_last_name' => 'Nachname',
            'billing_address_1' => 'Straße',
            'billing_postcode' => 'PLZ',
            'billing_city' => 'Ort',
            'billing_country' => 'Land'
        );

        foreach ($billing_fields as $field => $label) {
            if (!isset($_POST[$field]) || empty($_POST[$field])) {
                wc_add_notice(sprintf('Bitte gib %s für die Rechnungsadresse an.', $label), 'error');
            }
        }
    }
});

/**
 * YPrint Checkout Shortcodes registrieren
 */
function register_yprint_checkout_shortcodes() {
    add_shortcode('yprint_checkout', 'yprint_checkout_shortcode');
    add_shortcode('yprint_checkout_communication', 'yprint_checkout_communication_shortcode');
    add_shortcode('yprint_shipping_address', 'yprint_shipping_address_shortcode');
    add_shortcode('yprint_payment_options', 'yprint_payment_options_shortcode');
    add_shortcode('yprint_different_billing', 'yprint_different_billing_shortcode');
    add_shortcode('yprint_order_summary', 'yprint_order_summary_shortcode');
    add_shortcode('yprint_coupon_buy', 'yprint_coupon_buy_shortcode');
}
add_action('init', 'register_yprint_checkout_shortcodes');

/**
 * Thankyou Redirect Shortcode
 * Zeigt eine Ladeanimation und leitet nach 5 Sekunden weiter
 */
function thankyou_redirect_shortcode() {
    ob_start();
    ?>
    <div class="thankyou-redirect-container">
        <div class="loader-animation">
            <div class="spinner"></div>
        </div>
        <div class="redirect-message">
            <h2>Vielen Dank für deinen Einkauf!</h2>
            <p>Du wirst in wenigen Sekunden weitergeleitet...</p>
        </div>
    </div>
    
    <style>
        .thankyou-redirect-container {
            text-align: center;
            padding: 40px 20px;
            max-width: 600px;
            margin: 0 auto;
            font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
        }
        
        .loader-animation {
            margin-bottom: 30px;
        }
        
        .spinner {
            width: 60px;
            height: 60px;
            border: 3px solid rgba(0, 121, 255, 0.2);
            border-radius: 50%;
            border-top-color: #0079FF;
            display: inline-block;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .redirect-message h2 {
            font-size: 24px;
            margin-bottom: 16px;
            color: #1d1d1f;
        }
        
        .redirect-message p {
            font-size: 16px;
            color: #6e6e73;
        }
    </style>
    
    <script>
        // Führe diese Funktion aus, sobald die Seite geladen ist
        (function() {
            // Setze den Timer für die Weiterleitung
            setTimeout(function() {
                window.location.href = 'https://yprint.de/basics/';
            }, 5000); // 5000 Millisekunden = 5 Sekunden
        })();
    </script>
    <?php
    
    return ob_get_clean();
}
add_shortcode('thankyou_redirect', 'thankyou_redirect_shortcode');

/**
 * Passt die Bestellbestätigungsseite an und ersetzt sie mit unserem benutzerdefinierten Redirect
 */
function customize_order_received_page($title, $id) {
    // Prüfen, ob es sich um die Order-Received-Seite handelt
    if (is_wc_endpoint_url('order-received') && $id == wc_get_page_id('checkout')) {
        // Mache den normalen Titel unsichtbar
        add_filter('the_content', 'replace_thankyou_content', 1);
        return '';
    }
    return $title;
}
add_filter('the_title', 'customize_order_received_page', 10, 2);

/**
 * Ersetzt den Inhalt der Bestellbestätigungsseite
 */
function replace_thankyou_content($content) {
    // Nur auf der Order-Received-Seite
    if (is_wc_endpoint_url('order-received')) {
        // Ersetze den Inhalt mit unserem Shortcode
        return do_shortcode('[thankyou_redirect]');
    }
    return $content;
}

/**
 * Entferne das standardmäßige WooCommerce Dankeschön-Template
 */
function remove_woocommerce_order_details_table() {
    if (is_wc_endpoint_url('order-received')) {
        remove_action('woocommerce_thankyou', 'woocommerce_order_details_table', 10);
        
        // Verhindere auch alle anderen WooCommerce-Ausgaben
        remove_all_actions('woocommerce_thankyou');
        remove_all_actions('woocommerce_order_details_before_order_table');
        remove_all_actions('woocommerce_order_details_after_order_table');
        remove_all_actions('woocommerce_order_details_before_customer_details');
        remove_all_actions('woocommerce_order_details_after_customer_details');
    }
}
add_action('template_redirect', 'remove_woocommerce_order_details_table');
